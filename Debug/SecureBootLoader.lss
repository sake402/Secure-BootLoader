
SecureBootLoader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000258  00800200  0003fc8a  00001d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c8a  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011e  00800458  00800458  00001f76  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00001fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004742  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b6f  00000000  00000000  00006a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024e4  00000000  00000000  000085f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a8  00000000  00000000  0000aae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e17  00000000  00000000  0000b488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000377b  00000000  00000000  0000c29f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000fa1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	71 c0       	rjmp	.+226    	; 0x3e0e4 <__ctors_end>
   3e002:	00 00       	nop
   3e004:	8f c0       	rjmp	.+286    	; 0x3e124 <__bad_interrupt>
   3e006:	00 00       	nop
   3e008:	8d c0       	rjmp	.+282    	; 0x3e124 <__bad_interrupt>
   3e00a:	00 00       	nop
   3e00c:	8b c0       	rjmp	.+278    	; 0x3e124 <__bad_interrupt>
   3e00e:	00 00       	nop
   3e010:	89 c0       	rjmp	.+274    	; 0x3e124 <__bad_interrupt>
   3e012:	00 00       	nop
   3e014:	87 c0       	rjmp	.+270    	; 0x3e124 <__bad_interrupt>
   3e016:	00 00       	nop
   3e018:	85 c0       	rjmp	.+266    	; 0x3e124 <__bad_interrupt>
   3e01a:	00 00       	nop
   3e01c:	83 c0       	rjmp	.+262    	; 0x3e124 <__bad_interrupt>
   3e01e:	00 00       	nop
   3e020:	81 c0       	rjmp	.+258    	; 0x3e124 <__bad_interrupt>
   3e022:	00 00       	nop
   3e024:	7f c0       	rjmp	.+254    	; 0x3e124 <__bad_interrupt>
   3e026:	00 00       	nop
   3e028:	7d c0       	rjmp	.+250    	; 0x3e124 <__bad_interrupt>
   3e02a:	00 00       	nop
   3e02c:	7b c0       	rjmp	.+246    	; 0x3e124 <__bad_interrupt>
   3e02e:	00 00       	nop
   3e030:	79 c0       	rjmp	.+242    	; 0x3e124 <__bad_interrupt>
   3e032:	00 00       	nop
   3e034:	77 c0       	rjmp	.+238    	; 0x3e124 <__bad_interrupt>
   3e036:	00 00       	nop
   3e038:	75 c0       	rjmp	.+234    	; 0x3e124 <__bad_interrupt>
   3e03a:	00 00       	nop
   3e03c:	73 c0       	rjmp	.+230    	; 0x3e124 <__bad_interrupt>
   3e03e:	00 00       	nop
   3e040:	71 c0       	rjmp	.+226    	; 0x3e124 <__bad_interrupt>
   3e042:	00 00       	nop
   3e044:	6f c0       	rjmp	.+222    	; 0x3e124 <__bad_interrupt>
   3e046:	00 00       	nop
   3e048:	6d c0       	rjmp	.+218    	; 0x3e124 <__bad_interrupt>
   3e04a:	00 00       	nop
   3e04c:	6b c0       	rjmp	.+214    	; 0x3e124 <__bad_interrupt>
   3e04e:	00 00       	nop
   3e050:	69 c0       	rjmp	.+210    	; 0x3e124 <__bad_interrupt>
   3e052:	00 00       	nop
   3e054:	67 c0       	rjmp	.+206    	; 0x3e124 <__bad_interrupt>
   3e056:	00 00       	nop
   3e058:	65 c0       	rjmp	.+202    	; 0x3e124 <__bad_interrupt>
   3e05a:	00 00       	nop
   3e05c:	63 c0       	rjmp	.+198    	; 0x3e124 <__bad_interrupt>
   3e05e:	00 00       	nop
   3e060:	61 c0       	rjmp	.+194    	; 0x3e124 <__bad_interrupt>
   3e062:	00 00       	nop
   3e064:	5f c0       	rjmp	.+190    	; 0x3e124 <__bad_interrupt>
   3e066:	00 00       	nop
   3e068:	5d c0       	rjmp	.+186    	; 0x3e124 <__bad_interrupt>
   3e06a:	00 00       	nop
   3e06c:	5b c0       	rjmp	.+182    	; 0x3e124 <__bad_interrupt>
   3e06e:	00 00       	nop
   3e070:	59 c0       	rjmp	.+178    	; 0x3e124 <__bad_interrupt>
   3e072:	00 00       	nop
   3e074:	57 c0       	rjmp	.+174    	; 0x3e124 <__bad_interrupt>
   3e076:	00 00       	nop
   3e078:	55 c0       	rjmp	.+170    	; 0x3e124 <__bad_interrupt>
   3e07a:	00 00       	nop
   3e07c:	53 c0       	rjmp	.+166    	; 0x3e124 <__bad_interrupt>
   3e07e:	00 00       	nop
   3e080:	51 c0       	rjmp	.+162    	; 0x3e124 <__bad_interrupt>
   3e082:	00 00       	nop
   3e084:	4f c0       	rjmp	.+158    	; 0x3e124 <__bad_interrupt>
   3e086:	00 00       	nop
   3e088:	4d c0       	rjmp	.+154    	; 0x3e124 <__bad_interrupt>
   3e08a:	00 00       	nop
   3e08c:	4b c0       	rjmp	.+150    	; 0x3e124 <__bad_interrupt>
   3e08e:	00 00       	nop
   3e090:	49 c0       	rjmp	.+146    	; 0x3e124 <__bad_interrupt>
   3e092:	00 00       	nop
   3e094:	47 c0       	rjmp	.+142    	; 0x3e124 <__bad_interrupt>
   3e096:	00 00       	nop
   3e098:	45 c0       	rjmp	.+138    	; 0x3e124 <__bad_interrupt>
   3e09a:	00 00       	nop
   3e09c:	43 c0       	rjmp	.+134    	; 0x3e124 <__bad_interrupt>
   3e09e:	00 00       	nop
   3e0a0:	41 c0       	rjmp	.+130    	; 0x3e124 <__bad_interrupt>
   3e0a2:	00 00       	nop
   3e0a4:	3f c0       	rjmp	.+126    	; 0x3e124 <__bad_interrupt>
   3e0a6:	00 00       	nop
   3e0a8:	3d c0       	rjmp	.+122    	; 0x3e124 <__bad_interrupt>
   3e0aa:	00 00       	nop
   3e0ac:	3b c0       	rjmp	.+118    	; 0x3e124 <__bad_interrupt>
   3e0ae:	00 00       	nop
   3e0b0:	39 c0       	rjmp	.+114    	; 0x3e124 <__bad_interrupt>
   3e0b2:	00 00       	nop
   3e0b4:	37 c0       	rjmp	.+110    	; 0x3e124 <__bad_interrupt>
   3e0b6:	00 00       	nop
   3e0b8:	35 c0       	rjmp	.+106    	; 0x3e124 <__bad_interrupt>
   3e0ba:	00 00       	nop
   3e0bc:	33 c0       	rjmp	.+102    	; 0x3e124 <__bad_interrupt>
   3e0be:	00 00       	nop
   3e0c0:	31 c0       	rjmp	.+98     	; 0x3e124 <__bad_interrupt>
   3e0c2:	00 00       	nop
   3e0c4:	2f c0       	rjmp	.+94     	; 0x3e124 <__bad_interrupt>
   3e0c6:	00 00       	nop
   3e0c8:	2d c0       	rjmp	.+90     	; 0x3e124 <__bad_interrupt>
   3e0ca:	00 00       	nop
   3e0cc:	2b c0       	rjmp	.+86     	; 0x3e124 <__bad_interrupt>
   3e0ce:	00 00       	nop
   3e0d0:	29 c0       	rjmp	.+82     	; 0x3e124 <__bad_interrupt>
   3e0d2:	00 00       	nop
   3e0d4:	27 c0       	rjmp	.+78     	; 0x3e124 <__bad_interrupt>
   3e0d6:	00 00       	nop
   3e0d8:	25 c0       	rjmp	.+74     	; 0x3e124 <__bad_interrupt>
   3e0da:	00 00       	nop
   3e0dc:	23 c0       	rjmp	.+70     	; 0x3e124 <__bad_interrupt>
   3e0de:	00 00       	nop
   3e0e0:	21 c0       	rjmp	.+66     	; 0x3e124 <__bad_interrupt>
	...

0003e0e4 <__ctors_end>:
   3e0e4:	11 24       	eor	r1, r1
   3e0e6:	1f be       	out	0x3f, r1	; 63
   3e0e8:	cf ef       	ldi	r28, 0xFF	; 255
   3e0ea:	d1 e2       	ldi	r29, 0x21	; 33
   3e0ec:	de bf       	out	0x3e, r29	; 62
   3e0ee:	cd bf       	out	0x3d, r28	; 61
   3e0f0:	01 e0       	ldi	r16, 0x01	; 1
   3e0f2:	0c bf       	out	0x3c, r16	; 60

0003e0f4 <__do_copy_data>:
   3e0f4:	14 e0       	ldi	r17, 0x04	; 4
   3e0f6:	a0 e0       	ldi	r26, 0x00	; 0
   3e0f8:	b2 e0       	ldi	r27, 0x02	; 2
   3e0fa:	ea e8       	ldi	r30, 0x8A	; 138
   3e0fc:	fc ef       	ldi	r31, 0xFC	; 252
   3e0fe:	03 e0       	ldi	r16, 0x03	; 3
   3e100:	0b bf       	out	0x3b, r16	; 59
   3e102:	02 c0       	rjmp	.+4      	; 0x3e108 <__do_copy_data+0x14>
   3e104:	07 90       	elpm	r0, Z+
   3e106:	0d 92       	st	X+, r0
   3e108:	a8 35       	cpi	r26, 0x58	; 88
   3e10a:	b1 07       	cpc	r27, r17
   3e10c:	d9 f7       	brne	.-10     	; 0x3e104 <__do_copy_data+0x10>

0003e10e <__do_clear_bss>:
   3e10e:	25 e0       	ldi	r18, 0x05	; 5
   3e110:	a8 e5       	ldi	r26, 0x58	; 88
   3e112:	b4 e0       	ldi	r27, 0x04	; 4
   3e114:	01 c0       	rjmp	.+2      	; 0x3e118 <.do_clear_bss_start>

0003e116 <.do_clear_bss_loop>:
   3e116:	1d 92       	st	X+, r1

0003e118 <.do_clear_bss_start>:
   3e118:	a6 37       	cpi	r26, 0x76	; 118
   3e11a:	b2 07       	cpc	r27, r18
   3e11c:	e1 f7       	brne	.-8      	; 0x3e116 <.do_clear_bss_loop>
   3e11e:	90 d4       	rcall	.+2336   	; 0x3ea40 <main>
   3e120:	0d 94 43 fe 	jmp	0x3fc86	; 0x3fc86 <_exit>

0003e124 <__bad_interrupt>:
   3e124:	6d cf       	rjmp	.-294    	; 0x3e000 <__vectors>

0003e126 <AddRoundKey>:
  {
    memcpy(output, input, extra);
    state = (state_t*)output;
    Cipher();
  }
}
   3e126:	1f 93       	push	r17
   3e128:	cf 93       	push	r28
   3e12a:	df 93       	push	r29
   3e12c:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <state>
   3e130:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <state+0x1>
   3e134:	90 e1       	ldi	r25, 0x10	; 16
   3e136:	89 9f       	mul	r24, r25
   3e138:	a0 01       	movw	r20, r0
   3e13a:	11 24       	eor	r1, r1
   3e13c:	30 e0       	ldi	r19, 0x00	; 0
   3e13e:	20 e0       	ldi	r18, 0x00	; 0
   3e140:	44 5a       	subi	r20, 0xA4	; 164
   3e142:	5b 4f       	sbci	r21, 0xFB	; 251
   3e144:	fb 01       	movw	r30, r22
   3e146:	e2 0f       	add	r30, r18
   3e148:	f3 1f       	adc	r31, r19
   3e14a:	da 01       	movw	r26, r20
   3e14c:	a2 0f       	add	r26, r18
   3e14e:	b3 1f       	adc	r27, r19
   3e150:	90 e0       	ldi	r25, 0x00	; 0
   3e152:	81 91       	ld	r24, Z+
   3e154:	1d 91       	ld	r17, X+
   3e156:	ef 01       	movw	r28, r30
   3e158:	21 97       	sbiw	r28, 0x01	; 1
   3e15a:	81 27       	eor	r24, r17
   3e15c:	88 83       	st	Y, r24
   3e15e:	9f 5f       	subi	r25, 0xFF	; 255
   3e160:	94 30       	cpi	r25, 0x04	; 4
   3e162:	b9 f7       	brne	.-18     	; 0x3e152 <AddRoundKey+0x2c>
   3e164:	2c 5f       	subi	r18, 0xFC	; 252
   3e166:	3f 4f       	sbci	r19, 0xFF	; 255
   3e168:	20 31       	cpi	r18, 0x10	; 16
   3e16a:	31 05       	cpc	r19, r1
   3e16c:	59 f7       	brne	.-42     	; 0x3e144 <AddRoundKey+0x1e>
   3e16e:	df 91       	pop	r29
   3e170:	cf 91       	pop	r28
   3e172:	1f 91       	pop	r17
   3e174:	08 95       	ret

0003e176 <xtime>:
   3e176:	98 2f       	mov	r25, r24
   3e178:	99 1f       	adc	r25, r25
   3e17a:	99 27       	eor	r25, r25
   3e17c:	99 1f       	adc	r25, r25
   3e17e:	2b e1       	ldi	r18, 0x1B	; 27
   3e180:	92 9f       	mul	r25, r18
   3e182:	90 2d       	mov	r25, r0
   3e184:	11 24       	eor	r1, r1
   3e186:	88 0f       	add	r24, r24
   3e188:	89 27       	eor	r24, r25
   3e18a:	08 95       	ret

0003e18c <InvCipher>:
   3e18c:	2f 92       	push	r2
   3e18e:	3f 92       	push	r3
   3e190:	4f 92       	push	r4
   3e192:	5f 92       	push	r5
   3e194:	6f 92       	push	r6
   3e196:	7f 92       	push	r7
   3e198:	8f 92       	push	r8
   3e19a:	9f 92       	push	r9
   3e19c:	af 92       	push	r10
   3e19e:	bf 92       	push	r11
   3e1a0:	cf 92       	push	r12
   3e1a2:	df 92       	push	r13
   3e1a4:	ef 92       	push	r14
   3e1a6:	ff 92       	push	r15
   3e1a8:	0f 93       	push	r16
   3e1aa:	1f 93       	push	r17
   3e1ac:	cf 93       	push	r28
   3e1ae:	df 93       	push	r29
   3e1b0:	00 d0       	rcall	.+0      	; 0x3e1b2 <InvCipher+0x26>
   3e1b2:	1f 92       	push	r1
   3e1b4:	cd b7       	in	r28, 0x3d	; 61
   3e1b6:	de b7       	in	r29, 0x3e	; 62
   3e1b8:	8e e0       	ldi	r24, 0x0E	; 14
   3e1ba:	b5 df       	rcall	.-150    	; 0x3e126 <AddRoundKey>
   3e1bc:	0d e0       	ldi	r16, 0x0D	; 13
   3e1be:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <state>
   3e1c2:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <state+0x1>
   3e1c6:	9a 83       	std	Y+2, r25	; 0x02
   3e1c8:	89 83       	std	Y+1, r24	; 0x01
   3e1ca:	fc 01       	movw	r30, r24
   3e1cc:	85 85       	ldd	r24, Z+13	; 0x0d
   3e1ce:	91 85       	ldd	r25, Z+9	; 0x09
   3e1d0:	95 87       	std	Z+13, r25	; 0x0d
   3e1d2:	95 81       	ldd	r25, Z+5	; 0x05
   3e1d4:	91 87       	std	Z+9, r25	; 0x09
   3e1d6:	91 81       	ldd	r25, Z+1	; 0x01
   3e1d8:	95 83       	std	Z+5, r25	; 0x05
   3e1da:	81 83       	std	Z+1, r24	; 0x01
   3e1dc:	82 81       	ldd	r24, Z+2	; 0x02
   3e1de:	92 85       	ldd	r25, Z+10	; 0x0a
   3e1e0:	92 83       	std	Z+2, r25	; 0x02
   3e1e2:	82 87       	std	Z+10, r24	; 0x0a
   3e1e4:	86 81       	ldd	r24, Z+6	; 0x06
   3e1e6:	96 85       	ldd	r25, Z+14	; 0x0e
   3e1e8:	96 83       	std	Z+6, r25	; 0x06
   3e1ea:	86 87       	std	Z+14, r24	; 0x0e
   3e1ec:	83 81       	ldd	r24, Z+3	; 0x03
   3e1ee:	97 81       	ldd	r25, Z+7	; 0x07
   3e1f0:	93 83       	std	Z+3, r25	; 0x03
   3e1f2:	93 85       	ldd	r25, Z+11	; 0x0b
   3e1f4:	97 83       	std	Z+7, r25	; 0x07
   3e1f6:	97 85       	ldd	r25, Z+15	; 0x0f
   3e1f8:	93 87       	std	Z+11, r25	; 0x0b
   3e1fa:	87 87       	std	Z+15, r24	; 0x0f
   3e1fc:	7f 01       	movw	r14, r30
   3e1fe:	9f 01       	movw	r18, r30
   3e200:	94 e0       	ldi	r25, 0x04	; 4
   3e202:	d9 01       	movw	r26, r18
   3e204:	80 e0       	ldi	r24, 0x00	; 0
   3e206:	ec 91       	ld	r30, X
   3e208:	f0 e0       	ldi	r31, 0x00	; 0
   3e20a:	e1 5b       	subi	r30, 0xB1	; 177
   3e20c:	fd 4f       	sbci	r31, 0xFD	; 253
   3e20e:	40 81       	ld	r20, Z
   3e210:	4c 93       	st	X, r20
   3e212:	8f 5f       	subi	r24, 0xFF	; 255
   3e214:	14 96       	adiw	r26, 0x04	; 4
   3e216:	84 30       	cpi	r24, 0x04	; 4
   3e218:	b1 f7       	brne	.-20     	; 0x3e206 <InvCipher+0x7a>
   3e21a:	91 50       	subi	r25, 0x01	; 1
   3e21c:	2f 5f       	subi	r18, 0xFF	; 255
   3e21e:	3f 4f       	sbci	r19, 0xFF	; 255
   3e220:	91 11       	cpse	r25, r1
   3e222:	ef cf       	rjmp	.-34     	; 0x3e202 <InvCipher+0x76>
   3e224:	80 2f       	mov	r24, r16
   3e226:	7f df       	rcall	.-258    	; 0x3e126 <AddRoundKey>
   3e228:	00 23       	and	r16, r16
   3e22a:	09 f4       	brne	.+2      	; 0x3e22e <InvCipher+0xa2>
   3e22c:	62 c0       	rjmp	.+196    	; 0x3e2f2 <InvCipher+0x166>
   3e22e:	89 81       	ldd	r24, Y+1	; 0x01
   3e230:	9a 81       	ldd	r25, Y+2	; 0x02
   3e232:	40 96       	adiw	r24, 0x10	; 16
   3e234:	9a 83       	std	Y+2, r25	; 0x02
   3e236:	89 83       	std	Y+1, r24	; 0x01
   3e238:	f7 01       	movw	r30, r14
   3e23a:	b0 80       	ld	r11, Z
   3e23c:	c1 80       	ldd	r12, Z+1	; 0x01
   3e23e:	d2 80       	ldd	r13, Z+2	; 0x02
   3e240:	73 80       	ldd	r7, Z+3	; 0x03
   3e242:	8b 2d       	mov	r24, r11
   3e244:	98 df       	rcall	.-208    	; 0x3e176 <xtime>
   3e246:	8b 83       	std	Y+3, r24	; 0x03
   3e248:	96 df       	rcall	.-212    	; 0x3e176 <xtime>
   3e24a:	8c 83       	std	Y+4, r24	; 0x04
   3e24c:	94 df       	rcall	.-216    	; 0x3e176 <xtime>
   3e24e:	88 2e       	mov	r8, r24
   3e250:	8c 2d       	mov	r24, r12
   3e252:	91 df       	rcall	.-222    	; 0x3e176 <xtime>
   3e254:	18 2f       	mov	r17, r24
   3e256:	8f df       	rcall	.-226    	; 0x3e176 <xtime>
   3e258:	48 2e       	mov	r4, r24
   3e25a:	8d df       	rcall	.-230    	; 0x3e176 <xtime>
   3e25c:	98 2e       	mov	r9, r24
   3e25e:	8d 2d       	mov	r24, r13
   3e260:	8a df       	rcall	.-236    	; 0x3e176 <xtime>
   3e262:	28 2e       	mov	r2, r24
   3e264:	88 df       	rcall	.-240    	; 0x3e176 <xtime>
   3e266:	38 2e       	mov	r3, r24
   3e268:	86 df       	rcall	.-244    	; 0x3e176 <xtime>
   3e26a:	a8 2e       	mov	r10, r24
   3e26c:	87 2d       	mov	r24, r7
   3e26e:	83 df       	rcall	.-250    	; 0x3e176 <xtime>
   3e270:	58 2e       	mov	r5, r24
   3e272:	81 df       	rcall	.-254    	; 0x3e176 <xtime>
   3e274:	68 2e       	mov	r6, r24
   3e276:	7f df       	rcall	.-258    	; 0x3e176 <xtime>
   3e278:	9b 81       	ldd	r25, Y+3	; 0x03
   3e27a:	fc 81       	ldd	r31, Y+4	; 0x04
   3e27c:	9f 27       	eor	r25, r31
   3e27e:	98 25       	eor	r25, r8
   3e280:	91 27       	eor	r25, r17
   3e282:	99 25       	eor	r25, r9
   3e284:	93 25       	eor	r25, r3
   3e286:	9a 25       	eor	r25, r10
   3e288:	98 27       	eor	r25, r24
   3e28a:	9c 25       	eor	r25, r12
   3e28c:	9d 25       	eor	r25, r13
   3e28e:	97 25       	eor	r25, r7
   3e290:	f7 01       	movw	r30, r14
   3e292:	90 83       	st	Z, r25
   3e294:	98 2d       	mov	r25, r8
   3e296:	91 27       	eor	r25, r17
   3e298:	94 25       	eor	r25, r4
   3e29a:	99 25       	eor	r25, r9
   3e29c:	92 25       	eor	r25, r2
   3e29e:	9a 25       	eor	r25, r10
   3e2a0:	96 25       	eor	r25, r6
   3e2a2:	98 27       	eor	r25, r24
   3e2a4:	9b 25       	eor	r25, r11
   3e2a6:	9d 25       	eor	r25, r13
   3e2a8:	97 25       	eor	r25, r7
   3e2aa:	91 83       	std	Z+1, r25	; 0x01
   3e2ac:	fc 81       	ldd	r31, Y+4	; 0x04
   3e2ae:	f8 25       	eor	r31, r8
   3e2b0:	f9 25       	eor	r31, r9
   3e2b2:	2f 26       	eor	r2, r31
   3e2b4:	32 24       	eor	r3, r2
   3e2b6:	3a 24       	eor	r3, r10
   3e2b8:	35 24       	eor	r3, r5
   3e2ba:	38 26       	eor	r3, r24
   3e2bc:	3b 24       	eor	r3, r11
   3e2be:	3c 24       	eor	r3, r12
   3e2c0:	73 24       	eor	r7, r3
   3e2c2:	f7 01       	movw	r30, r14
   3e2c4:	72 82       	std	Z+2, r7	; 0x02
   3e2c6:	fb 81       	ldd	r31, Y+3	; 0x03
   3e2c8:	f8 25       	eor	r31, r8
   3e2ca:	4f 26       	eor	r4, r31
   3e2cc:	94 24       	eor	r9, r4
   3e2ce:	a9 24       	eor	r10, r9
   3e2d0:	5a 24       	eor	r5, r10
   3e2d2:	65 24       	eor	r6, r5
   3e2d4:	86 25       	eor	r24, r6
   3e2d6:	b8 26       	eor	r11, r24
   3e2d8:	cb 24       	eor	r12, r11
   3e2da:	dc 24       	eor	r13, r12
   3e2dc:	f7 01       	movw	r30, r14
   3e2de:	d3 82       	std	Z+3, r13	; 0x03
   3e2e0:	f4 e0       	ldi	r31, 0x04	; 4
   3e2e2:	ef 0e       	add	r14, r31
   3e2e4:	f1 1c       	adc	r15, r1
   3e2e6:	89 81       	ldd	r24, Y+1	; 0x01
   3e2e8:	9a 81       	ldd	r25, Y+2	; 0x02
   3e2ea:	8e 15       	cp	r24, r14
   3e2ec:	9f 05       	cpc	r25, r15
   3e2ee:	09 f0       	breq	.+2      	; 0x3e2f2 <InvCipher+0x166>
   3e2f0:	a3 cf       	rjmp	.-186    	; 0x3e238 <InvCipher+0xac>
   3e2f2:	01 50       	subi	r16, 0x01	; 1
   3e2f4:	08 f0       	brcs	.+2      	; 0x3e2f8 <InvCipher+0x16c>
   3e2f6:	63 cf       	rjmp	.-314    	; 0x3e1be <InvCipher+0x32>
   3e2f8:	0f 90       	pop	r0
   3e2fa:	0f 90       	pop	r0
   3e2fc:	0f 90       	pop	r0
   3e2fe:	0f 90       	pop	r0
   3e300:	df 91       	pop	r29
   3e302:	cf 91       	pop	r28
   3e304:	1f 91       	pop	r17
   3e306:	0f 91       	pop	r16
   3e308:	ff 90       	pop	r15
   3e30a:	ef 90       	pop	r14
   3e30c:	df 90       	pop	r13
   3e30e:	cf 90       	pop	r12
   3e310:	bf 90       	pop	r11
   3e312:	af 90       	pop	r10
   3e314:	9f 90       	pop	r9
   3e316:	8f 90       	pop	r8
   3e318:	7f 90       	pop	r7
   3e31a:	6f 90       	pop	r6
   3e31c:	5f 90       	pop	r5
   3e31e:	4f 90       	pop	r4
   3e320:	3f 90       	pop	r3
   3e322:	2f 90       	pop	r2
   3e324:	08 95       	ret

0003e326 <XorWithIv>:
   3e326:	fc 01       	movw	r30, r24
   3e328:	a0 91 58 04 	lds	r26, 0x0458	; 0x800458 <__data_end>
   3e32c:	b0 91 59 04 	lds	r27, 0x0459	; 0x800459 <__data_end+0x1>
   3e330:	91 e1       	ldi	r25, 0x11	; 17
   3e332:	91 50       	subi	r25, 0x01	; 1
   3e334:	09 f4       	brne	.+2      	; 0x3e338 <XorWithIv+0x12>
   3e336:	08 95       	ret
   3e338:	2d 91       	ld	r18, X+
   3e33a:	80 81       	ld	r24, Z
   3e33c:	82 27       	eor	r24, r18
   3e33e:	81 93       	st	Z+, r24
   3e340:	f8 cf       	rjmp	.-16     	; 0x3e332 <XorWithIv+0xc>

0003e342 <KeyExpansion>:
   3e342:	cf 93       	push	r28
   3e344:	df 93       	push	r29
   3e346:	00 d0       	rcall	.+0      	; 0x3e348 <KeyExpansion+0x6>
   3e348:	1f 92       	push	r1
   3e34a:	cd b7       	in	r28, 0x3d	; 61
   3e34c:	de b7       	in	r29, 0x3e	; 62
   3e34e:	e0 91 5a 04 	lds	r30, 0x045A	; 0x80045a <Key>
   3e352:	f0 91 5b 04 	lds	r31, 0x045B	; 0x80045b <Key+0x1>
   3e356:	80 e2       	ldi	r24, 0x20	; 32
   3e358:	ac e5       	ldi	r26, 0x5C	; 92
   3e35a:	b4 e0       	ldi	r27, 0x04	; 4
   3e35c:	01 90       	ld	r0, Z+
   3e35e:	0d 92       	st	X+, r0
   3e360:	8a 95       	dec	r24
   3e362:	e1 f7       	brne	.-8      	; 0x3e35c <KeyExpansion+0x1a>
   3e364:	ec e5       	ldi	r30, 0x5C	; 92
   3e366:	f4 e0       	ldi	r31, 0x04	; 4
   3e368:	88 e0       	ldi	r24, 0x08	; 8
   3e36a:	9e 01       	movw	r18, r28
   3e36c:	2b 5f       	subi	r18, 0xFB	; 251
   3e36e:	3f 4f       	sbci	r19, 0xFF	; 255
   3e370:	44 8d       	ldd	r20, Z+28	; 0x1c
   3e372:	55 8d       	ldd	r21, Z+29	; 0x1d
   3e374:	66 8d       	ldd	r22, Z+30	; 0x1e
   3e376:	77 8d       	ldd	r23, Z+31	; 0x1f
   3e378:	49 83       	std	Y+1, r20	; 0x01
   3e37a:	5a 83       	std	Y+2, r21	; 0x02
   3e37c:	6b 83       	std	Y+3, r22	; 0x03
   3e37e:	7c 83       	std	Y+4, r23	; 0x04
   3e380:	98 2f       	mov	r25, r24
   3e382:	97 70       	andi	r25, 0x07	; 7
   3e384:	09 f0       	breq	.+2      	; 0x3e388 <KeyExpansion+0x46>
   3e386:	42 c0       	rjmp	.+132    	; 0x3e40c <KeyExpansion+0xca>
   3e388:	99 81       	ldd	r25, Y+1	; 0x01
   3e38a:	4a 81       	ldd	r20, Y+2	; 0x02
   3e38c:	49 83       	std	Y+1, r20	; 0x01
   3e38e:	4b 81       	ldd	r20, Y+3	; 0x03
   3e390:	4a 83       	std	Y+2, r20	; 0x02
   3e392:	4c 81       	ldd	r20, Y+4	; 0x04
   3e394:	4b 83       	std	Y+3, r20	; 0x03
   3e396:	9c 83       	std	Y+4, r25	; 0x04
   3e398:	ae 01       	movw	r20, r28
   3e39a:	4f 5f       	subi	r20, 0xFF	; 255
   3e39c:	5f 4f       	sbci	r21, 0xFF	; 255
   3e39e:	da 01       	movw	r26, r20
   3e3a0:	9d 91       	ld	r25, X+
   3e3a2:	ad 01       	movw	r20, r26
   3e3a4:	bd 01       	movw	r22, r26
   3e3a6:	61 50       	subi	r22, 0x01	; 1
   3e3a8:	71 09       	sbc	r23, r1
   3e3aa:	a9 2f       	mov	r26, r25
   3e3ac:	b0 e0       	ldi	r27, 0x00	; 0
   3e3ae:	a1 5b       	subi	r26, 0xB1	; 177
   3e3b0:	bc 4f       	sbci	r27, 0xFC	; 252
   3e3b2:	9c 91       	ld	r25, X
   3e3b4:	db 01       	movw	r26, r22
   3e3b6:	9c 93       	st	X, r25
   3e3b8:	24 17       	cp	r18, r20
   3e3ba:	35 07       	cpc	r19, r21
   3e3bc:	81 f7       	brne	.-32     	; 0x3e39e <KeyExpansion+0x5c>
   3e3be:	a8 2f       	mov	r26, r24
   3e3c0:	a6 95       	lsr	r26
   3e3c2:	a6 95       	lsr	r26
   3e3c4:	a6 95       	lsr	r26
   3e3c6:	b0 e0       	ldi	r27, 0x00	; 0
   3e3c8:	ac 5b       	subi	r26, 0xBC	; 188
   3e3ca:	bd 4f       	sbci	r27, 0xFD	; 253
   3e3cc:	99 81       	ldd	r25, Y+1	; 0x01
   3e3ce:	4c 91       	ld	r20, X
   3e3d0:	94 27       	eor	r25, r20
   3e3d2:	99 83       	std	Y+1, r25	; 0x01
   3e3d4:	90 81       	ld	r25, Z
   3e3d6:	49 81       	ldd	r20, Y+1	; 0x01
   3e3d8:	94 27       	eor	r25, r20
   3e3da:	90 a3       	std	Z+32, r25	; 0x20
   3e3dc:	91 81       	ldd	r25, Z+1	; 0x01
   3e3de:	4a 81       	ldd	r20, Y+2	; 0x02
   3e3e0:	94 27       	eor	r25, r20
   3e3e2:	91 a3       	std	Z+33, r25	; 0x21
   3e3e4:	92 81       	ldd	r25, Z+2	; 0x02
   3e3e6:	4b 81       	ldd	r20, Y+3	; 0x03
   3e3e8:	94 27       	eor	r25, r20
   3e3ea:	92 a3       	std	Z+34, r25	; 0x22
   3e3ec:	93 81       	ldd	r25, Z+3	; 0x03
   3e3ee:	4c 81       	ldd	r20, Y+4	; 0x04
   3e3f0:	94 27       	eor	r25, r20
   3e3f2:	93 a3       	std	Z+35, r25	; 0x23
   3e3f4:	8f 5f       	subi	r24, 0xFF	; 255
   3e3f6:	34 96       	adiw	r30, 0x04	; 4
   3e3f8:	8c 33       	cpi	r24, 0x3C	; 60
   3e3fa:	09 f0       	breq	.+2      	; 0x3e3fe <KeyExpansion+0xbc>
   3e3fc:	b9 cf       	rjmp	.-142    	; 0x3e370 <KeyExpansion+0x2e>
   3e3fe:	0f 90       	pop	r0
   3e400:	0f 90       	pop	r0
   3e402:	0f 90       	pop	r0
   3e404:	0f 90       	pop	r0
   3e406:	df 91       	pop	r29
   3e408:	cf 91       	pop	r28
   3e40a:	08 95       	ret
   3e40c:	94 30       	cpi	r25, 0x04	; 4
   3e40e:	11 f7       	brne	.-60     	; 0x3e3d4 <KeyExpansion+0x92>
   3e410:	ae 01       	movw	r20, r28
   3e412:	4f 5f       	subi	r20, 0xFF	; 255
   3e414:	5f 4f       	sbci	r21, 0xFF	; 255
   3e416:	da 01       	movw	r26, r20
   3e418:	9d 91       	ld	r25, X+
   3e41a:	ad 01       	movw	r20, r26
   3e41c:	bd 01       	movw	r22, r26
   3e41e:	61 50       	subi	r22, 0x01	; 1
   3e420:	71 09       	sbc	r23, r1
   3e422:	a9 2f       	mov	r26, r25
   3e424:	b0 e0       	ldi	r27, 0x00	; 0
   3e426:	a1 5b       	subi	r26, 0xB1	; 177
   3e428:	bc 4f       	sbci	r27, 0xFC	; 252
   3e42a:	9c 91       	ld	r25, X
   3e42c:	db 01       	movw	r26, r22
   3e42e:	9c 93       	st	X, r25
   3e430:	42 17       	cp	r20, r18
   3e432:	53 07       	cpc	r21, r19
   3e434:	81 f7       	brne	.-32     	; 0x3e416 <KeyExpansion+0xd4>
   3e436:	ce cf       	rjmp	.-100    	; 0x3e3d4 <KeyExpansion+0x92>

0003e438 <AES_CBC_decrypt_buffer>:

void AES_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint16_t length, const uint8_t* key, const uint8_t* iv)
{
   3e438:	8f 92       	push	r8
   3e43a:	9f 92       	push	r9
   3e43c:	af 92       	push	r10
   3e43e:	bf 92       	push	r11
   3e440:	cf 92       	push	r12
   3e442:	df 92       	push	r13
   3e444:	ef 92       	push	r14
   3e446:	ff 92       	push	r15
   3e448:	0f 93       	push	r16
   3e44a:	1f 93       	push	r17
   3e44c:	cf 93       	push	r28
   3e44e:	df 93       	push	r29
   3e450:	6c 01       	movw	r12, r24
   3e452:	5b 01       	movw	r10, r22
   3e454:	7a 01       	movw	r14, r20
//  uint8_t extra = length % BLOCKLEN; /* Remaining bytes in the last non-full block */

  // Skip the key expansion if key is passed as 0
//  if (0 != key)
  {
    Key = key;
   3e456:	30 93 5b 04 	sts	0x045B, r19	; 0x80045b <Key+0x1>
   3e45a:	20 93 5a 04 	sts	0x045A, r18	; 0x80045a <Key>
  }

  // If iv is passed as 0, we continue to encrypt without re-setting the Iv
//  if (iv != 0)
  {
    Iv = (uint8_t*)iv;
   3e45e:	71 df       	rcall	.-286    	; 0x3e342 <KeyExpansion>
   3e460:	10 93 59 04 	sts	0x0459, r17	; 0x800459 <__data_end+0x1>
   3e464:	00 93 58 04 	sts	0x0458, r16	; 0x800458 <__data_end>
  }

  for (i = 0; i < length; i += BLOCKLEN)
   3e468:	d0 e0       	ldi	r29, 0x00	; 0
   3e46a:	c0 e0       	ldi	r28, 0x00	; 0
   3e46c:	45 01       	movw	r8, r10
   3e46e:	8c 0e       	add	r8, r28
   3e470:	9d 1e       	adc	r9, r29
   3e472:	86 01       	movw	r16, r12
   3e474:	0c 0f       	add	r16, r28
   3e476:	1d 1f       	adc	r17, r29
   3e478:	ce 15       	cp	r28, r14
   3e47a:	df 05       	cpc	r29, r15
//  {
//    memcpy(output, input, extra);
//    state = (state_t*)output;
//    InvCipher();
//  }
}
   3e47c:	68 f0       	brcs	.+26     	; 0x3e498 <AES_CBC_decrypt_buffer+0x60>
   3e47e:	df 91       	pop	r29
   3e480:	cf 91       	pop	r28
   3e482:	1f 91       	pop	r17
   3e484:	0f 91       	pop	r16
   3e486:	ff 90       	pop	r15
   3e488:	ef 90       	pop	r14
   3e48a:	df 90       	pop	r13
   3e48c:	cf 90       	pop	r12
   3e48e:	bf 90       	pop	r11
   3e490:	af 90       	pop	r10
   3e492:	9f 90       	pop	r9
   3e494:	8f 90       	pop	r8
    memcpy(output, input, BLOCKLEN);
   3e496:	08 95       	ret
   3e498:	80 e1       	ldi	r24, 0x10	; 16
   3e49a:	f4 01       	movw	r30, r8
   3e49c:	d8 01       	movw	r26, r16
   3e49e:	01 90       	ld	r0, Z+
   3e4a0:	0d 92       	st	X+, r0
   3e4a2:	8a 95       	dec	r24
    state = (state_t*)output;
   3e4a4:	e1 f7       	brne	.-8      	; 0x3e49e <AES_CBC_decrypt_buffer+0x66>
   3e4a6:	10 93 4d 05 	sts	0x054D, r17	; 0x80054d <state+0x1>
    InvCipher();
   3e4aa:	00 93 4c 05 	sts	0x054C, r16	; 0x80054c <state>
    XorWithIv(output);
   3e4ae:	6e de       	rcall	.-804    	; 0x3e18c <InvCipher>
   3e4b0:	c8 01       	movw	r24, r16
    Iv = input;
   3e4b2:	39 df       	rcall	.-398    	; 0x3e326 <XorWithIv>
   3e4b4:	90 92 59 04 	sts	0x0459, r9	; 0x800459 <__data_end+0x1>
   3e4b8:	80 92 58 04 	sts	0x0458, r8	; 0x800458 <__data_end>
  for (i = 0; i < length; i += BLOCKLEN)
   3e4bc:	60 96       	adiw	r28, 0x10	; 16
   3e4be:	d6 cf       	rjmp	.-84     	; 0x3e46c <AES_CBC_decrypt_buffer+0x34>

0003e4c0 <CRC>:


#include <crc.h>
#include <stdint.h>

uint16_t CRC(uint16_t crc, uint8_t ch){
   3e4c0:	28 e0       	ldi	r18, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++) {
		if ((crc ^ ch) & 1)
   3e4c2:	ac 01       	movw	r20, r24
   3e4c4:	46 27       	eor	r20, r22
   3e4c6:	96 95       	lsr	r25
   3e4c8:	87 95       	ror	r24
   3e4ca:	40 ff       	sbrs	r20, 0
   3e4cc:	04 c0       	rjmp	.+8      	; 0x3e4d6 <CRC+0x16>
			crc = (crc >> 1) ^ 0xA001;
   3e4ce:	31 e0       	ldi	r19, 0x01	; 1
   3e4d0:	83 27       	eor	r24, r19
   3e4d2:	30 ea       	ldi	r19, 0xA0	; 160
   3e4d4:	93 27       	eor	r25, r19
		else
			crc >>= 1;
		ch >>= 1;
   3e4d6:	66 95       	lsr	r22
   3e4d8:	21 50       	subi	r18, 0x01	; 1
	for (uint8_t i = 0; i < 8; i++) {
   3e4da:	99 f7       	brne	.-26     	; 0x3e4c2 <CRC+0x2>
	}
	return crc;
}
   3e4dc:	08 95       	ret

0003e4de <FlashInit>:
	uint32_t size;
	if (flashInfo[2] != 0 && flashInfo[2] != 0xFF)
		size = ((uint32_t)1) << ((uint8_t)(flashInfo[2]));
	else
		size = (uint32_t)1 << 31;
	return size;
   3e4de:	e1 e0       	ldi	r30, 0x01	; 1
   3e4e0:	f1 e0       	ldi	r31, 0x01	; 1
   3e4e2:	80 81       	ld	r24, Z
   3e4e4:	80 68       	ori	r24, 0x80	; 128
   3e4e6:	80 83       	st	Z, r24
   3e4e8:	e2 e0       	ldi	r30, 0x02	; 2
   3e4ea:	f1 e0       	ldi	r31, 0x01	; 1
   3e4ec:	80 81       	ld	r24, Z
   3e4ee:	80 68       	ori	r24, 0x80	; 128
   3e4f0:	80 83       	st	Z, r24
   3e4f2:	08 95       	ret

0003e4f4 <FlashDeInit>:
   3e4f4:	e1 e0       	ldi	r30, 0x01	; 1
   3e4f6:	f1 e0       	ldi	r31, 0x01	; 1
   3e4f8:	80 81       	ld	r24, Z
   3e4fa:	8f 77       	andi	r24, 0x7F	; 127
   3e4fc:	80 83       	st	Z, r24
   3e4fe:	e2 e0       	ldi	r30, 0x02	; 2
   3e500:	f1 e0       	ldi	r31, 0x01	; 1
   3e502:	80 81       	ld	r24, Z
   3e504:	8f 77       	andi	r24, 0x7F	; 127
   3e506:	80 83       	st	Z, r24
   3e508:	08 95       	ret

0003e50a <FlashGetStatus1>:
   3e50a:	cf 93       	push	r28
   3e50c:	df 93       	push	r29
   3e50e:	c2 e0       	ldi	r28, 0x02	; 2
   3e510:	d1 e0       	ldi	r29, 0x01	; 1
   3e512:	88 81       	ld	r24, Y
   3e514:	8f 77       	andi	r24, 0x7F	; 127
   3e516:	88 83       	st	Y, r24
   3e518:	85 e0       	ldi	r24, 0x05	; 5
   3e51a:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
   3e51e:	80 e0       	ldi	r24, 0x00	; 0
   3e520:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
   3e524:	98 81       	ld	r25, Y
   3e526:	90 68       	ori	r25, 0x80	; 128
   3e528:	98 83       	st	Y, r25
   3e52a:	df 91       	pop	r29
   3e52c:	cf 91       	pop	r28
   3e52e:	08 95       	ret

0003e530 <FlashBusy>:
   3e530:	ec df       	rcall	.-40     	; 0x3e50a <FlashGetStatus1>
   3e532:	81 70       	andi	r24, 0x01	; 1
   3e534:	08 95       	ret

0003e536 <FlashWriteEnable>:
   3e536:	cf 93       	push	r28
   3e538:	df 93       	push	r29
   3e53a:	c2 e0       	ldi	r28, 0x02	; 2
   3e53c:	d1 e0       	ldi	r29, 0x01	; 1
   3e53e:	88 81       	ld	r24, Y
   3e540:	8f 77       	andi	r24, 0x7F	; 127
   3e542:	88 83       	st	Y, r24
   3e544:	86 e0       	ldi	r24, 0x06	; 6
   3e546:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
   3e54a:	88 81       	ld	r24, Y
   3e54c:	80 68       	ori	r24, 0x80	; 128
   3e54e:	88 83       	st	Y, r24
   3e550:	df 91       	pop	r29
   3e552:	cf 91       	pop	r28
   3e554:	08 95       	ret

0003e556 <FlashWriteDisable>:
   3e556:	cf 93       	push	r28
   3e558:	df 93       	push	r29
   3e55a:	c2 e0       	ldi	r28, 0x02	; 2
   3e55c:	d1 e0       	ldi	r29, 0x01	; 1
   3e55e:	88 81       	ld	r24, Y
   3e560:	8f 77       	andi	r24, 0x7F	; 127
   3e562:	88 83       	st	Y, r24
   3e564:	84 e0       	ldi	r24, 0x04	; 4
   3e566:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
   3e56a:	88 81       	ld	r24, Y
   3e56c:	80 68       	ori	r24, 0x80	; 128
   3e56e:	88 83       	st	Y, r24
   3e570:	df 91       	pop	r29
   3e572:	cf 91       	pop	r28
   3e574:	08 95       	ret

0003e576 <FlashEraseBlock>:
}

void FlashEraseBlock(uint32_t blockAddress){
   3e576:	1f 93       	push	r17
   3e578:	cf 93       	push	r28
   3e57a:	df 93       	push	r29
   3e57c:	eb 01       	movw	r28, r22
	FlashWriteEnable();
   3e57e:	18 2f       	mov	r17, r24
	Select();
   3e580:	da df       	rcall	.-76     	; 0x3e536 <FlashWriteEnable>
   3e582:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   3e586:	8f 77       	andi	r24, 0x7F	; 127
   3e588:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	SPIXfer(0x20);
   3e58c:	80 e2       	ldi	r24, 0x20	; 32
   3e58e:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
	SPIXfer(blockAddress>>16);
   3e592:	81 2f       	mov	r24, r17
   3e594:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
	SPIXfer(blockAddress>>8);
   3e598:	8d 2f       	mov	r24, r29
   3e59a:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
	SPIXfer(blockAddress>>0);
   3e59e:	8c 2f       	mov	r24, r28
   3e5a0:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
	Deselect();
   3e5a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   3e5a8:	80 68       	ori	r24, 0x80	; 128
	while(FlashBusy());
   3e5aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   3e5ae:	c0 df       	rcall	.-128    	; 0x3e530 <FlashBusy>
   3e5b0:	81 11       	cpse	r24, r1
	FlashWriteDisable();
}
   3e5b2:	fd cf       	rjmp	.-6      	; 0x3e5ae <FlashEraseBlock+0x38>
   3e5b4:	df 91       	pop	r29
	FlashWriteDisable();
   3e5b6:	cf 91       	pop	r28
   3e5b8:	1f 91       	pop	r17
uint8_t FlashBusy() {
   3e5ba:	cd cf       	rjmp	.-102    	; 0x3e556 <FlashWriteDisable>

0003e5bc <FlashRead>:
   3e5bc:	df 92       	push	r13
   3e5be:	ef 92       	push	r14
   3e5c0:	ff 92       	push	r15
   3e5c2:	0f 93       	push	r16
   3e5c4:	1f 93       	push	r17
   3e5c6:	cf 93       	push	r28
   3e5c8:	df 93       	push	r29
   3e5ca:	eb 01       	movw	r28, r22
   3e5cc:	d8 2e       	mov	r13, r24
   3e5ce:	7a 01       	movw	r14, r20
   3e5d0:	89 01       	movw	r16, r18
   3e5d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   3e5d6:	8f 77       	andi	r24, 0x7F	; 127
   3e5d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   3e5dc:	83 e0       	ldi	r24, 0x03	; 3
   3e5de:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
   3e5e2:	8d 2d       	mov	r24, r13
   3e5e4:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
   3e5e8:	8d 2f       	mov	r24, r29
   3e5ea:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
   3e5ee:	8c 2f       	mov	r24, r28
   3e5f0:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
   3e5f4:	e7 01       	movw	r28, r14
   3e5f6:	0e 0d       	add	r16, r14
   3e5f8:	1f 1d       	adc	r17, r15
   3e5fa:	c0 17       	cp	r28, r16
   3e5fc:	d1 07       	cpc	r29, r17
   3e5fe:	69 f4       	brne	.+26     	; 0x3e61a <FlashRead+0x5e>
   3e600:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   3e604:	80 68       	ori	r24, 0x80	; 128
   3e606:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   3e60a:	df 91       	pop	r29
   3e60c:	cf 91       	pop	r28
   3e60e:	1f 91       	pop	r17
   3e610:	0f 91       	pop	r16
   3e612:	ff 90       	pop	r15
   3e614:	ef 90       	pop	r14
   3e616:	df 90       	pop	r13
   3e618:	08 95       	ret
   3e61a:	80 e0       	ldi	r24, 0x00	; 0
   3e61c:	0f 94 f2 fc 	call	0x3f9e4	; 0x3f9e4 <SPIXfer>
   3e620:	89 93       	st	Y+, r24
   3e622:	eb cf       	rjmp	.-42     	; 0x3e5fa <FlashRead+0x3e>

0003e624 <Read>:

//data dataSource
uint8_t dataSource;

uint8_t Read(uint32_t address, uint8_t* data, uint16_t dataLength){
	switch (dataSource){
   3e624:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <dataSource>
   3e628:	ed 34       	cpi	r30, 0x4D	; 77
   3e62a:	61 f0       	breq	.+24     	; 0x3e644 <Read+0x20>
   3e62c:	e5 35       	cpi	r30, 0x55	; 85
   3e62e:	41 f0       	breq	.+16     	; 0x3e640 <Read+0x1c>
   3e630:	e6 34       	cpi	r30, 0x46	; 70
   3e632:	49 f4       	brne	.+18     	; 0x3e646 <Read+0x22>
	case 'F':
		FlashRead(address+flashOffset, data, dataLength);
   3e634:	70 5f       	subi	r23, 0xF0	; 240
   3e636:	8f 4f       	sbci	r24, 0xFF	; 255
   3e638:	9f 4f       	sbci	r25, 0xFF	; 255
   3e63a:	c0 df       	rcall	.-128    	; 0x3e5bc <FlashRead>
		return 1;
   3e63c:	81 e0       	ldi	r24, 0x01	; 1
   3e63e:	08 95       	ret
	case 'U':
		return UartRead(address, data, dataLength);
   3e640:	0d 94 26 fd 	jmp	0x3fa4c	; 0x3fa4c <UartRead>
	case 'M':
		return SDRead(address, data, dataLength);
   3e644:	19 c7       	rjmp	.+3634   	; 0x3f478 <SDRead>
	}
	return 0;
   3e646:	80 e0       	ldi	r24, 0x00	; 0
}
   3e648:	08 95       	ret

0003e64a <boot_program_page>:

void boot_program_page (uint32_t page, uint8_t *buf){
   3e64a:	0f 93       	push	r16
   3e64c:	1f 93       	push	r17
   3e64e:	cf 93       	push	r28
   3e650:	df 93       	push	r29
   uint16_t i;
   boot_page_erase (page);
   3e652:	23 e0       	ldi	r18, 0x03	; 3
   3e654:	fb 01       	movw	r30, r22
   3e656:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3e65a:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e65e:	e8 95       	spm
   boot_spm_busy_wait ();      // Wait until the memory is erased.
   3e660:	07 b6       	in	r0, 0x37	; 55
   3e662:	00 fc       	sbrc	r0, 0
   3e664:	fd cf       	rjmp	.-6      	; 0x3e660 <boot_program_page+0x16>
   3e666:	ea 01       	movw	r28, r20
   3e668:	00 e0       	ldi	r16, 0x00	; 0
   3e66a:	10 e0       	ldi	r17, 0x00	; 0
   3e66c:	98 01       	movw	r18, r16
   for (i=0; i<SPM_PAGESIZE; i+=2, buf+=2)
   {
	   uint16_t w = *(uint16_t*)buf;
//	   w += (*buf++) << 8;
	   boot_page_fill (i, w);
   3e66e:	41 e0       	ldi	r20, 0x01	; 1
	   uint16_t w = *(uint16_t*)buf;
   3e670:	a9 91       	ld	r26, Y+
   3e672:	b9 91       	ld	r27, Y+
	   boot_page_fill (i, w);
   3e674:	0d 01       	movw	r0, r26
   3e676:	f8 01       	movw	r30, r16
   3e678:	20 93 5b 00 	sts	0x005B, r18	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3e67c:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e680:	e8 95       	spm
   3e682:	11 24       	eor	r1, r1
   3e684:	0e 5f       	subi	r16, 0xFE	; 254
   3e686:	1f 4f       	sbci	r17, 0xFF	; 255
   3e688:	2f 4f       	sbci	r18, 0xFF	; 255
   3e68a:	3f 4f       	sbci	r19, 0xFF	; 255
   for (i=0; i<SPM_PAGESIZE; i+=2, buf+=2)
   3e68c:	01 15       	cp	r16, r1
   3e68e:	51 e0       	ldi	r21, 0x01	; 1
   3e690:	15 07       	cpc	r17, r21
   3e692:	21 05       	cpc	r18, r1
   3e694:	31 05       	cpc	r19, r1
   3e696:	61 f7       	brne	.-40     	; 0x3e670 <boot_program_page+0x26>
   }
   boot_page_write (page);     // Store buffer in flash page.
   3e698:	25 e0       	ldi	r18, 0x05	; 5
   3e69a:	fb 01       	movw	r30, r22
   3e69c:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3e6a0:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e6a4:	e8 95       	spm
   boot_spm_busy_wait();       // Wait until the memory is written.
   3e6a6:	07 b6       	in	r0, 0x37	; 55
   3e6a8:	00 fc       	sbrc	r0, 0
   3e6aa:	fd cf       	rjmp	.-6      	; 0x3e6a6 <boot_program_page+0x5c>
   boot_rww_enable ();
   3e6ac:	81 e1       	ldi	r24, 0x11	; 17
   3e6ae:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3e6b2:	e8 95       	spm
}
   3e6b4:	df 91       	pop	r29
   3e6b6:	cf 91       	pop	r28
   3e6b8:	1f 91       	pop	r17
   3e6ba:	0f 91       	pop	r16
   3e6bc:	08 95       	ret

0003e6be <BootLoader>:

void BootLoader(){
   3e6be:	2f 92       	push	r2
   3e6c0:	3f 92       	push	r3
   3e6c2:	4f 92       	push	r4
   3e6c4:	5f 92       	push	r5
   3e6c6:	6f 92       	push	r6
   3e6c8:	7f 92       	push	r7
   3e6ca:	8f 92       	push	r8
   3e6cc:	9f 92       	push	r9
   3e6ce:	af 92       	push	r10
   3e6d0:	bf 92       	push	r11
   3e6d2:	cf 92       	push	r12
   3e6d4:	df 92       	push	r13
   3e6d6:	ef 92       	push	r14
   3e6d8:	ff 92       	push	r15
   3e6da:	0f 93       	push	r16
   3e6dc:	1f 93       	push	r17
   3e6de:	cf 93       	push	r28
   3e6e0:	df 93       	push	r29
   3e6e2:	cd b7       	in	r28, 0x3d	; 61
   3e6e4:	de b7       	in	r29, 0x3e	; 62
   3e6e6:	cd 5a       	subi	r28, 0xAD	; 173
   3e6e8:	d2 40       	sbci	r29, 0x02	; 2
   3e6ea:	0f b6       	in	r0, 0x3f	; 63
   3e6ec:	f8 94       	cli
   3e6ee:	de bf       	out	0x3e, r29	; 62
   3e6f0:	0f be       	out	0x3f, r0	; 63
   3e6f2:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[BUFFER_SIZE];
	dataSource = 0;
   3e6f4:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <dataSource>
	SPIInit();
   3e6f8:	0f 94 e5 fc 	call	0x3f9ca	; 0x3f9ca <SPIInit>
	UartInit();
   3e6fc:	0f 94 f8 fc 	call	0x3f9f0	; 0x3f9f0 <UartInit>
	FlashInit();
	if (UartRead(0xFFFFFFFF, &dataSource, 1)){ //Bootloader Connects
   3e700:	ee de       	rcall	.-548    	; 0x3e4de <FlashInit>
   3e702:	21 e0       	ldi	r18, 0x01	; 1
   3e704:	30 e0       	ldi	r19, 0x00	; 0
   3e706:	40 e5       	ldi	r20, 0x50	; 80
   3e708:	55 e0       	ldi	r21, 0x05	; 5
   3e70a:	6f ef       	ldi	r22, 0xFF	; 255
   3e70c:	7f ef       	ldi	r23, 0xFF	; 255
   3e70e:	cb 01       	movw	r24, r22
   3e710:	0f 94 26 fd 	call	0x3fa4c	; 0x3fa4c <UartRead>
   3e714:	88 23       	and	r24, r24
		if (dataSource == 0xFF){
   3e716:	39 f0       	breq	.+14     	; 0x3e726 <BootLoader+0x68>
   3e718:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <dataSource>
   3e71c:	8f 3f       	cpi	r24, 0xFF	; 255
			dataSource = 'U';
   3e71e:	19 f4       	brne	.+6      	; 0x3e726 <BootLoader+0x68>
   3e720:	85 e5       	ldi	r24, 0x55	; 85
   3e722:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <dataSource>
		}
	}
	if (dataSource == 0){
   3e726:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <dataSource>
		if (SDInit()){
   3e72a:	81 11       	cpse	r24, r1
   3e72c:	06 c0       	rjmp	.+12     	; 0x3e73a <BootLoader+0x7c>
   3e72e:	97 d6       	rcall	.+3374   	; 0x3f45e <SDInit>
   3e730:	88 23       	and	r24, r24
			dataSource = 'M';
   3e732:	19 f0       	breq	.+6      	; 0x3e73a <BootLoader+0x7c>
   3e734:	8d e4       	ldi	r24, 0x4D	; 77
   3e736:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <dataSource>
		}
	}
	if (dataSource == 0){
   3e73a:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <dataSource>
   3e73e:	81 11       	cpse	r24, r1
		dataSource = 'F';
   3e740:	03 c0       	rjmp	.+6      	; 0x3e748 <BootLoader+0x8a>
   3e742:	86 e4       	ldi	r24, 0x46	; 70
   3e744:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <dataSource>
//		if (buffer[0] == 's' && buffer[1] == 'b'){
//			dataSource = 'F';
//		}
	}

	if (dataSource != 0){
   3e748:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <dataSource>
   3e74c:	88 23       	and	r24, r24
		do{
			uint8_t aes_iv[16];
			uint8_t aes_key[32] = {
   3e74e:	51 f1       	breq	.+84     	; 0x3e7a4 <BootLoader+0xe6>
   3e750:	80 e2       	ldi	r24, 0x20	; 32
   3e752:	e0 e0       	ldi	r30, 0x00	; 0
   3e754:	f2 e0       	ldi	r31, 0x02	; 2
   3e756:	de 01       	movw	r26, r28
   3e758:	a6 59       	subi	r26, 0x96	; 150
   3e75a:	bd 4f       	sbci	r27, 0xFD	; 253
   3e75c:	01 90       	ld	r0, Z+
   3e75e:	0d 92       	st	X+, r0
   3e760:	8a 95       	dec	r24
					0x9B, 0x58, 0x0F, 0x3E, 0x30, 0xAC, 0xFB, 0x0D,
					0xBF, 0x8F, 0x6C, 0x55, 0xDA, 0x79, 0xD6, 0x74,
					0x91, 0xCC, 0x2F, 0xF5, 0x7F, 0x56, 0xFE, 0x75
			};

			Read(fileIDAddress, buffer, fileIDSize);
   3e762:	e1 f7       	brne	.-8      	; 0x3e75c <BootLoader+0x9e>
   3e764:	7e 01       	movw	r14, r28
   3e766:	81 e0       	ldi	r24, 0x01	; 1
   3e768:	e8 0e       	add	r14, r24
   3e76a:	f8 1e       	adc	r15, r24
   3e76c:	20 e1       	ldi	r18, 0x10	; 16
   3e76e:	30 e0       	ldi	r19, 0x00	; 0
   3e770:	a7 01       	movw	r20, r14
   3e772:	60 e0       	ldi	r22, 0x00	; 0
   3e774:	70 e0       	ldi	r23, 0x00	; 0
   3e776:	cb 01       	movw	r24, r22
			if (buffer[0] != 's' || buffer[1] != 'b'){
   3e778:	55 df       	rcall	.-342    	; 0x3e624 <Read>
   3e77a:	f7 01       	movw	r30, r14
   3e77c:	90 81       	ld	r25, Z
   3e77e:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <dataSource>
   3e782:	93 37       	cpi	r25, 0x73	; 115
   3e784:	19 f4       	brne	.+6      	; 0x3e78c <BootLoader+0xce>
   3e786:	91 81       	ldd	r25, Z+1	; 0x01
   3e788:	92 36       	cpi	r25, 0x62	; 98
				if (dataSource == 'U')
   3e78a:	a1 f1       	breq	.+104    	; 0x3e7f4 <BootLoader+0x136>
   3e78c:	85 35       	cpi	r24, 0x55	; 85
					UartRead(0xFFFFFFFE, NULL, 0);			//Invalid file loaded
   3e78e:	51 f4       	brne	.+20     	; 0x3e7a4 <BootLoader+0xe6>
   3e790:	30 e0       	ldi	r19, 0x00	; 0
   3e792:	20 e0       	ldi	r18, 0x00	; 0
   3e794:	50 e0       	ldi	r21, 0x00	; 0
   3e796:	40 e0       	ldi	r20, 0x00	; 0
   3e798:	6e ef       	ldi	r22, 0xFE	; 254
   3e79a:	7f ef       	ldi	r23, 0xFF	; 255
   3e79c:	8f ef       	ldi	r24, 0xFF	; 255

			if (dataSource == 'U'){
				if (success)
					UartRead(0xFFFFFFF9, NULL, 0); //Installation Successful
				else
					UartRead(0xFFFFFFF8, NULL, 0); //Installation Failed
   3e79e:	9f ef       	ldi	r25, 0xFF	; 255
   3e7a0:	0f 94 26 fd 	call	0x3fa4c	; 0x3fa4c <UartRead>

		}while(0);
	}

	//erase the digital signature
	if (dataSource == 'F')
   3e7a4:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <dataSource>
   3e7a8:	86 34       	cpi	r24, 0x46	; 70
		FlashEraseBlock(flashOffset);
   3e7aa:	29 f4       	brne	.+10     	; 0x3e7b6 <BootLoader+0xf8>
   3e7ac:	60 e0       	ldi	r22, 0x00	; 0
   3e7ae:	70 e1       	ldi	r23, 0x10	; 16
   3e7b0:	80 e0       	ldi	r24, 0x00	; 0

	FlashDeInit();
   3e7b2:	90 e0       	ldi	r25, 0x00	; 0
   3e7b4:	e0 de       	rcall	.-576    	; 0x3e576 <FlashEraseBlock>
	SPIDeInit();
   3e7b6:	9e de       	rcall	.-708    	; 0x3e4f4 <FlashDeInit>
   3e7b8:	0f 94 ed fc 	call	0x3f9da	; 0x3f9da <SPIDeInit>
	UartDeInit();
   3e7bc:	0f 94 01 fd 	call	0x3fa02	; 0x3fa02 <UartDeInit>
}
   3e7c0:	c3 55       	subi	r28, 0x53	; 83
   3e7c2:	dd 4f       	sbci	r29, 0xFD	; 253
   3e7c4:	0f b6       	in	r0, 0x3f	; 63
   3e7c6:	f8 94       	cli
   3e7c8:	de bf       	out	0x3e, r29	; 62
   3e7ca:	0f be       	out	0x3f, r0	; 63
   3e7cc:	cd bf       	out	0x3d, r28	; 61
   3e7ce:	df 91       	pop	r29
   3e7d0:	cf 91       	pop	r28
   3e7d2:	1f 91       	pop	r17
   3e7d4:	0f 91       	pop	r16
   3e7d6:	ff 90       	pop	r15
   3e7d8:	ef 90       	pop	r14
   3e7da:	df 90       	pop	r13
   3e7dc:	cf 90       	pop	r12
   3e7de:	bf 90       	pop	r11
   3e7e0:	af 90       	pop	r10
   3e7e2:	9f 90       	pop	r9
   3e7e4:	8f 90       	pop	r8
   3e7e6:	7f 90       	pop	r7
   3e7e8:	6f 90       	pop	r6
   3e7ea:	5f 90       	pop	r5
   3e7ec:	4f 90       	pop	r4
   3e7ee:	3f 90       	pop	r3
   3e7f0:	2f 90       	pop	r2
			if (buffer[2] != MAJOR_VERSION_NUMBER[0] || buffer[3] != MAJOR_VERSION_NUMBER[1] || buffer[4] != MINOR_VERSION_NUMBER[0] || buffer[5] != MINOR_VERSION_NUMBER[1]){
   3e7f2:	08 95       	ret
   3e7f4:	92 81       	ldd	r25, Z+2	; 0x02
   3e7f6:	90 33       	cpi	r25, 0x30	; 48
   3e7f8:	49 f4       	brne	.+18     	; 0x3e80c <BootLoader+0x14e>
   3e7fa:	93 81       	ldd	r25, Z+3	; 0x03
   3e7fc:	91 33       	cpi	r25, 0x31	; 49
   3e7fe:	31 f4       	brne	.+12     	; 0x3e80c <BootLoader+0x14e>
   3e800:	94 81       	ldd	r25, Z+4	; 0x04
   3e802:	90 33       	cpi	r25, 0x30	; 48
   3e804:	19 f4       	brne	.+6      	; 0x3e80c <BootLoader+0x14e>
   3e806:	95 81       	ldd	r25, Z+5	; 0x05
   3e808:	90 33       	cpi	r25, 0x30	; 48
				if (dataSource == 'U')
   3e80a:	59 f0       	breq	.+22     	; 0x3e822 <BootLoader+0x164>
   3e80c:	85 35       	cpi	r24, 0x55	; 85
					UartRead(0xFFFFFFFD, NULL, 0);			//Invalid file version
   3e80e:	51 f6       	brne	.-108    	; 0x3e7a4 <BootLoader+0xe6>
   3e810:	30 e0       	ldi	r19, 0x00	; 0
   3e812:	20 e0       	ldi	r18, 0x00	; 0
   3e814:	50 e0       	ldi	r21, 0x00	; 0
   3e816:	40 e0       	ldi	r20, 0x00	; 0
   3e818:	6d ef       	ldi	r22, 0xFD	; 253
   3e81a:	7f ef       	ldi	r23, 0xFF	; 255
   3e81c:	8f ef       	ldi	r24, 0xFF	; 255
   3e81e:	9f ef       	ldi	r25, 0xFF	; 255
			if (dataSource == 'U')
   3e820:	bf cf       	rjmp	.-130    	; 0x3e7a0 <BootLoader+0xe2>
   3e822:	85 35       	cpi	r24, 0x55	; 85
				UartRead(0xFFFFFFFC, NULL, 0); //Validating firmware
   3e824:	51 f4       	brne	.+20     	; 0x3e83a <BootLoader+0x17c>
   3e826:	30 e0       	ldi	r19, 0x00	; 0
   3e828:	20 e0       	ldi	r18, 0x00	; 0
   3e82a:	50 e0       	ldi	r21, 0x00	; 0
   3e82c:	40 e0       	ldi	r20, 0x00	; 0
   3e82e:	6c ef       	ldi	r22, 0xFC	; 252
   3e830:	7f ef       	ldi	r23, 0xFF	; 255
   3e832:	8f ef       	ldi	r24, 0xFF	; 255
   3e834:	9f ef       	ldi	r25, 0xFF	; 255
   3e836:	0f 94 26 fd 	call	0x3fa4c	; 0x3fa4c <UartRead>
			Read(aesIvAddress, aes_iv, aesIVSize);
   3e83a:	20 e1       	ldi	r18, 0x10	; 16
   3e83c:	30 e0       	ldi	r19, 0x00	; 0
   3e83e:	ae 01       	movw	r20, r28
   3e840:	42 56       	subi	r20, 0x62	; 98
   3e842:	5d 4f       	sbci	r21, 0xFD	; 253
   3e844:	60 ef       	ldi	r22, 0xF0	; 240
   3e846:	70 e0       	ldi	r23, 0x00	; 0
   3e848:	80 e0       	ldi	r24, 0x00	; 0
			sha1_init(&sha1);
   3e84a:	90 e0       	ldi	r25, 0x00	; 0
   3e84c:	eb de       	rcall	.-554    	; 0x3e624 <Read>
   3e84e:	ce 01       	movw	r24, r28
   3e850:	8f 5f       	subi	r24, 0xFF	; 255
   3e852:	9d 4f       	sbci	r25, 0xFD	; 253
			sha1_update(&sha1, aes_key, sizeof(aes_key));
   3e854:	ca d7       	rcall	.+3988   	; 0x3f7ea <sha1_init>
   3e856:	40 e2       	ldi	r20, 0x20	; 32
   3e858:	50 e0       	ldi	r21, 0x00	; 0
   3e85a:	be 01       	movw	r22, r28
   3e85c:	66 59       	subi	r22, 0x96	; 150
   3e85e:	7d 4f       	sbci	r23, 0xFD	; 253
   3e860:	ce 01       	movw	r24, r28
   3e862:	8f 5f       	subi	r24, 0xFF	; 255
			sha1_update(&sha1, aes_iv, aesIVSize);
   3e864:	9d 4f       	sbci	r25, 0xFD	; 253
   3e866:	f0 d7       	rcall	.+4064   	; 0x3f848 <sha1_update>
   3e868:	40 e1       	ldi	r20, 0x10	; 16
   3e86a:	50 e0       	ldi	r21, 0x00	; 0
   3e86c:	be 01       	movw	r22, r28
   3e86e:	62 56       	subi	r22, 0x62	; 98
   3e870:	7d 4f       	sbci	r23, 0xFD	; 253
   3e872:	ce 01       	movw	r24, r28
   3e874:	8f 5f       	subi	r24, 0xFF	; 255
			for (uint32_t p = 0; p < firmwareSize; p+=BUFFER_SIZE){
   3e876:	9d 4f       	sbci	r25, 0xFD	; 253
   3e878:	e7 d7       	rcall	.+4046   	; 0x3f848 <sha1_update>
   3e87a:	81 2c       	mov	r8, r1
				PORTE ^= (1 << 2);
   3e87c:	91 2c       	mov	r9, r1
   3e87e:	54 01       	movw	r10, r8
   3e880:	14 e0       	ldi	r17, 0x04	; 4
   3e882:	8e b1       	in	r24, 0x0e	; 14
				if (Read(firmwareAddress+p, buffer, BUFFER_SIZE) == 0){
   3e884:	81 27       	eor	r24, r17
   3e886:	8e b9       	out	0x0e, r24	; 14
   3e888:	ff ef       	ldi	r31, 0xFF	; 255
   3e88a:	9f 1a       	sub	r9, r31
   3e88c:	af 0a       	sbc	r10, r31
   3e88e:	bf 0a       	sbc	r11, r31
   3e890:	20 e0       	ldi	r18, 0x00	; 0
   3e892:	31 e0       	ldi	r19, 0x01	; 1
   3e894:	a7 01       	movw	r20, r14
   3e896:	c5 01       	movw	r24, r10
   3e898:	b4 01       	movw	r22, r8
   3e89a:	c4 de       	rcall	.-632    	; 0x3e624 <Read>
			sha1_final(&sha1, hash);
   3e89c:	81 11       	cpse	r24, r1
   3e89e:	a8 c0       	rjmp	.+336    	; 0x3e9f0 <BootLoader+0x332>
   3e8a0:	be 01       	movw	r22, r28
   3e8a2:	66 57       	subi	r22, 0x76	; 118
   3e8a4:	7d 4f       	sbci	r23, 0xFD	; 253
   3e8a6:	ce 01       	movw	r24, r28
   3e8a8:	8f 5f       	subi	r24, 0xFF	; 255
			Read(signatureAddress, buffer, 20);
   3e8aa:	9d 4f       	sbci	r25, 0xFD	; 253
   3e8ac:	0f 94 67 fc 	call	0x3f8ce	; 0x3f8ce <sha1_final>
   3e8b0:	24 e1       	ldi	r18, 0x14	; 20
   3e8b2:	30 e0       	ldi	r19, 0x00	; 0
   3e8b4:	a7 01       	movw	r20, r14
   3e8b6:	60 e1       	ldi	r22, 0x10	; 16
   3e8b8:	70 e0       	ldi	r23, 0x00	; 0
			if (memcmp(buffer, hash, 20) != 0){
   3e8ba:	80 e0       	ldi	r24, 0x00	; 0
   3e8bc:	90 e0       	ldi	r25, 0x00	; 0
   3e8be:	b2 de       	rcall	.-668    	; 0x3e624 <Read>
   3e8c0:	44 e1       	ldi	r20, 0x14	; 20
   3e8c2:	50 e0       	ldi	r21, 0x00	; 0
   3e8c4:	be 01       	movw	r22, r28
   3e8c6:	66 57       	subi	r22, 0x76	; 118
   3e8c8:	7d 4f       	sbci	r23, 0xFD	; 253
   3e8ca:	c7 01       	movw	r24, r14
   3e8cc:	0f 94 2f fe 	call	0x3fc5e	; 0x3fc5e <memcmp>
   3e8d0:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <dataSource>
			if (dataSource == 'U')
   3e8d4:	89 2b       	or	r24, r25
   3e8d6:	09 f0       	breq	.+2      	; 0x3e8da <BootLoader+0x21c>
				UartRead(0xFFFFFFFA, NULL, 0);//Installing Firmware
   3e8d8:	9b c0       	rjmp	.+310    	; 0x3ea10 <BootLoader+0x352>
   3e8da:	25 35       	cpi	r18, 0x55	; 85
   3e8dc:	51 f4       	brne	.+20     	; 0x3e8f2 <BootLoader+0x234>
   3e8de:	30 e0       	ldi	r19, 0x00	; 0
   3e8e0:	20 e0       	ldi	r18, 0x00	; 0
   3e8e2:	50 e0       	ldi	r21, 0x00	; 0
   3e8e4:	40 e0       	ldi	r20, 0x00	; 0
   3e8e6:	6a ef       	ldi	r22, 0xFA	; 250
   3e8e8:	7f ef       	ldi	r23, 0xFF	; 255
   3e8ea:	8f ef       	ldi	r24, 0xFF	; 255
			for (uint32_t p = 0; p < firmwareSize; p+=BUFFER_SIZE){
   3e8ec:	9f ef       	ldi	r25, 0xFF	; 255
   3e8ee:	0f 94 26 fd 	call	0x3fa4c	; 0x3fa4c <UartRead>
   3e8f2:	81 2c       	mov	r8, r1
   3e8f4:	91 2c       	mov	r9, r1
					PORTE ^= (1 << 2);
   3e8f6:	54 01       	movw	r10, r8
   3e8f8:	d1 2c       	mov	r13, r1
   3e8fa:	c1 2c       	mov	r12, r1
   3e8fc:	8e b1       	in	r24, 0x0e	; 14
					if (Read(firmwareAddress+ptr, cipher, BUFFER_SIZE) == 0){
   3e8fe:	94 e0       	ldi	r25, 0x04	; 4
   3e900:	89 27       	eor	r24, r25
   3e902:	8e b9       	out	0x0e, r24	; 14
   3e904:	24 01       	movw	r4, r8
   3e906:	35 01       	movw	r6, r10
   3e908:	ef ef       	ldi	r30, 0xFF	; 255
   3e90a:	5e 1a       	sub	r5, r30
   3e90c:	6e 0a       	sbc	r6, r30
   3e90e:	7e 0a       	sbc	r7, r30
   3e910:	20 e0       	ldi	r18, 0x00	; 0
   3e912:	31 e0       	ldi	r19, 0x01	; 1
   3e914:	ae 01       	movw	r20, r28
   3e916:	4f 5f       	subi	r20, 0xFF	; 255
   3e918:	5f 4f       	sbci	r21, 0xFF	; 255
   3e91a:	c3 01       	movw	r24, r6
   3e91c:	b2 01       	movw	r22, r4
   3e91e:	82 de       	rcall	.-764    	; 0x3e624 <Read>
					AES_CBC_decrypt_buffer(buffer, cipher, BUFFER_SIZE, aes_key, aes_iv);
   3e920:	88 23       	and	r24, r24
   3e922:	09 f4       	brne	.+2      	; 0x3e926 <BootLoader+0x268>
   3e924:	55 c0       	rjmp	.+170    	; 0x3e9d0 <BootLoader+0x312>
   3e926:	8e 01       	movw	r16, r28
   3e928:	02 56       	subi	r16, 0x62	; 98
   3e92a:	1d 4f       	sbci	r17, 0xFD	; 253
   3e92c:	9e 01       	movw	r18, r28
   3e92e:	26 59       	subi	r18, 0x96	; 150
   3e930:	3d 4f       	sbci	r19, 0xFD	; 253
   3e932:	40 e0       	ldi	r20, 0x00	; 0
   3e934:	51 e0       	ldi	r21, 0x01	; 1
   3e936:	be 01       	movw	r22, r28
   3e938:	6f 5f       	subi	r22, 0xFF	; 255
					memcpy(aes_iv, &cipher[BUFFER_SIZE-16], 16);
   3e93a:	7f 4f       	sbci	r23, 0xFF	; 255
   3e93c:	c7 01       	movw	r24, r14
   3e93e:	7c dd       	rcall	.-1288   	; 0x3e438 <AES_CBC_decrypt_buffer>
   3e940:	80 e1       	ldi	r24, 0x10	; 16
   3e942:	fe 01       	movw	r30, r28
   3e944:	ef 50       	subi	r30, 0x0F	; 15
   3e946:	ff 4f       	sbci	r31, 0xFF	; 255
   3e948:	d8 01       	movw	r26, r16
   3e94a:	01 90       	ld	r0, Z+
   3e94c:	0d 92       	st	X+, r0
   3e94e:	8a 95       	dec	r24
   3e950:	e1 f7       	brne	.-8      	; 0x3e94a <BootLoader+0x28c>
   3e952:	9c ef       	ldi	r25, 0xFC	; 252
   3e954:	29 2e       	mov	r2, r25
   3e956:	31 2c       	mov	r3, r1
   3e958:	81 14       	cp	r8, r1
   3e95a:	ff ed       	ldi	r31, 0xDF	; 223
   3e95c:	9f 06       	cpc	r9, r31
   3e95e:	f3 e0       	ldi	r31, 0x03	; 3
   3e960:	af 06       	cpc	r10, r31
   3e962:	b1 04       	cpc	r11, r1
   3e964:	18 f4       	brcc	.+6      	; 0x3e96c <BootLoader+0x2ae>
					while(i < (isLast ? BUFFER_SIZE-4 : BUFFER_SIZE))
   3e966:	21 2c       	mov	r2, r1
   3e968:	33 24       	eor	r3, r3
   3e96a:	33 94       	inc	r3
   3e96c:	87 01       	movw	r16, r14
   3e96e:	c8 01       	movw	r24, r16
   3e970:	8e 19       	sub	r24, r14
   3e972:	9f 09       	sbc	r25, r15
   3e974:	82 15       	cp	r24, r2
					if (isLast){
   3e976:	93 05       	cpc	r25, r3
   3e978:	08 f4       	brcc	.+2      	; 0x3e97c <BootLoader+0x2be>
   3e97a:	56 c0       	rjmp	.+172    	; 0x3ea28 <BootLoader+0x36a>
   3e97c:	81 14       	cp	r8, r1
   3e97e:	ff ed       	ldi	r31, 0xDF	; 223
   3e980:	9f 06       	cpc	r9, r31
						crc = CRC(crc, buffer[BUFFER_SIZE-4]);
   3e982:	f3 e0       	ldi	r31, 0x03	; 3
   3e984:	af 06       	cpc	r10, r31
   3e986:	b1 04       	cpc	r11, r1
   3e988:	a1 f4       	brne	.+40     	; 0x3e9b2 <BootLoader+0x2f4>
   3e98a:	c3 50       	subi	r28, 0x03	; 3
   3e98c:	de 4f       	sbci	r29, 0xFE	; 254
   3e98e:	68 81       	ld	r22, Y
						crc = CRC(crc, buffer[BUFFER_SIZE-3]);
   3e990:	cd 5f       	subi	r28, 0xFD	; 253
   3e992:	d1 40       	sbci	r29, 0x01	; 1
   3e994:	c6 01       	movw	r24, r12
   3e996:	94 dd       	rcall	.-1240   	; 0x3e4c0 <CRC>
   3e998:	c2 50       	subi	r28, 0x02	; 2
   3e99a:	de 4f       	sbci	r29, 0xFE	; 254
   3e99c:	68 81       	ld	r22, Y
						*(uint16_t*)&buffer[BUFFER_SIZE-2] = crc;
   3e99e:	ce 5f       	subi	r28, 0xFE	; 254
   3e9a0:	d1 40       	sbci	r29, 0x01	; 1
   3e9a2:	8e dd       	rcall	.-1252   	; 0x3e4c0 <CRC>
   3e9a4:	6c 01       	movw	r12, r24
   3e9a6:	c1 50       	subi	r28, 0x01	; 1
   3e9a8:	de 4f       	sbci	r29, 0xFE	; 254
						boot_program_page(ptr+p, &buffer[p]);
   3e9aa:	99 83       	std	Y+1, r25	; 0x01
   3e9ac:	88 83       	st	Y, r24
   3e9ae:	cf 5f       	subi	r28, 0xFF	; 255
   3e9b0:	d1 40       	sbci	r29, 0x01	; 1
   3e9b2:	a7 01       	movw	r20, r14
   3e9b4:	c5 01       	movw	r24, r10
   3e9b6:	b4 01       	movw	r22, r8
			for (uint32_t ptr = 0; ptr < firmwareSize; ptr += BUFFER_SIZE)
   3e9b8:	48 de       	rcall	.-880    	; 0x3e64a <boot_program_page>
   3e9ba:	53 01       	movw	r10, r6
   3e9bc:	42 01       	movw	r8, r4
   3e9be:	81 14       	cp	r8, r1
   3e9c0:	80 ee       	ldi	r24, 0xE0	; 224
   3e9c2:	98 06       	cpc	r9, r24
   3e9c4:	83 e0       	ldi	r24, 0x03	; 3
   3e9c6:	a8 06       	cpc	r10, r24
			uint8_t success = 1;
   3e9c8:	b1 04       	cpc	r11, r1
			if (dataSource == 'U'){
   3e9ca:	09 f0       	breq	.+2      	; 0x3e9ce <BootLoader+0x310>
   3e9cc:	97 cf       	rjmp	.-210    	; 0x3e8fc <BootLoader+0x23e>
   3e9ce:	81 e0       	ldi	r24, 0x01	; 1
   3e9d0:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <dataSource>
					UartRead(0xFFFFFFF9, NULL, 0); //Installation Successful
   3e9d4:	95 35       	cpi	r25, 0x55	; 85
   3e9d6:	09 f0       	breq	.+2      	; 0x3e9da <BootLoader+0x31c>
   3e9d8:	e5 ce       	rjmp	.-566    	; 0x3e7a4 <BootLoader+0xe6>
				if (success)
   3e9da:	30 e0       	ldi	r19, 0x00	; 0
					UartRead(0xFFFFFFF9, NULL, 0); //Installation Successful
   3e9dc:	20 e0       	ldi	r18, 0x00	; 0
   3e9de:	50 e0       	ldi	r21, 0x00	; 0
   3e9e0:	40 e0       	ldi	r20, 0x00	; 0
   3e9e2:	88 23       	and	r24, r24
   3e9e4:	41 f1       	breq	.+80     	; 0x3ea36 <BootLoader+0x378>
				sha1_update(&sha1, buffer, BUFFER_SIZE);
   3e9e6:	69 ef       	ldi	r22, 0xF9	; 249
   3e9e8:	7f ef       	ldi	r23, 0xFF	; 255
   3e9ea:	8f ef       	ldi	r24, 0xFF	; 255
   3e9ec:	9f ef       	ldi	r25, 0xFF	; 255
   3e9ee:	d8 ce       	rjmp	.-592    	; 0x3e7a0 <BootLoader+0xe2>
   3e9f0:	40 e0       	ldi	r20, 0x00	; 0
   3e9f2:	51 e0       	ldi	r21, 0x01	; 1
   3e9f4:	b7 01       	movw	r22, r14
			for (uint32_t p = 0; p < firmwareSize; p+=BUFFER_SIZE){
   3e9f6:	ce 01       	movw	r24, r28
   3e9f8:	8f 5f       	subi	r24, 0xFF	; 255
   3e9fa:	9d 4f       	sbci	r25, 0xFD	; 253
   3e9fc:	25 d7       	rcall	.+3658   	; 0x3f848 <sha1_update>
   3e9fe:	81 14       	cp	r8, r1
   3ea00:	80 ee       	ldi	r24, 0xE0	; 224
   3ea02:	98 06       	cpc	r9, r24
   3ea04:	83 e0       	ldi	r24, 0x03	; 3
   3ea06:	a8 06       	cpc	r10, r24
				if (dataSource == 'U')
   3ea08:	b1 04       	cpc	r11, r1
   3ea0a:	09 f0       	breq	.+2      	; 0x3ea0e <BootLoader+0x350>
					UartRead(0xFFFFFFFB, NULL, 0); //Validation Failed
   3ea0c:	3a cf       	rjmp	.-396    	; 0x3e882 <BootLoader+0x1c4>
   3ea0e:	48 cf       	rjmp	.-368    	; 0x3e8a0 <BootLoader+0x1e2>
   3ea10:	25 35       	cpi	r18, 0x55	; 85
   3ea12:	09 f0       	breq	.+2      	; 0x3ea16 <BootLoader+0x358>
   3ea14:	c7 ce       	rjmp	.-626    	; 0x3e7a4 <BootLoader+0xe6>
   3ea16:	30 e0       	ldi	r19, 0x00	; 0
   3ea18:	20 e0       	ldi	r18, 0x00	; 0
   3ea1a:	50 e0       	ldi	r21, 0x00	; 0
   3ea1c:	40 e0       	ldi	r20, 0x00	; 0
						crc = CRC(crc, buffer[i++]);
   3ea1e:	6b ef       	ldi	r22, 0xFB	; 251
   3ea20:	7f ef       	ldi	r23, 0xFF	; 255
   3ea22:	8f ef       	ldi	r24, 0xFF	; 255
   3ea24:	9f ef       	ldi	r25, 0xFF	; 255
   3ea26:	bc ce       	rjmp	.-648    	; 0x3e7a0 <BootLoader+0xe2>
   3ea28:	f8 01       	movw	r30, r16
   3ea2a:	61 91       	ld	r22, Z+
   3ea2c:	8f 01       	movw	r16, r30
					UartRead(0xFFFFFFF8, NULL, 0); //Installation Failed
   3ea2e:	c6 01       	movw	r24, r12
   3ea30:	47 dd       	rcall	.-1394   	; 0x3e4c0 <CRC>
   3ea32:	6c 01       	movw	r12, r24
   3ea34:	9c cf       	rjmp	.-200    	; 0x3e96e <BootLoader+0x2b0>
   3ea36:	68 ef       	ldi	r22, 0xF8	; 248
   3ea38:	7f ef       	ldi	r23, 0xFF	; 255
   3ea3a:	8f ef       	ldi	r24, 0xFF	; 255
   3ea3c:	9f ef       	ldi	r25, 0xFF	; 255
   3ea3e:	b0 ce       	rjmp	.-672    	; 0x3e7a0 <BootLoader+0xe2>

0003ea40 <main>:


int main(void)
{
   3ea40:	cf 92       	push	r12
   3ea42:	df 92       	push	r13
   3ea44:	ef 92       	push	r14
   3ea46:	ff 92       	push	r15
	DDRE |= (1<<2);
   3ea48:	6a 9a       	sbi	0x0d, 2	; 13
	DDRG |= (1<<5);
   3ea4a:	9d 9a       	sbi	0x13, 5	; 19
	PORTG &= ~(1<<5);
   3ea4c:	a5 98       	cbi	0x14, 5	; 20
    MCUSR = 0;
   3ea4e:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   3ea50:	0f b6       	in	r0, 0x3f	; 63
   3ea52:	f8 94       	cli
   3ea54:	a8 95       	wdr
   3ea56:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   3ea5a:	88 61       	ori	r24, 0x18	; 24
   3ea5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   3ea60:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    wdt_disable();
	BootLoader();
   3ea64:	0f be       	out	0x3f, r0	; 63
		uint16_t p = 0x000000;
	#else
		uint32_t p = 0x000000;
	#endif

	uint16_t crc = 0;
   3ea66:	2b de       	rcall	.-938    	; 0x3e6be <BootLoader>
   3ea68:	90 e0       	ldi	r25, 0x00	; 0
		uint32_t p = 0x000000;
   3ea6a:	80 e0       	ldi	r24, 0x00	; 0
   3ea6c:	c1 2c       	mov	r12, r1
   3ea6e:	d1 2c       	mov	r13, r1
	do
	{
		#ifndef RAMPZ
			crc = CRC(crc, pgm_read_byte(p));
		#else
			crc = CRC(crc, pgm_read_byte_far(p));
   3ea70:	76 01       	movw	r14, r12
   3ea72:	eb be       	out	0x3b, r14	; 59
   3ea74:	f6 01       	movw	r30, r12
   3ea76:	67 91       	elpm	r22, Z+
		#endif
	}
	while (++p < firmwareSize);
   3ea78:	23 dd       	rcall	.-1466   	; 0x3e4c0 <CRC>
   3ea7a:	2f ef       	ldi	r18, 0xFF	; 255
   3ea7c:	c2 1a       	sub	r12, r18
   3ea7e:	d2 0a       	sbc	r13, r18
   3ea80:	e2 0a       	sbc	r14, r18
   3ea82:	f2 0a       	sbc	r15, r18
   3ea84:	c1 14       	cp	r12, r1
   3ea86:	30 ee       	ldi	r19, 0xE0	; 224
   3ea88:	d3 06       	cpc	r13, r19
   3ea8a:	33 e0       	ldi	r19, 0x03	; 3
   3ea8c:	e3 06       	cpc	r14, r19
   3ea8e:	f1 04       	cpc	r15, r1

	if (crc)
   3ea90:	81 f7       	brne	.-32     	; 0x3ea72 <main+0x32>
   3ea92:	89 2b       	or	r24, r25
	{
		for(;;)
		{
			PORTE ^= (1<<2);
   3ea94:	71 f0       	breq	.+28     	; 0x3eab2 <main+0x72>
   3ea96:	94 e0       	ldi	r25, 0x04	; 4
   3ea98:	8e b1       	in	r24, 0x0e	; 14
   3ea9a:	89 27       	eor	r24, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3ea9c:	8e b9       	out	0x0e, r24	; 14
   3ea9e:	8f ef       	ldi	r24, 0xFF	; 255
   3eaa0:	23 ed       	ldi	r18, 0xD3	; 211
   3eaa2:	30 e3       	ldi	r19, 0x30	; 48
   3eaa4:	81 50       	subi	r24, 0x01	; 1
   3eaa6:	20 40       	sbci	r18, 0x00	; 0
   3eaa8:	30 40       	sbci	r19, 0x00	; 0
   3eaaa:	e1 f7       	brne	.-8      	; 0x3eaa4 <main+0x64>
   3eaac:	00 c0       	rjmp	.+0      	; 0x3eaae <main+0x6e>
   3eaae:	00 00       	nop
			_delay_ms(1000);
		}
	}
    asm volatile ("jmp 0");
   3eab0:	f3 cf       	rjmp	.-26     	; 0x3ea98 <main+0x58>
   3eab2:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
}
   3eab6:	90 e0       	ldi	r25, 0x00	; 0
   3eab8:	80 e0       	ldi	r24, 0x00	; 0
   3eaba:	ff 90       	pop	r15
   3eabc:	ef 90       	pop	r14
   3eabe:	df 90       	pop	r13
   3eac0:	cf 90       	pop	r12
   3eac2:	08 95       	ret

0003eac4 <send_cmd>:
static
BYTE send_cmd (
    BYTE cmd,		/* 1st byte (Start + Index) */
    DWORD arg		/* Argument (32 bits) */
)
{
   3eac4:	ff 92       	push	r15
   3eac6:	0f 93       	push	r16
   3eac8:	1f 93       	push	r17
   3eaca:	cf 93       	push	r28
   3eacc:	df 93       	push	r29
   3eace:	c8 2f       	mov	r28, r24
   3ead0:	d4 2f       	mov	r29, r20
   3ead2:	15 2f       	mov	r17, r21
   3ead4:	06 2f       	mov	r16, r22
   3ead6:	f7 2e       	mov	r15, r23
    BYTE n, res;


    if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
   3ead8:	87 ff       	sbrs	r24, 7
   3eada:	08 c0       	rjmp	.+16     	; 0x3eaec <send_cmd+0x28>
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
   3eadc:	40 e0       	ldi	r20, 0x00	; 0
   3eade:	50 e0       	ldi	r21, 0x00	; 0
   3eae0:	ba 01       	movw	r22, r20
   3eae2:	87 e7       	ldi	r24, 0x77	; 119
   3eae4:	ef df       	rcall	.-34     	; 0x3eac4 <send_cmd>
        if (res > 1) return res;
   3eae6:	82 30       	cpi	r24, 0x02	; 2
   3eae8:	f8 f4       	brcc	.+62     	; 0x3eb28 <send_cmd+0x64>
        cmd &= 0x7F;
   3eaea:	cf 77       	andi	r28, 0x7F	; 127
    }

    /* Select the card */
    select();
   3eaec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
   3eaf0:	8f 77       	andi	r24, 0x7F	; 127
   3eaf2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

    /* Send a command packet */
    SPIXfer(cmd);						/* Start + Command index */
    SPIXfer((BYTE)(arg >> 24));		/* Argument[31..24] */
   3eaf6:	8c 2f       	mov	r24, r28
    SPIXfer((BYTE)(arg >> 16));		/* Argument[23..16] */
   3eaf8:	75 d7       	rcall	.+3818   	; 0x3f9e4 <SPIXfer>
    SPIXfer((BYTE)(arg >> 8));			/* Argument[15..8] */
   3eafa:	8f 2d       	mov	r24, r15
   3eafc:	73 d7       	rcall	.+3814   	; 0x3f9e4 <SPIXfer>
   3eafe:	80 2f       	mov	r24, r16
    SPIXfer((BYTE)arg);				/* Argument[7..0] */
   3eb00:	71 d7       	rcall	.+3810   	; 0x3f9e4 <SPIXfer>
   3eb02:	81 2f       	mov	r24, r17
   3eb04:	6f d7       	rcall	.+3806   	; 0x3f9e4 <SPIXfer>
    n = 0x01;							/* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
   3eb06:	8d 2f       	mov	r24, r29
   3eb08:	6d d7       	rcall	.+3802   	; 0x3f9e4 <SPIXfer>
    if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
   3eb0a:	85 e9       	ldi	r24, 0x95	; 149
   3eb0c:	c0 34       	cpi	r28, 0x40	; 64
    n = 0x01;							/* Dummy CRC + Stop */
   3eb0e:	21 f0       	breq	.+8      	; 0x3eb18 <send_cmd+0x54>
    SPIXfer(n);
   3eb10:	87 e8       	ldi	r24, 0x87	; 135
   3eb12:	c8 34       	cpi	r28, 0x48	; 72
   3eb14:	09 f0       	breq	.+2      	; 0x3eb18 <send_cmd+0x54>

    /* Receive a command response */
    n = 10;								/* Wait for a valid response in timeout of 10 attempts */
    do {
        res = SPIXfer(0xFF);
   3eb16:	81 e0       	ldi	r24, 0x01	; 1
   3eb18:	65 d7       	rcall	.+3786   	; 0x3f9e4 <SPIXfer>
   3eb1a:	ca e0       	ldi	r28, 0x0A	; 10
    } while ((res & 0x80) && --n);
   3eb1c:	8f ef       	ldi	r24, 0xFF	; 255
   3eb1e:	62 d7       	rcall	.+3780   	; 0x3f9e4 <SPIXfer>
   3eb20:	87 ff       	sbrs	r24, 7
   3eb22:	02 c0       	rjmp	.+4      	; 0x3eb28 <send_cmd+0x64>

    return res;			/* Return with the response value */
}
   3eb24:	c1 50       	subi	r28, 0x01	; 1
   3eb26:	d1 f7       	brne	.-12     	; 0x3eb1c <send_cmd+0x58>
   3eb28:	df 91       	pop	r29
   3eb2a:	cf 91       	pop	r28
   3eb2c:	1f 91       	pop	r17
   3eb2e:	0f 91       	pop	r16
   3eb30:	ff 90       	pop	r15
   3eb32:	08 95       	ret

0003eb34 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
   3eb34:	cf 92       	push	r12
   3eb36:	df 92       	push	r13
   3eb38:	ef 92       	push	r14
   3eb3a:	ff 92       	push	r15
   3eb3c:	0f 93       	push	r16
   3eb3e:	1f 93       	push	r17
   3eb40:	cf 93       	push	r28
   3eb42:	df 93       	push	r29
   3eb44:	00 d0       	rcall	.+0      	; 0x3eb46 <disk_initialize+0x12>
   3eb46:	1f 92       	push	r1
   3eb48:	cd b7       	in	r28, 0x3d	; 61
    BYTE n, cmd, ty, ocr[4];
    UINT tmr;


    SPIInit();							/* Initialize ports to control MMC */
   3eb4a:	de b7       	in	r29, 0x3e	; 62
	DDRJ |= (1<<7);
   3eb4c:	3e d7       	rcall	.+3708   	; 0x3f9ca <SPIInit>
   3eb4e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
   3eb52:	80 68       	ori	r24, 0x80	; 128
   3eb54:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3eb58:	84 e6       	ldi	r24, 0x64	; 100
   3eb5a:	ef e8       	ldi	r30, 0x8F	; 143
   3eb5c:	f1 e0       	ldi	r31, 0x01	; 1
   3eb5e:	31 97       	sbiw	r30, 0x01	; 1
   3eb60:	f1 f7       	brne	.-4      	; 0x3eb5e <disk_initialize+0x2a>
   3eb62:	00 c0       	rjmp	.+0      	; 0x3eb64 <disk_initialize+0x30>
   3eb64:	00 00       	nop
    for (n = 100; n; n--) dly_100us();	/* 10ms delay */
   3eb66:	81 50       	subi	r24, 0x01	; 1
   3eb68:	c1 f7       	brne	.-16     	; 0x3eb5a <disk_initialize+0x26>
    for (n = 10; n; n--)
    	deselect();	/* 80 Dummy clocks with CS=H */
   3eb6a:	1a e0       	ldi	r17, 0x0A	; 10
   3eb6c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
   3eb70:	80 68       	ori	r24, 0x80	; 128
   3eb72:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
   3eb76:	8f ef       	ldi	r24, 0xFF	; 255
   3eb78:	35 d7       	rcall	.+3690   	; 0x3f9e4 <SPIXfer>
    for (n = 10; n; n--)
   3eb7a:	11 50       	subi	r17, 0x01	; 1

    ty = 0;
    if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
   3eb7c:	b9 f7       	brne	.-18     	; 0x3eb6c <disk_initialize+0x38>
   3eb7e:	40 e0       	ldi	r20, 0x00	; 0
   3eb80:	50 e0       	ldi	r21, 0x00	; 0
   3eb82:	ba 01       	movw	r22, r20
   3eb84:	80 e4       	ldi	r24, 0x40	; 64
   3eb86:	9e df       	rcall	.-196    	; 0x3eac4 <send_cmd>
   3eb88:	18 2f       	mov	r17, r24
   3eb8a:	81 30       	cpi	r24, 0x01	; 1
   3eb8c:	09 f0       	breq	.+2      	; 0x3eb90 <disk_initialize+0x5c>
        if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
   3eb8e:	4a c0       	rjmp	.+148    	; 0x3ec24 <disk_initialize+0xf0>
   3eb90:	4a ea       	ldi	r20, 0xAA	; 170
   3eb92:	51 e0       	ldi	r21, 0x01	; 1
   3eb94:	60 e0       	ldi	r22, 0x00	; 0
   3eb96:	70 e0       	ldi	r23, 0x00	; 0
   3eb98:	88 e4       	ldi	r24, 0x48	; 72
   3eb9a:	94 df       	rcall	.-216    	; 0x3eac4 <send_cmd>
   3eb9c:	81 30       	cpi	r24, 0x01	; 1
   3eb9e:	09 f0       	breq	.+2      	; 0x3eba2 <disk_initialize+0x6e>
   3eba0:	5b c0       	rjmp	.+182    	; 0x3ec58 <disk_initialize+0x124>
   3eba2:	ce 01       	movw	r24, r28
   3eba4:	01 96       	adiw	r24, 0x01	; 1
   3eba6:	7c 01       	movw	r14, r24
   3eba8:	6e 01       	movw	r12, r28
   3ebaa:	95 e0       	ldi	r25, 0x05	; 5
   3ebac:	c9 0e       	add	r12, r25
            for (n = 0; n < 4; n++) ocr[n] = SPIXfer(0xFF);		/* Get trailing return value of R7 resp */
   3ebae:	d1 1c       	adc	r13, r1
   3ebb0:	87 01       	movw	r16, r14
   3ebb2:	8f ef       	ldi	r24, 0xFF	; 255
   3ebb4:	17 d7       	rcall	.+3630   	; 0x3f9e4 <SPIXfer>
   3ebb6:	f8 01       	movw	r30, r16
   3ebb8:	81 93       	st	Z+, r24
   3ebba:	8f 01       	movw	r16, r30
   3ebbc:	ce 16       	cp	r12, r30
   3ebbe:	df 06       	cpc	r13, r31
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
   3ebc0:	c1 f7       	brne	.-16     	; 0x3ebb2 <disk_initialize+0x7e>
   3ebc2:	8b 81       	ldd	r24, Y+3	; 0x03
   3ebc4:	81 30       	cpi	r24, 0x01	; 1
   3ebc6:	71 f5       	brne	.+92     	; 0x3ec24 <disk_initialize+0xf0>
   3ebc8:	8c 81       	ldd	r24, Y+4	; 0x04
   3ebca:	8a 3a       	cpi	r24, 0xAA	; 170
   3ebcc:	59 f5       	brne	.+86     	; 0x3ec24 <disk_initialize+0xf0>
   3ebce:	90 e1       	ldi	r25, 0x10	; 16
   3ebd0:	c9 2e       	mov	r12, r25
                for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
   3ebd2:	97 e2       	ldi	r25, 0x27	; 39
   3ebd4:	d9 2e       	mov	r13, r25
   3ebd6:	40 e0       	ldi	r20, 0x00	; 0
   3ebd8:	50 e0       	ldi	r21, 0x00	; 0
   3ebda:	60 e0       	ldi	r22, 0x00	; 0
   3ebdc:	70 e4       	ldi	r23, 0x40	; 64
   3ebde:	89 ee       	ldi	r24, 0xE9	; 233
                if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
   3ebe0:	71 df       	rcall	.-286    	; 0x3eac4 <send_cmd>
   3ebe2:	81 11       	cpse	r24, r1
   3ebe4:	15 c0       	rjmp	.+42     	; 0x3ec10 <disk_initialize+0xdc>
   3ebe6:	40 e0       	ldi	r20, 0x00	; 0
   3ebe8:	50 e0       	ldi	r21, 0x00	; 0
   3ebea:	ba 01       	movw	r22, r20
   3ebec:	8a e7       	ldi	r24, 0x7A	; 122
                    for (n = 0; n < 4; n++) ocr[n] = SPIXfer(0xFF);
   3ebee:	6a df       	rcall	.-300    	; 0x3eac4 <send_cmd>
   3ebf0:	81 11       	cpse	r24, r1
   3ebf2:	18 c0       	rjmp	.+48     	; 0x3ec24 <disk_initialize+0xf0>
   3ebf4:	8f ef       	ldi	r24, 0xFF	; 255
   3ebf6:	f6 d6       	rcall	.+3564   	; 0x3f9e4 <SPIXfer>
   3ebf8:	f7 01       	movw	r30, r14
   3ebfa:	81 93       	st	Z+, r24
   3ebfc:	7f 01       	movw	r14, r30
   3ebfe:	0e 17       	cp	r16, r30
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
   3ec00:	1f 07       	cpc	r17, r31
   3ec02:	c1 f7       	brne	.-16     	; 0x3ebf4 <disk_initialize+0xc0>
   3ec04:	89 81       	ldd	r24, Y+1	; 0x01
   3ec06:	14 e0       	ldi	r17, 0x04	; 4
   3ec08:	86 ff       	sbrs	r24, 6
   3ec0a:	0d c0       	rjmp	.+26     	; 0x3ec26 <disk_initialize+0xf2>
   3ec0c:	1c e0       	ldi	r17, 0x0C	; 12
   3ec0e:	0b c0       	rjmp	.+22     	; 0x3ec26 <disk_initialize+0xf2>
   3ec10:	8f e8       	ldi	r24, 0x8F	; 143
   3ec12:	91 e0       	ldi	r25, 0x01	; 1
   3ec14:	01 97       	sbiw	r24, 0x01	; 1
   3ec16:	f1 f7       	brne	.-4      	; 0x3ec14 <disk_initialize+0xe0>
   3ec18:	00 c0       	rjmp	.+0      	; 0x3ec1a <disk_initialize+0xe6>
   3ec1a:	00 00       	nop
   3ec1c:	91 e0       	ldi	r25, 0x01	; 1
                for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
   3ec1e:	c9 1a       	sub	r12, r25
            for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
            if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
                ty = 0;
        }
    }
    CardType = ty;
   3ec20:	d1 08       	sbc	r13, r1
    deselect();
   3ec22:	c9 f6       	brne	.-78     	; 0x3ebd6 <disk_initialize+0xa2>
   3ec24:	10 e0       	ldi	r17, 0x00	; 0
   3ec26:	10 93 51 05 	sts	0x0551, r17	; 0x800551 <CardType>
   3ec2a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
   3ec2e:	80 68       	ori	r24, 0x80	; 128
   3ec30:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

    return ty ? 0 : STA_NOINIT;
   3ec34:	8f ef       	ldi	r24, 0xFF	; 255
   3ec36:	d6 d6       	rcall	.+3500   	; 0x3f9e4 <SPIXfer>
}
   3ec38:	81 e0       	ldi	r24, 0x01	; 1
   3ec3a:	11 11       	cpse	r17, r1
   3ec3c:	80 e0       	ldi	r24, 0x00	; 0
   3ec3e:	0f 90       	pop	r0
   3ec40:	0f 90       	pop	r0
   3ec42:	0f 90       	pop	r0
   3ec44:	0f 90       	pop	r0
   3ec46:	df 91       	pop	r29
   3ec48:	cf 91       	pop	r28
   3ec4a:	1f 91       	pop	r17
   3ec4c:	0f 91       	pop	r16
   3ec4e:	ff 90       	pop	r15
            if (send_cmd(ACMD41, 0) <= 1) 	{
   3ec50:	ef 90       	pop	r14
   3ec52:	df 90       	pop	r13
   3ec54:	cf 90       	pop	r12
   3ec56:	08 95       	ret
   3ec58:	40 e0       	ldi	r20, 0x00	; 0
   3ec5a:	50 e0       	ldi	r21, 0x00	; 0
                ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
   3ec5c:	ba 01       	movw	r22, r20
            if (send_cmd(ACMD41, 0) <= 1) 	{
   3ec5e:	89 ee       	ldi	r24, 0xE9	; 233
                ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
   3ec60:	31 df       	rcall	.-414    	; 0x3eac4 <send_cmd>
                ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
   3ec62:	01 e4       	ldi	r16, 0x41	; 65
   3ec64:	82 30       	cpi	r24, 0x02	; 2
   3ec66:	10 f4       	brcc	.+4      	; 0x3ec6c <disk_initialize+0x138>
   3ec68:	12 e0       	ldi	r17, 0x02	; 2
            for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
   3ec6a:	09 ee       	ldi	r16, 0xE9	; 233
   3ec6c:	80 e1       	ldi	r24, 0x10	; 16
   3ec6e:	e8 2e       	mov	r14, r24
   3ec70:	87 e2       	ldi	r24, 0x27	; 39
   3ec72:	f8 2e       	mov	r15, r24
   3ec74:	40 e0       	ldi	r20, 0x00	; 0
   3ec76:	50 e0       	ldi	r21, 0x00	; 0
            if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
   3ec78:	ba 01       	movw	r22, r20
   3ec7a:	80 2f       	mov	r24, r16
   3ec7c:	23 df       	rcall	.-442    	; 0x3eac4 <send_cmd>
   3ec7e:	81 11       	cpse	r24, r1
   3ec80:	09 c0       	rjmp	.+18     	; 0x3ec94 <disk_initialize+0x160>
   3ec82:	40 e0       	ldi	r20, 0x00	; 0
   3ec84:	52 e0       	ldi	r21, 0x02	; 2
   3ec86:	60 e0       	ldi	r22, 0x00	; 0
   3ec88:	70 e0       	ldi	r23, 0x00	; 0
   3ec8a:	80 e5       	ldi	r24, 0x50	; 80
   3ec8c:	1b df       	rcall	.-458    	; 0x3eac4 <send_cmd>
   3ec8e:	81 11       	cpse	r24, r1
   3ec90:	c9 cf       	rjmp	.-110    	; 0x3ec24 <disk_initialize+0xf0>
   3ec92:	c9 cf       	rjmp	.-110    	; 0x3ec26 <disk_initialize+0xf2>
   3ec94:	8f e8       	ldi	r24, 0x8F	; 143
   3ec96:	91 e0       	ldi	r25, 0x01	; 1
   3ec98:	01 97       	sbiw	r24, 0x01	; 1
   3ec9a:	f1 f7       	brne	.-4      	; 0x3ec98 <disk_initialize+0x164>
   3ec9c:	00 c0       	rjmp	.+0      	; 0x3ec9e <disk_initialize+0x16a>
            for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
   3ec9e:	00 00       	nop
   3eca0:	91 e0       	ldi	r25, 0x01	; 1
   3eca2:	e9 1a       	sub	r14, r25
   3eca4:	f1 08       	sbc	r15, r1
   3eca6:	31 f7       	brne	.-52     	; 0x3ec74 <disk_initialize+0x140>
   3eca8:	bd cf       	rjmp	.-134    	; 0x3ec24 <disk_initialize+0xf0>

0003ecaa <disk_readp>:
    BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
    DWORD lba,		/* Sector number (LBA) */
    UINT ofs,		/* Byte offset to read from (0..511) */
    UINT cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
   3ecaa:	cf 92       	push	r12
   3ecac:	df 92       	push	r13
   3ecae:	ef 92       	push	r14
   3ecb0:	ff 92       	push	r15
   3ecb2:	0f 93       	push	r16
   3ecb4:	1f 93       	push	r17
   3ecb6:	cf 93       	push	r28
   3ecb8:	df 93       	push	r29
   3ecba:	6c 01       	movw	r12, r24
   3ecbc:	79 01       	movw	r14, r18
    DRESULT res;
    BYTE rc;
    WORD bc;


    if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
   3ecbe:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <CardType>
   3ecc2:	83 fd       	sbrc	r24, 3
   3ecc4:	07 c0       	rjmp	.+14     	; 0x3ecd4 <disk_readp+0x2a>
   3ecc6:	89 e0       	ldi	r24, 0x09	; 9
   3ecc8:	44 0f       	add	r20, r20
   3ecca:	55 1f       	adc	r21, r21
   3eccc:	66 1f       	adc	r22, r22
   3ecce:	77 1f       	adc	r23, r23
   3ecd0:	8a 95       	dec	r24
   3ecd2:	d1 f7       	brne	.-12     	; 0x3ecc8 <disk_readp+0x1e>

    res = RES_ERROR;
    if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
   3ecd4:	81 e5       	ldi	r24, 0x51	; 81
   3ecd6:	f6 de       	rcall	.-532    	; 0x3eac4 <send_cmd>
   3ecd8:	81 11       	cpse	r24, r1
   3ecda:	08 c0       	rjmp	.+16     	; 0x3ecec <disk_readp+0x42>
   3ecdc:	c0 e4       	ldi	r28, 0x40	; 64

        bc = 40000;
        do {							/* Wait for data packet */
            rc = SPIXfer(0xFF);
   3ecde:	dc e9       	ldi	r29, 0x9C	; 156
   3ece0:	8f ef       	ldi	r24, 0xFF	; 255
        } while (rc == 0xFF && --bc);
   3ece2:	80 d6       	rcall	.+3328   	; 0x3f9e4 <SPIXfer>
   3ece4:	8f 3f       	cpi	r24, 0xFF	; 255
   3ece6:	21 f4       	brne	.+8      	; 0x3ecf0 <disk_readp+0x46>
   3ece8:	21 97       	sbiw	r28, 0x01	; 1
    res = RES_ERROR;
   3ecea:	d1 f7       	brne	.-12     	; 0x3ece0 <disk_readp+0x36>
   3ecec:	c1 e0       	ldi	r28, 0x01	; 1

        if (rc == 0xFE) {				/* A data packet arrived */
   3ecee:	21 c0       	rjmp	.+66     	; 0x3ed32 <disk_readp+0x88>
   3ecf0:	8e 3f       	cpi	r24, 0xFE	; 254
            bc = 514 - ofs - cnt;
   3ecf2:	e1 f7       	brne	.-8      	; 0x3ecec <disk_readp+0x42>
   3ecf4:	c2 e0       	ldi	r28, 0x02	; 2
   3ecf6:	d2 e0       	ldi	r29, 0x02	; 2
   3ecf8:	c0 1b       	sub	r28, r16
   3ecfa:	d1 0b       	sbc	r29, r17
   3ecfc:	ce 19       	sub	r28, r14

            /* Skip leading bytes */
            if (ofs) {
   3ecfe:	df 09       	sbc	r29, r15
   3ed00:	e1 14       	cp	r14, r1
                do SPIXfer(0xFF); while (--ofs);
   3ed02:	f1 04       	cpc	r15, r1
   3ed04:	31 f0       	breq	.+12     	; 0x3ed12 <disk_readp+0x68>
   3ed06:	8f ef       	ldi	r24, 0xFF	; 255
   3ed08:	6d d6       	rcall	.+3290   	; 0x3f9e4 <SPIXfer>
   3ed0a:	81 e0       	ldi	r24, 0x01	; 1
   3ed0c:	e8 1a       	sub	r14, r24
   3ed0e:	f1 08       	sbc	r15, r1
   3ed10:	f7 cf       	rjmp	.-18     	; 0x3ed00 <disk_readp+0x56>
   3ed12:	76 01       	movw	r14, r12
            }

            /* Receive a part of the sector */
            do {
                *buff++ = SPIXfer(0xFF);
   3ed14:	0c 0d       	add	r16, r12
   3ed16:	1d 1d       	adc	r17, r13
   3ed18:	8f ef       	ldi	r24, 0xFF	; 255
   3ed1a:	64 d6       	rcall	.+3272   	; 0x3f9e4 <SPIXfer>
   3ed1c:	f7 01       	movw	r30, r14
            } while (--cnt);
   3ed1e:	81 93       	st	Z+, r24
   3ed20:	7f 01       	movw	r14, r30

            /* Skip trailing bytes and CRC */
            do SPIXfer(0xFF); while (--bc);
   3ed22:	0e 17       	cp	r16, r30
   3ed24:	1f 07       	cpc	r17, r31
   3ed26:	c1 f7       	brne	.-16     	; 0x3ed18 <disk_readp+0x6e>
   3ed28:	8f ef       	ldi	r24, 0xFF	; 255
   3ed2a:	5c d6       	rcall	.+3256   	; 0x3f9e4 <SPIXfer>

            res = RES_OK;
   3ed2c:	21 97       	sbiw	r28, 0x01	; 1
        }
    }

    deselect();
   3ed2e:	e1 f7       	brne	.-8      	; 0x3ed28 <disk_readp+0x7e>
   3ed30:	c0 e0       	ldi	r28, 0x00	; 0
   3ed32:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
   3ed36:	80 68       	ori	r24, 0x80	; 128
   3ed38:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

    return res;
}
   3ed3c:	8f ef       	ldi	r24, 0xFF	; 255
   3ed3e:	52 d6       	rcall	.+3236   	; 0x3f9e4 <SPIXfer>
   3ed40:	8c 2f       	mov	r24, r28
   3ed42:	df 91       	pop	r29
   3ed44:	cf 91       	pop	r28
   3ed46:	1f 91       	pop	r17
   3ed48:	0f 91       	pop	r16
   3ed4a:	ff 90       	pop	r15
   3ed4c:	ef 90       	pop	r14
   3ed4e:	df 90       	pop	r13
   3ed50:	cf 90       	pop	r12
   3ed52:	08 95       	ret

0003ed54 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
   3ed54:	0f 93       	push	r16
   3ed56:	1f 93       	push	r17
	FATFS *fs = FatFs;
   3ed58:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <FatFs>
   3ed5c:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <FatFs+0x1>


	clst -= 2;
   3ed60:	dc 01       	movw	r26, r24
   3ed62:	12 97       	sbiw	r26, 0x02	; 2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   3ed64:	26 81       	ldd	r18, Z+6	; 0x06
   3ed66:	37 81       	ldd	r19, Z+7	; 0x07
   3ed68:	22 50       	subi	r18, 0x02	; 2
   3ed6a:	31 09       	sbc	r19, r1
   3ed6c:	60 e0       	ldi	r22, 0x00	; 0
   3ed6e:	70 e0       	ldi	r23, 0x00	; 0
   3ed70:	cb 01       	movw	r24, r22
   3ed72:	a2 17       	cp	r26, r18
   3ed74:	b3 07       	cpc	r27, r19
   3ed76:	58 f4       	brcc	.+22     	; 0x3ed8e <clust2sect+0x3a>
	return (DWORD)clst * fs->csize + fs->database;
   3ed78:	22 81       	ldd	r18, Z+2	; 0x02
   3ed7a:	30 e0       	ldi	r19, 0x00	; 0
   3ed7c:	57 d7       	rcall	.+3758   	; 0x3fc2c <__umulhisi3>
   3ed7e:	00 89       	ldd	r16, Z+16	; 0x10
   3ed80:	11 89       	ldd	r17, Z+17	; 0x11
   3ed82:	22 89       	ldd	r18, Z+18	; 0x12
   3ed84:	33 89       	ldd	r19, Z+19	; 0x13
   3ed86:	60 0f       	add	r22, r16
   3ed88:	71 1f       	adc	r23, r17
   3ed8a:	82 1f       	adc	r24, r18
   3ed8c:	93 1f       	adc	r25, r19
}
   3ed8e:	1f 91       	pop	r17
   3ed90:	0f 91       	pop	r16
   3ed92:	08 95       	ret

0003ed94 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
   3ed94:	cf 93       	push	r28
   3ed96:	df 93       	push	r29
   3ed98:	ec 01       	movw	r28, r24
	CLUST clst;
	FATFS *fs = FatFs;
   3ed9a:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <FatFs>
   3ed9e:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <FatFs+0x1>


	dj->index = 0;
   3eda2:	19 82       	std	Y+1, r1	; 0x01
   3eda4:	18 82       	st	Y, r1
	clst = dj->sclust;
   3eda6:	8c 81       	ldd	r24, Y+4	; 0x04
   3eda8:	9d 81       	ldd	r25, Y+5	; 0x05
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
   3edaa:	81 30       	cpi	r24, 0x01	; 1
   3edac:	91 05       	cpc	r25, r1
   3edae:	b9 f0       	breq	.+46     	; 0x3edde <dir_rewind+0x4a>
   3edb0:	26 81       	ldd	r18, Z+6	; 0x06
   3edb2:	37 81       	ldd	r19, Z+7	; 0x07
   3edb4:	82 17       	cp	r24, r18
   3edb6:	93 07       	cpc	r25, r19
   3edb8:	90 f4       	brcc	.+36     	; 0x3edde <dir_rewind+0x4a>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32))	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
   3edba:	9f 83       	std	Y+7, r25	; 0x07
   3edbc:	8e 83       	std	Y+6, r24	; 0x06
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
   3edbe:	00 97       	sbiw	r24, 0x00	; 0
   3edc0:	49 f0       	breq	.+18     	; 0x3edd4 <dir_rewind+0x40>
   3edc2:	c8 df       	rcall	.-112    	; 0x3ed54 <clust2sect>
   3edc4:	68 87       	std	Y+8, r22	; 0x08
   3edc6:	79 87       	std	Y+9, r23	; 0x09
   3edc8:	8a 87       	std	Y+10, r24	; 0x0a

	return FR_OK;	/* Seek succeeded */
   3edca:	9b 87       	std	Y+11, r25	; 0x0b
}
   3edcc:	80 e0       	ldi	r24, 0x00	; 0
   3edce:	df 91       	pop	r29
   3edd0:	cf 91       	pop	r28
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
   3edd2:	08 95       	ret
   3edd4:	64 85       	ldd	r22, Z+12	; 0x0c
   3edd6:	75 85       	ldd	r23, Z+13	; 0x0d
   3edd8:	86 85       	ldd	r24, Z+14	; 0x0e
   3edda:	97 85       	ldd	r25, Z+15	; 0x0f
		return FR_DISK_ERR;
   3eddc:	f3 cf       	rjmp	.-26     	; 0x3edc4 <dir_rewind+0x30>
   3edde:	81 e0       	ldi	r24, 0x01	; 1
   3ede0:	f6 cf       	rjmp	.-20     	; 0x3edce <dir_rewind+0x3a>

0003ede2 <get_fat>:
{
   3ede2:	0f 93       	push	r16
   3ede4:	1f 93       	push	r17
   3ede6:	cf 93       	push	r28
   3ede8:	df 93       	push	r29
   3edea:	00 d0       	rcall	.+0      	; 0x3edec <get_fat+0xa>
   3edec:	1f 92       	push	r1
   3edee:	cd b7       	in	r28, 0x3d	; 61
   3edf0:	de b7       	in	r29, 0x3e	; 62
	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
   3edf2:	82 30       	cpi	r24, 0x02	; 2
   3edf4:	91 05       	cpc	r25, r1
   3edf6:	18 f4       	brcc	.+6      	; 0x3edfe <get_fat+0x1c>
	return 1;	/* An error occured at the disk I/O layer */
   3edf8:	81 e0       	ldi	r24, 0x01	; 1
   3edfa:	90 e0       	ldi	r25, 0x00	; 0
   3edfc:	23 c0       	rjmp	.+70     	; 0x3ee44 <get_fat+0x62>
	FATFS *fs = FatFs;
   3edfe:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <FatFs>
   3ee02:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <FatFs+0x1>
	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
   3ee06:	26 81       	ldd	r18, Z+6	; 0x06
   3ee08:	37 81       	ldd	r19, Z+7	; 0x07
   3ee0a:	82 17       	cp	r24, r18
   3ee0c:	93 07       	cpc	r25, r19
   3ee0e:	a0 f7       	brcc	.-24     	; 0x3edf8 <get_fat+0x16>
	switch (fs->fs_type) {
   3ee10:	20 81       	ld	r18, Z
   3ee12:	22 30       	cpi	r18, 0x02	; 2
   3ee14:	89 f7       	brne	.-30     	; 0x3edf8 <get_fat+0x16>
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
   3ee16:	9c 01       	movw	r18, r24
   3ee18:	33 27       	eor	r19, r19
   3ee1a:	22 0f       	add	r18, r18
   3ee1c:	33 1f       	adc	r19, r19
   3ee1e:	89 2f       	mov	r24, r25
   3ee20:	99 27       	eor	r25, r25
   3ee22:	40 85       	ldd	r20, Z+8	; 0x08
   3ee24:	51 85       	ldd	r21, Z+9	; 0x09
   3ee26:	62 85       	ldd	r22, Z+10	; 0x0a
   3ee28:	73 85       	ldd	r23, Z+11	; 0x0b
   3ee2a:	48 0f       	add	r20, r24
   3ee2c:	59 1f       	adc	r21, r25
   3ee2e:	61 1d       	adc	r22, r1
   3ee30:	71 1d       	adc	r23, r1
   3ee32:	02 e0       	ldi	r16, 0x02	; 2
   3ee34:	10 e0       	ldi	r17, 0x00	; 0
   3ee36:	ce 01       	movw	r24, r28
   3ee38:	01 96       	adiw	r24, 0x01	; 1
   3ee3a:	37 df       	rcall	.-402    	; 0x3ecaa <disk_readp>
   3ee3c:	81 11       	cpse	r24, r1
   3ee3e:	dc cf       	rjmp	.-72     	; 0x3edf8 <get_fat+0x16>
		return LD_WORD(buf);
   3ee40:	89 81       	ldd	r24, Y+1	; 0x01
   3ee42:	9a 81       	ldd	r25, Y+2	; 0x02
}
   3ee44:	0f 90       	pop	r0
   3ee46:	0f 90       	pop	r0
   3ee48:	0f 90       	pop	r0
   3ee4a:	0f 90       	pop	r0
   3ee4c:	df 91       	pop	r29
   3ee4e:	cf 91       	pop	r28
   3ee50:	1f 91       	pop	r17
   3ee52:	0f 91       	pop	r16
   3ee54:	08 95       	ret

0003ee56 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   3ee56:	cf 92       	push	r12
   3ee58:	df 92       	push	r13
   3ee5a:	ef 92       	push	r14
   3ee5c:	ff 92       	push	r15
   3ee5e:	0f 93       	push	r16
   3ee60:	1f 93       	push	r17
   3ee62:	cf 93       	push	r28
   3ee64:	df 93       	push	r29
   3ee66:	ec 01       	movw	r28, r24
   3ee68:	6a 01       	movw	r12, r20
   3ee6a:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
   3ee6c:	02 e0       	ldi	r16, 0x02	; 2
   3ee6e:	10 e0       	ldi	r17, 0x00	; 0
   3ee70:	2e ef       	ldi	r18, 0xFE	; 254
   3ee72:	31 e0       	ldi	r19, 0x01	; 1
   3ee74:	1a df       	rcall	.-460    	; 0x3ecaa <disk_readp>
   3ee76:	81 11       	cpse	r24, r1
   3ee78:	1d c0       	rjmp	.+58     	; 0x3eeb4 <check_fs+0x5e>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
   3ee7a:	88 81       	ld	r24, Y
   3ee7c:	99 81       	ldd	r25, Y+1	; 0x01
   3ee7e:	85 35       	cpi	r24, 0x55	; 85
   3ee80:	9a 4a       	sbci	r25, 0xAA	; 170
   3ee82:	d1 f4       	brne	.+52     	; 0x3eeb8 <check_fs+0x62>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
   3ee84:	26 e3       	ldi	r18, 0x36	; 54
   3ee86:	30 e0       	ldi	r19, 0x00	; 0
   3ee88:	b7 01       	movw	r22, r14
   3ee8a:	a6 01       	movw	r20, r12
   3ee8c:	ce 01       	movw	r24, r28
   3ee8e:	0d df       	rcall	.-486    	; 0x3ecaa <disk_readp>
   3ee90:	81 11       	cpse	r24, r1
   3ee92:	14 c0       	rjmp	.+40     	; 0x3eebc <check_fs+0x66>
   3ee94:	81 e0       	ldi	r24, 0x01	; 1
   3ee96:	28 81       	ld	r18, Y
   3ee98:	39 81       	ldd	r19, Y+1	; 0x01
   3ee9a:	26 34       	cpi	r18, 0x46	; 70
   3ee9c:	31 44       	sbci	r19, 0x41	; 65
   3ee9e:	09 f4       	brne	.+2      	; 0x3eea2 <check_fs+0x4c>
   3eea0:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
}
   3eea2:	df 91       	pop	r29
   3eea4:	cf 91       	pop	r28
   3eea6:	1f 91       	pop	r17
   3eea8:	0f 91       	pop	r16
   3eeaa:	ff 90       	pop	r15
   3eeac:	ef 90       	pop	r14
   3eeae:	df 90       	pop	r13
   3eeb0:	cf 90       	pop	r12
   3eeb2:	08 95       	ret
		return 3;
   3eeb4:	83 e0       	ldi	r24, 0x03	; 3
   3eeb6:	f5 cf       	rjmp	.-22     	; 0x3eea2 <check_fs+0x4c>
		return 2;
   3eeb8:	82 e0       	ldi	r24, 0x02	; 2
   3eeba:	f3 cf       	rjmp	.-26     	; 0x3eea2 <check_fs+0x4c>
	return 1;
   3eebc:	81 e0       	ldi	r24, 0x01	; 1
   3eebe:	f1 cf       	rjmp	.-30     	; 0x3eea2 <check_fs+0x4c>

0003eec0 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object */
)
{
   3eec0:	4f 92       	push	r4
   3eec2:	5f 92       	push	r5
   3eec4:	6f 92       	push	r6
   3eec6:	7f 92       	push	r7
   3eec8:	af 92       	push	r10
   3eeca:	bf 92       	push	r11
   3eecc:	cf 92       	push	r12
   3eece:	df 92       	push	r13
   3eed0:	ef 92       	push	r14
   3eed2:	ff 92       	push	r15
   3eed4:	0f 93       	push	r16
   3eed6:	1f 93       	push	r17
   3eed8:	cf 93       	push	r28
   3eeda:	df 93       	push	r29
   3eedc:	cd b7       	in	r28, 0x3d	; 61
   3eede:	de b7       	in	r29, 0x3e	; 62
   3eee0:	a8 97       	sbiw	r28, 0x28	; 40
   3eee2:	0f b6       	in	r0, 0x3f	; 63
   3eee4:	f8 94       	cli
   3eee6:	de bf       	out	0x3e, r29	; 62
   3eee8:	0f be       	out	0x3f, r0	; 63
   3eeea:	cd bf       	out	0x3d, r28	; 61
   3eeec:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
   3eeee:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <FatFs+0x1>
   3eef2:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <FatFs>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
   3eef6:	1e de       	rcall	.-964    	; 0x3eb34 <disk_initialize>
   3eef8:	80 fd       	sbrc	r24, 0
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
   3eefa:	d0 c0       	rjmp	.+416    	; 0x3f09c <pf_mount+0x1dc>
   3eefc:	40 e0       	ldi	r20, 0x00	; 0
   3eefe:	50 e0       	ldi	r21, 0x00	; 0
   3ef00:	ba 01       	movw	r22, r20
   3ef02:	ce 01       	movw	r24, r28
   3ef04:	01 96       	adiw	r24, 0x01	; 1
	bsect = 0;
   3ef06:	a7 df       	rcall	.-178    	; 0x3ee56 <check_fs>
   3ef08:	c1 2c       	mov	r12, r1
   3ef0a:	d1 2c       	mov	r13, r1
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
   3ef0c:	76 01       	movw	r14, r12
   3ef0e:	81 30       	cpi	r24, 0x01	; 1
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
   3ef10:	81 f5       	brne	.+96     	; 0x3ef72 <pf_mount+0xb2>
   3ef12:	00 e1       	ldi	r16, 0x10	; 16
   3ef14:	10 e0       	ldi	r17, 0x00	; 0
   3ef16:	2e eb       	ldi	r18, 0xBE	; 190
   3ef18:	31 e0       	ldi	r19, 0x01	; 1
   3ef1a:	40 e0       	ldi	r20, 0x00	; 0
   3ef1c:	50 e0       	ldi	r21, 0x00	; 0
   3ef1e:	ba 01       	movw	r22, r20
   3ef20:	ce 01       	movw	r24, r28
   3ef22:	01 96       	adiw	r24, 0x01	; 1
   3ef24:	c2 de       	rcall	.-636    	; 0x3ecaa <disk_readp>
   3ef26:	88 23       	and	r24, r24
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   3ef28:	b1 f0       	breq	.+44     	; 0x3ef56 <pf_mount+0x96>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
   3ef2a:	81 e0       	ldi	r24, 0x01	; 1
   3ef2c:	a8 96       	adiw	r28, 0x28	; 40
   3ef2e:	0f b6       	in	r0, 0x3f	; 63
   3ef30:	f8 94       	cli
   3ef32:	de bf       	out	0x3e, r29	; 62
   3ef34:	0f be       	out	0x3f, r0	; 63
   3ef36:	cd bf       	out	0x3d, r28	; 61
   3ef38:	df 91       	pop	r29
   3ef3a:	cf 91       	pop	r28
   3ef3c:	1f 91       	pop	r17
   3ef3e:	0f 91       	pop	r16
   3ef40:	ff 90       	pop	r15
   3ef42:	ef 90       	pop	r14
   3ef44:	df 90       	pop	r13
   3ef46:	cf 90       	pop	r12
   3ef48:	bf 90       	pop	r11
   3ef4a:	af 90       	pop	r10
   3ef4c:	7f 90       	pop	r7
   3ef4e:	6f 90       	pop	r6
   3ef50:	5f 90       	pop	r5
   3ef52:	4f 90       	pop	r4
			if (buf[4]) {					/* Is the partition existing? */
   3ef54:	08 95       	ret
   3ef56:	8d 81       	ldd	r24, Y+5	; 0x05
   3ef58:	81 11       	cpse	r24, r1
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
   3ef5a:	02 c0       	rjmp	.+4      	; 0x3ef60 <pf_mount+0xa0>
   3ef5c:	86 e0       	ldi	r24, 0x06	; 6
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
   3ef5e:	e6 cf       	rjmp	.-52     	; 0x3ef2c <pf_mount+0x6c>
   3ef60:	c9 84       	ldd	r12, Y+9	; 0x09
   3ef62:	da 84       	ldd	r13, Y+10	; 0x0a
   3ef64:	eb 84       	ldd	r14, Y+11	; 0x0b
				fmt = check_fs(buf, bsect);	/* Check the partition */
   3ef66:	fc 84       	ldd	r15, Y+12	; 0x0c
   3ef68:	b7 01       	movw	r22, r14
   3ef6a:	a6 01       	movw	r20, r12
   3ef6c:	ce 01       	movw	r24, r28
   3ef6e:	01 96       	adiw	r24, 0x01	; 1
	if (fmt == 3) return FR_DISK_ERR;
   3ef70:	72 df       	rcall	.-284    	; 0x3ee56 <check_fs>
   3ef72:	83 30       	cpi	r24, 0x03	; 3
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
   3ef74:	d1 f2       	breq	.-76     	; 0x3ef2a <pf_mount+0x6a>
   3ef76:	81 11       	cpse	r24, r1
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
   3ef78:	f1 cf       	rjmp	.-30     	; 0x3ef5c <pf_mount+0x9c>
   3ef7a:	04 e2       	ldi	r16, 0x24	; 36
   3ef7c:	10 e0       	ldi	r17, 0x00	; 0
   3ef7e:	2d e0       	ldi	r18, 0x0D	; 13
   3ef80:	30 e0       	ldi	r19, 0x00	; 0
   3ef82:	b7 01       	movw	r22, r14
   3ef84:	a6 01       	movw	r20, r12
   3ef86:	ce 01       	movw	r24, r28
   3ef88:	01 96       	adiw	r24, 0x01	; 1
   3ef8a:	8f de       	rcall	.-738    	; 0x3ecaa <disk_readp>
   3ef8c:	81 11       	cpse	r24, r1
	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
   3ef8e:	cd cf       	rjmp	.-102    	; 0x3ef2a <pf_mount+0x6a>
   3ef90:	2a 85       	ldd	r18, Y+10	; 0x0a
   3ef92:	3b 85       	ldd	r19, Y+11	; 0x0b
   3ef94:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
   3ef96:	40 e0       	ldi	r20, 0x00	; 0
   3ef98:	21 15       	cp	r18, r1
   3ef9a:	31 05       	cpc	r19, r1
   3ef9c:	21 f4       	brne	.+8      	; 0x3efa6 <pf_mount+0xe6>
   3ef9e:	28 8d       	ldd	r18, Y+24	; 0x18
   3efa0:	39 8d       	ldd	r19, Y+25	; 0x19
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
   3efa2:	4a 8d       	ldd	r20, Y+26	; 0x1a
   3efa4:	5b 8d       	ldd	r21, Y+27	; 0x1b
   3efa6:	ac 81       	ldd	r26, Y+4	; 0x04
   3efa8:	b0 e0       	ldi	r27, 0x00	; 0
   3efaa:	4f d6       	rcall	.+3230   	; 0x3fc4a <__muluhisi3>
   3efac:	6d a3       	std	Y+37, r22	; 0x25
   3efae:	7e a3       	std	Y+38, r23	; 0x26
   3efb0:	8f a3       	std	Y+39, r24	; 0x27
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
   3efb2:	98 a7       	std	Y+40, r25	; 0x28
   3efb4:	4a 81       	ldd	r20, Y+2	; 0x02
   3efb6:	5b 81       	ldd	r21, Y+3	; 0x03
   3efb8:	70 e0       	ldi	r23, 0x00	; 0
   3efba:	60 e0       	ldi	r22, 0x00	; 0
   3efbc:	c4 0e       	add	r12, r20
   3efbe:	d5 1e       	adc	r13, r21
   3efc0:	e6 1e       	adc	r14, r22
   3efc2:	f7 1e       	adc	r15, r23
   3efc4:	d5 01       	movw	r26, r10
   3efc6:	18 96       	adiw	r26, 0x08	; 8
   3efc8:	cd 92       	st	X+, r12
   3efca:	dd 92       	st	X+, r13
   3efcc:	ed 92       	st	X+, r14
   3efce:	fc 92       	st	X, r15
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
   3efd0:	1b 97       	sbiw	r26, 0x0b	; 11
   3efd2:	19 81       	ldd	r17, Y+1	; 0x01
   3efd4:	12 96       	adiw	r26, 0x02	; 2
   3efd6:	1c 93       	st	X, r17
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
   3efd8:	12 97       	sbiw	r26, 0x02	; 2
   3efda:	4d 80       	ldd	r4, Y+5	; 0x05
   3efdc:	5e 80       	ldd	r5, Y+6	; 0x06
   3efde:	15 96       	adiw	r26, 0x05	; 5
   3efe0:	5c 92       	st	X, r5
   3efe2:	4e 92       	st	-X, r4
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
   3efe4:	14 97       	sbiw	r26, 0x04	; 4
   3efe6:	8f 81       	ldd	r24, Y+7	; 0x07
   3efe8:	98 85       	ldd	r25, Y+8	; 0x08
   3efea:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
   3efec:	a0 e0       	ldi	r26, 0x00	; 0
   3efee:	00 97       	sbiw	r24, 0x00	; 0
   3eff0:	21 f4       	brne	.+8      	; 0x3effa <pf_mount+0x13a>
   3eff2:	8c 89       	ldd	r24, Y+20	; 0x14
   3eff4:	9d 89       	ldd	r25, Y+21	; 0x15
   3eff6:	ae 89       	ldd	r26, Y+22	; 0x16
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
   3eff8:	bf 89       	ldd	r27, Y+23	; 0x17
   3effa:	24 e0       	ldi	r18, 0x04	; 4
   3effc:	56 94       	lsr	r5
   3effe:	47 94       	ror	r4
   3f000:	2a 95       	dec	r18
   3f002:	e1 f7       	brne	.-8      	; 0x3effc <pf_mount+0x13c>
   3f004:	71 2c       	mov	r7, r1
   3f006:	61 2c       	mov	r6, r1
   3f008:	84 1b       	sub	r24, r20
   3f00a:	95 0b       	sbc	r25, r21
   3f00c:	a6 0b       	sbc	r26, r22
   3f00e:	b7 0b       	sbc	r27, r23
   3f010:	bc 01       	movw	r22, r24
   3f012:	cd 01       	movw	r24, r26
   3f014:	2d a1       	ldd	r18, Y+37	; 0x25
   3f016:	3e a1       	ldd	r19, Y+38	; 0x26
   3f018:	4f a1       	ldd	r20, Y+39	; 0x27
   3f01a:	58 a5       	ldd	r21, Y+40	; 0x28
   3f01c:	62 1b       	sub	r22, r18
   3f01e:	73 0b       	sbc	r23, r19
   3f020:	84 0b       	sbc	r24, r20
   3f022:	95 0b       	sbc	r25, r21
   3f024:	64 19       	sub	r22, r4
   3f026:	75 09       	sbc	r23, r5
		) / fs->csize + 2;
   3f028:	86 09       	sbc	r24, r6
   3f02a:	97 09       	sbc	r25, r7
   3f02c:	21 2f       	mov	r18, r17
   3f02e:	30 e0       	ldi	r19, 0x00	; 0
   3f030:	50 e0       	ldi	r21, 0x00	; 0
   3f032:	40 e0       	ldi	r20, 0x00	; 0
	mclst = (tsect						/* Last cluster# + 1 */
   3f034:	d9 d5       	rcall	.+2994   	; 0x3fbe8 <__udivmodsi4>
   3f036:	da 01       	movw	r26, r20
   3f038:	c9 01       	movw	r24, r18
   3f03a:	02 96       	adiw	r24, 0x02	; 2
   3f03c:	a1 1d       	adc	r26, r1
	fs->n_fatent = (CLUST)mclst;
   3f03e:	b1 1d       	adc	r27, r1
   3f040:	f5 01       	movw	r30, r10
   3f042:	97 83       	std	Z+7, r25	; 0x07
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
   3f044:	86 83       	std	Z+6, r24	; 0x06
   3f046:	26 5f       	subi	r18, 0xF6	; 246
   3f048:	3f 40       	sbci	r19, 0x0F	; 15
   3f04a:	41 09       	sbc	r20, r1
   3f04c:	51 09       	sbc	r21, r1
   3f04e:	2f 3f       	cpi	r18, 0xFF	; 255
   3f050:	3f 4e       	sbci	r19, 0xEF	; 239
   3f052:	41 05       	cpc	r20, r1
   3f054:	51 05       	cpc	r21, r1
   3f056:	08 f0       	brcs	.+2      	; 0x3f05a <pf_mount+0x19a>
	fs->fs_type = fmt;
   3f058:	81 cf       	rjmp	.-254    	; 0x3ef5c <pf_mount+0x9c>
   3f05a:	82 e0       	ldi	r24, 0x02	; 2
   3f05c:	d5 01       	movw	r26, r10
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
   3f05e:	8c 93       	st	X, r24
   3f060:	2d a1       	ldd	r18, Y+37	; 0x25
   3f062:	3e a1       	ldd	r19, Y+38	; 0x26
   3f064:	4f a1       	ldd	r20, Y+39	; 0x27
   3f066:	58 a5       	ldd	r21, Y+40	; 0x28
   3f068:	c2 0e       	add	r12, r18
   3f06a:	d3 1e       	adc	r13, r19
   3f06c:	e4 1e       	adc	r14, r20
   3f06e:	f5 1e       	adc	r15, r21
   3f070:	1c 96       	adiw	r26, 0x0c	; 12
   3f072:	cd 92       	st	X+, r12
   3f074:	dd 92       	st	X+, r13
   3f076:	ed 92       	st	X+, r14
   3f078:	fc 92       	st	X, r15
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
   3f07a:	1f 97       	sbiw	r26, 0x0f	; 15
   3f07c:	c4 0c       	add	r12, r4
   3f07e:	d5 1c       	adc	r13, r5
   3f080:	e6 1c       	adc	r14, r6
   3f082:	f7 1c       	adc	r15, r7
   3f084:	f5 01       	movw	r30, r10
   3f086:	c0 8a       	std	Z+16, r12	; 0x10
   3f088:	d1 8a       	std	Z+17, r13	; 0x11
   3f08a:	e2 8a       	std	Z+18, r14	; 0x12
	fs->flag = 0;
   3f08c:	f3 8a       	std	Z+19, r15	; 0x13
	FatFs = fs;
   3f08e:	11 82       	std	Z+1, r1	; 0x01
   3f090:	b0 92 4f 05 	sts	0x054F, r11	; 0x80054f <FatFs+0x1>
   3f094:	a0 92 4e 05 	sts	0x054E, r10	; 0x80054e <FatFs>
	return FR_OK;
   3f098:	80 e0       	ldi	r24, 0x00	; 0
		return FR_NOT_READY;
   3f09a:	48 cf       	rjmp	.-368    	; 0x3ef2c <pf_mount+0x6c>
   3f09c:	82 e0       	ldi	r24, 0x02	; 2
   3f09e:	46 cf       	rjmp	.-372    	; 0x3ef2c <pf_mount+0x6c>

0003f0a0 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
   3f0a0:	af 92       	push	r10
   3f0a2:	bf 92       	push	r11
   3f0a4:	cf 92       	push	r12
   3f0a6:	df 92       	push	r13
   3f0a8:	ef 92       	push	r14
   3f0aa:	ff 92       	push	r15
   3f0ac:	0f 93       	push	r16
   3f0ae:	1f 93       	push	r17
   3f0b0:	cf 93       	push	r28
   3f0b2:	df 93       	push	r29
   3f0b4:	cd b7       	in	r28, 0x3d	; 61
   3f0b6:	de b7       	in	r29, 0x3e	; 62
   3f0b8:	e8 97       	sbiw	r28, 0x38	; 56
   3f0ba:	0f b6       	in	r0, 0x3f	; 63
   3f0bc:	f8 94       	cli
   3f0be:	de bf       	out	0x3e, r29	; 62
   3f0c0:	0f be       	out	0x3f, r0	; 63
   3f0c2:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
   3f0c4:	c0 90 4e 05 	lds	r12, 0x054E	; 0x80054e <FatFs>
   3f0c8:	d0 90 4f 05 	lds	r13, 0x054F	; 0x80054f <FatFs+0x1>


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3f0cc:	c1 14       	cp	r12, r1
   3f0ce:	d1 04       	cpc	r13, r1
   3f0d0:	09 f4       	brne	.+2      	; 0x3f0d4 <pf_open+0x34>
   3f0d2:	ff c0       	rjmp	.+510    	; 0x3f2d2 <pf_open+0x232>

	fs->flag = 0;
   3f0d4:	f6 01       	movw	r30, r12
   3f0d6:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
   3f0d8:	9e 01       	movw	r18, r28
   3f0da:	2f 5d       	subi	r18, 0xDF	; 223
   3f0dc:	3f 4f       	sbci	r19, 0xFF	; 255
   3f0de:	38 ab       	std	Y+48, r19	; 0x30
   3f0e0:	2f a7       	std	Y+47, r18	; 0x2f
   3f0e2:	9c 01       	movw	r18, r24
   3f0e4:	79 01       	movw	r14, r18
	while (*path == ' ') path++;		/* Strip leading spaces */
   3f0e6:	f9 01       	movw	r30, r18
   3f0e8:	80 81       	ld	r24, Z
   3f0ea:	2f 5f       	subi	r18, 0xFF	; 255
   3f0ec:	3f 4f       	sbci	r19, 0xFF	; 255
   3f0ee:	80 32       	cpi	r24, 0x20	; 32
   3f0f0:	c9 f3       	breq	.-14     	; 0x3f0e4 <pf_open+0x44>
	if (*path == '/') path++;			/* Strip heading separator if exist */
   3f0f2:	8f 32       	cpi	r24, 0x2F	; 47
   3f0f4:	09 f4       	brne	.+2      	; 0x3f0f8 <pf_open+0x58>
   3f0f6:	79 01       	movw	r14, r18
	dj->sclust = 0;						/* Set start directory (always root dir) */
   3f0f8:	1a aa       	std	Y+50, r1	; 0x32
   3f0fa:	19 aa       	std	Y+49, r1	; 0x31
	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
   3f0fc:	f7 01       	movw	r30, r14
   3f0fe:	80 81       	ld	r24, Z
   3f100:	80 32       	cpi	r24, 0x20	; 32
   3f102:	08 f0       	brcs	.+2      	; 0x3f106 <pf_open+0x66>
   3f104:	a3 c0       	rjmp	.+326    	; 0x3f24c <pf_open+0x1ac>
		res = dir_rewind(dj);
   3f106:	ce 01       	movw	r24, r28
   3f108:	8d 96       	adiw	r24, 0x2d	; 45
   3f10a:	44 de       	rcall	.-888    	; 0x3ed94 <dir_rewind>
		dir[0] = 0;
   3f10c:	19 82       	std	Y+1, r1	; 0x01
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
   3f10e:	88 23       	and	r24, r24
   3f110:	09 f4       	brne	.+2      	; 0x3f114 <pf_open+0x74>
   3f112:	c3 c0       	rjmp	.+390    	; 0x3f29a <pf_open+0x1fa>
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
   3f114:	e8 96       	adiw	r28, 0x38	; 56
   3f116:	0f b6       	in	r0, 0x3f	; 63
   3f118:	f8 94       	cli
   3f11a:	de bf       	out	0x3e, r29	; 62
   3f11c:	0f be       	out	0x3f, r0	; 63
   3f11e:	cd bf       	out	0x3d, r28	; 61
   3f120:	df 91       	pop	r29
   3f122:	cf 91       	pop	r28
   3f124:	1f 91       	pop	r17
   3f126:	0f 91       	pop	r16
   3f128:	ff 90       	pop	r15
   3f12a:	ef 90       	pop	r14
   3f12c:	df 90       	pop	r13
   3f12e:	cf 90       	pop	r12
   3f130:	bf 90       	pop	r11
   3f132:	af 90       	pop	r10
   3f134:	08 95       	ret
	*path = &p[si];						/* Rerurn pointer to the next segment */
   3f136:	e3 0e       	add	r14, r19
   3f138:	f1 1c       	adc	r15, r1
	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
   3f13a:	81 e0       	ldi	r24, 0x01	; 1
   3f13c:	91 32       	cpi	r25, 0x21	; 33
   3f13e:	08 f0       	brcs	.+2      	; 0x3f142 <pf_open+0xa2>
   3f140:	80 e0       	ldi	r24, 0x00	; 0
   3f142:	f8 01       	movw	r30, r16
   3f144:	83 87       	std	Z+11, r24	; 0x0b
	res = dir_rewind(dj);			/* Rewind directory object */
   3f146:	ce 01       	movw	r24, r28
   3f148:	8d 96       	adiw	r24, 0x2d	; 45
   3f14a:	24 de       	rcall	.-952    	; 0x3ed94 <dir_rewind>
	if (res != FR_OK) return res;
   3f14c:	81 11       	cpse	r24, r1
   3f14e:	e2 cf       	rjmp	.-60     	; 0x3f114 <pf_open+0x74>
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
   3f150:	2d a5       	ldd	r18, Y+45	; 0x2d
   3f152:	3e a5       	ldd	r19, Y+46	; 0x2e
   3f154:	2f 70       	andi	r18, 0x0F	; 15
   3f156:	33 27       	eor	r19, r19
   3f158:	75 e0       	ldi	r23, 0x05	; 5
   3f15a:	22 0f       	add	r18, r18
   3f15c:	33 1f       	adc	r19, r19
   3f15e:	7a 95       	dec	r23
   3f160:	e1 f7       	brne	.-8      	; 0x3f15a <pf_open+0xba>
   3f162:	4d a9       	ldd	r20, Y+53	; 0x35
   3f164:	5e a9       	ldd	r21, Y+54	; 0x36
   3f166:	6f a9       	ldd	r22, Y+55	; 0x37
   3f168:	78 ad       	ldd	r23, Y+56	; 0x38
   3f16a:	00 e2       	ldi	r16, 0x20	; 32
   3f16c:	10 e0       	ldi	r17, 0x00	; 0
   3f16e:	ce 01       	movw	r24, r28
   3f170:	01 96       	adiw	r24, 0x01	; 1
   3f172:	9b dd       	rcall	.-1226   	; 0x3ecaa <disk_readp>
		if (res != FR_OK) break;
   3f174:	88 23       	and	r24, r24
   3f176:	11 f0       	breq	.+4      	; 0x3f17c <pf_open+0xdc>
	return FR_OK;
   3f178:	81 e0       	ldi	r24, 0x01	; 1
   3f17a:	cc cf       	rjmp	.-104    	; 0x3f114 <pf_open+0x74>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   3f17c:	89 81       	ldd	r24, Y+1	; 0x01
   3f17e:	81 11       	cpse	r24, r1
   3f180:	02 c0       	rjmp	.+4      	; 0x3f186 <pf_open+0xe6>
   3f182:	83 e0       	ldi	r24, 0x03	; 3
   3f184:	c7 cf       	rjmp	.-114    	; 0x3f114 <pf_open+0x74>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   3f186:	1c 85       	ldd	r17, Y+12	; 0x0c
   3f188:	13 fd       	sbrc	r17, 3
   3f18a:	0b c0       	rjmp	.+22     	; 0x3f1a2 <pf_open+0x102>
   3f18c:	af a4       	ldd	r10, Y+47	; 0x2f
   3f18e:	b8 a8       	ldd	r11, Y+48	; 0x30
   3f190:	4b e0       	ldi	r20, 0x0B	; 11
   3f192:	50 e0       	ldi	r21, 0x00	; 0
   3f194:	b5 01       	movw	r22, r10
   3f196:	ce 01       	movw	r24, r28
   3f198:	01 96       	adiw	r24, 0x01	; 1
   3f19a:	61 d5       	rcall	.+2754   	; 0x3fc5e <memcmp>
   3f19c:	89 2b       	or	r24, r25
   3f19e:	09 f4       	brne	.+2      	; 0x3f1a2 <pf_open+0x102>
   3f1a0:	4b c0       	rjmp	.+150    	; 0x3f238 <pf_open+0x198>
	i = dj->index + 1;
   3f1a2:	0d a5       	ldd	r16, Y+45	; 0x2d
   3f1a4:	1e a5       	ldd	r17, Y+46	; 0x2e
   3f1a6:	0f 5f       	subi	r16, 0xFF	; 255
   3f1a8:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   3f1aa:	59 f3       	breq	.-42     	; 0x3f182 <pf_open+0xe2>
   3f1ac:	8d a9       	ldd	r24, Y+53	; 0x35
   3f1ae:	9e a9       	ldd	r25, Y+54	; 0x36
   3f1b0:	af a9       	ldd	r26, Y+55	; 0x37
   3f1b2:	b8 ad       	ldd	r27, Y+56	; 0x38
   3f1b4:	00 97       	sbiw	r24, 0x00	; 0
   3f1b6:	a1 05       	cpc	r26, r1
   3f1b8:	b1 05       	cpc	r27, r1
   3f1ba:	19 f3       	breq	.-58     	; 0x3f182 <pf_open+0xe2>
	if (!(i % 16)) {		/* Sector changed? */
   3f1bc:	98 01       	movw	r18, r16
   3f1be:	2f 70       	andi	r18, 0x0F	; 15
   3f1c0:	33 27       	eor	r19, r19
   3f1c2:	23 2b       	or	r18, r19
   3f1c4:	a9 f4       	brne	.+42     	; 0x3f1f0 <pf_open+0x150>
	FATFS *fs = FatFs;
   3f1c6:	a0 90 4e 05 	lds	r10, 0x054E	; 0x80054e <FatFs>
   3f1ca:	b0 90 4f 05 	lds	r11, 0x054F	; 0x80054f <FatFs+0x1>
		dj->sect++;			/* Next sector */
   3f1ce:	01 96       	adiw	r24, 0x01	; 1
   3f1d0:	a1 1d       	adc	r26, r1
   3f1d2:	b1 1d       	adc	r27, r1
   3f1d4:	8d ab       	std	Y+53, r24	; 0x35
   3f1d6:	9e ab       	std	Y+54, r25	; 0x36
   3f1d8:	af ab       	std	Y+55, r26	; 0x37
   3f1da:	b8 af       	std	Y+56, r27	; 0x38
		if (dj->clust == 0) {	/* Static table */
   3f1dc:	8b a9       	ldd	r24, Y+51	; 0x33
   3f1de:	9c a9       	ldd	r25, Y+52	; 0x34
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
   3f1e0:	f5 01       	movw	r30, r10
		if (dj->clust == 0) {	/* Static table */
   3f1e2:	00 97       	sbiw	r24, 0x00	; 0
   3f1e4:	41 f4       	brne	.+16     	; 0x3f1f6 <pf_open+0x156>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
   3f1e6:	84 81       	ldd	r24, Z+4	; 0x04
   3f1e8:	95 81       	ldd	r25, Z+5	; 0x05
   3f1ea:	08 17       	cp	r16, r24
   3f1ec:	19 07       	cpc	r17, r25
   3f1ee:	48 f6       	brcc	.-110    	; 0x3f182 <pf_open+0xe2>
	dj->index = i;
   3f1f0:	1e a7       	std	Y+46, r17	; 0x2e
   3f1f2:	0d a7       	std	Y+45, r16	; 0x2d
   3f1f4:	ad cf       	rjmp	.-166    	; 0x3f150 <pf_open+0xb0>
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   3f1f6:	22 81       	ldd	r18, Z+2	; 0x02
   3f1f8:	21 50       	subi	r18, 0x01	; 1
   3f1fa:	33 0b       	sbc	r19, r19
   3f1fc:	a8 01       	movw	r20, r16
   3f1fe:	64 e0       	ldi	r22, 0x04	; 4
   3f200:	56 95       	lsr	r21
   3f202:	47 95       	ror	r20
   3f204:	6a 95       	dec	r22
   3f206:	e1 f7       	brne	.-8      	; 0x3f200 <pf_open+0x160>
   3f208:	24 23       	and	r18, r20
   3f20a:	35 23       	and	r19, r21
   3f20c:	23 2b       	or	r18, r19
				clst = get_fat(dj->clust);		/* Get next cluster */
   3f20e:	81 f7       	brne	.-32     	; 0x3f1f0 <pf_open+0x150>
   3f210:	e8 dd       	rcall	.-1072   	; 0x3ede2 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
   3f212:	82 30       	cpi	r24, 0x02	; 2
   3f214:	91 05       	cpc	r25, r1
   3f216:	08 f4       	brcc	.+2      	; 0x3f21a <pf_open+0x17a>
   3f218:	af cf       	rjmp	.-162    	; 0x3f178 <pf_open+0xd8>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
   3f21a:	f5 01       	movw	r30, r10
   3f21c:	26 81       	ldd	r18, Z+6	; 0x06
   3f21e:	37 81       	ldd	r19, Z+7	; 0x07
   3f220:	82 17       	cp	r24, r18
   3f222:	93 07       	cpc	r25, r19
   3f224:	08 f0       	brcs	.+2      	; 0x3f228 <pf_open+0x188>
				dj->clust = clst;				/* Initialize data for new cluster */
   3f226:	ad cf       	rjmp	.-166    	; 0x3f182 <pf_open+0xe2>
   3f228:	9c ab       	std	Y+52, r25	; 0x34
				dj->sect = clust2sect(clst);
   3f22a:	8b ab       	std	Y+51, r24	; 0x33
   3f22c:	93 dd       	rcall	.-1242   	; 0x3ed54 <clust2sect>
   3f22e:	6d ab       	std	Y+53, r22	; 0x35
   3f230:	7e ab       	std	Y+54, r23	; 0x36
   3f232:	8f ab       	std	Y+55, r24	; 0x37
   3f234:	98 af       	std	Y+56, r25	; 0x38
   3f236:	dc cf       	rjmp	.-72     	; 0x3f1f0 <pf_open+0x150>
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
   3f238:	f5 01       	movw	r30, r10
   3f23a:	83 85       	ldd	r24, Z+11	; 0x0b
   3f23c:	81 11       	cpse	r24, r1
   3f23e:	2d c0       	rjmp	.+90     	; 0x3f29a <pf_open+0x1fa>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
   3f240:	14 ff       	sbrs	r17, 4
   3f242:	9f cf       	rjmp	.-194    	; 0x3f182 <pf_open+0xe2>
			dj->sclust = get_clust(dir);	/* Follow next */
   3f244:	8b 8d       	ldd	r24, Y+27	; 0x1b
   3f246:	9c 8d       	ldd	r25, Y+28	; 0x1c
   3f248:	9a ab       	std	Y+50, r25	; 0x32
   3f24a:	89 ab       	std	Y+49, r24	; 0x31
   3f24c:	0f a5       	ldd	r16, Y+47	; 0x2f
	mem_set(sfn, ' ', 11);
   3f24e:	18 a9       	ldd	r17, Y+48	; 0x30
   3f250:	4b e0       	ldi	r20, 0x0B	; 11
   3f252:	50 e0       	ldi	r21, 0x00	; 0
   3f254:	60 e2       	ldi	r22, 0x20	; 32
   3f256:	70 e0       	ldi	r23, 0x00	; 0
   3f258:	c8 01       	movw	r24, r16
   3f25a:	0e d5       	rcall	.+2588   	; 0x3fc78 <memset>
	si = i = 0; ni = 8;
   3f25c:	20 e0       	ldi	r18, 0x00	; 0
   3f25e:	e0 e0       	ldi	r30, 0x00	; 0
   3f260:	88 e0       	ldi	r24, 0x08	; 8
		c = p[si++];
   3f262:	31 e0       	ldi	r19, 0x01	; 1
   3f264:	3e 0f       	add	r19, r30
   3f266:	ee 0d       	add	r30, r14
   3f268:	ff 2d       	mov	r31, r15
   3f26a:	f1 1d       	adc	r31, r1
   3f26c:	90 81       	ld	r25, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
   3f26e:	91 32       	cpi	r25, 0x21	; 33
   3f270:	08 f4       	brcc	.+2      	; 0x3f274 <pf_open+0x1d4>
   3f272:	61 cf       	rjmp	.-318    	; 0x3f136 <pf_open+0x96>
   3f274:	9f 32       	cpi	r25, 0x2F	; 47
   3f276:	09 f4       	brne	.+2      	; 0x3f27a <pf_open+0x1da>
   3f278:	5e cf       	rjmp	.-324    	; 0x3f136 <pf_open+0x96>
		if (c == '.' || i >= ni) {
   3f27a:	9e 32       	cpi	r25, 0x2E	; 46
   3f27c:	61 f1       	breq	.+88     	; 0x3f2d6 <pf_open+0x236>
   3f27e:	28 17       	cp	r18, r24
   3f280:	08 f0       	brcs	.+2      	; 0x3f284 <pf_open+0x1e4>
   3f282:	59 cf       	rjmp	.-334    	; 0x3f136 <pf_open+0x96>
			sfn[i++] = c;
   3f284:	f8 01       	movw	r30, r16
   3f286:	e2 0f       	add	r30, r18
   3f288:	f1 1d       	adc	r31, r1
   3f28a:	90 83       	st	Z, r25
   3f28c:	98 2f       	mov	r25, r24
   3f28e:	81 e0       	ldi	r24, 0x01	; 1
   3f290:	82 0f       	add	r24, r18
		c = p[si++];
   3f292:	28 2f       	mov	r18, r24
   3f294:	e3 2f       	mov	r30, r19
   3f296:	89 2f       	mov	r24, r25
   3f298:	e4 cf       	rjmp	.-56     	; 0x3f262 <pf_open+0x1c2>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
   3f29a:	89 81       	ldd	r24, Y+1	; 0x01
   3f29c:	88 23       	and	r24, r24
   3f29e:	09 f4       	brne	.+2      	; 0x3f2a2 <pf_open+0x202>
   3f2a0:	70 cf       	rjmp	.-288    	; 0x3f182 <pf_open+0xe2>
   3f2a2:	8c 85       	ldd	r24, Y+12	; 0x0c
   3f2a4:	84 fd       	sbrc	r24, 4
   3f2a6:	6d cf       	rjmp	.-294    	; 0x3f182 <pf_open+0xe2>
	fs->org_clust = get_clust(dir);		/* File start cluster */
   3f2a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   3f2aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
   3f2ac:	f6 01       	movw	r30, r12
   3f2ae:	95 8f       	std	Z+29, r25	; 0x1d
   3f2b0:	84 8f       	std	Z+28, r24	; 0x1c
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   3f2b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
   3f2b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
   3f2b6:	af 8d       	ldd	r26, Y+31	; 0x1f
   3f2b8:	b8 a1       	ldd	r27, Y+32	; 0x20
   3f2ba:	80 8f       	std	Z+24, r24	; 0x18
   3f2bc:	91 8f       	std	Z+25, r25	; 0x19
   3f2be:	a2 8f       	std	Z+26, r26	; 0x1a
   3f2c0:	b3 8f       	std	Z+27, r27	; 0x1b
	fs->fptr = 0;						/* File pointer */
   3f2c2:	14 8a       	std	Z+20, r1	; 0x14
   3f2c4:	15 8a       	std	Z+21, r1	; 0x15
   3f2c6:	16 8a       	std	Z+22, r1	; 0x16
   3f2c8:	17 8a       	std	Z+23, r1	; 0x17
	fs->flag = FA_OPENED;
   3f2ca:	81 e0       	ldi	r24, 0x01	; 1
   3f2cc:	81 83       	std	Z+1, r24	; 0x01
	return FR_OK;
   3f2ce:	80 e0       	ldi	r24, 0x00	; 0
   3f2d0:	21 cf       	rjmp	.-446    	; 0x3f114 <pf_open+0x74>
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3f2d2:	85 e0       	ldi	r24, 0x05	; 5
   3f2d4:	1f cf       	rjmp	.-450    	; 0x3f114 <pf_open+0x74>
			if (ni != 8 || c != '.') break;
   3f2d6:	88 30       	cpi	r24, 0x08	; 8
   3f2d8:	09 f0       	breq	.+2      	; 0x3f2dc <pf_open+0x23c>
   3f2da:	2d cf       	rjmp	.-422    	; 0x3f136 <pf_open+0x96>
			i = 8; ni = 11;
   3f2dc:	9b e0       	ldi	r25, 0x0B	; 11
   3f2de:	d9 cf       	rjmp	.-78     	; 0x3f292 <pf_open+0x1f2>

0003f2e0 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
   3f2e0:	4f 92       	push	r4
   3f2e2:	5f 92       	push	r5
   3f2e4:	6f 92       	push	r6
   3f2e6:	7f 92       	push	r7
   3f2e8:	8f 92       	push	r8
   3f2ea:	9f 92       	push	r9
   3f2ec:	af 92       	push	r10
   3f2ee:	bf 92       	push	r11
   3f2f0:	cf 92       	push	r12
   3f2f2:	df 92       	push	r13
   3f2f4:	ef 92       	push	r14
   3f2f6:	ff 92       	push	r15
   3f2f8:	0f 93       	push	r16
   3f2fa:	1f 93       	push	r17
   3f2fc:	cf 93       	push	r28
   3f2fe:	df 93       	push	r29
   3f300:	4c 01       	movw	r8, r24
   3f302:	7b 01       	movw	r14, r22
   3f304:	5a 01       	movw	r10, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	UINT rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
   3f306:	c0 91 4e 05 	lds	r28, 0x054E	; 0x80054e <FatFs>
   3f30a:	d0 91 4f 05 	lds	r29, 0x054F	; 0x80054f <FatFs+0x1>


	*br = 0;
   3f30e:	fa 01       	movw	r30, r20
   3f310:	11 82       	std	Z+1, r1	; 0x01
   3f312:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3f314:	85 e0       	ldi	r24, 0x05	; 5
   3f316:	20 97       	sbiw	r28, 0x00	; 0
   3f318:	09 f4       	brne	.+2      	; 0x3f31c <pf_read+0x3c>
   3f31a:	47 c0       	rjmp	.+142    	; 0x3f3aa <pf_read+0xca>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
   3f31c:	89 81       	ldd	r24, Y+1	; 0x01
   3f31e:	80 ff       	sbrs	r24, 0
   3f320:	9c c0       	rjmp	.+312    	; 0x3f45a <pf_read+0x17a>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
   3f322:	88 8d       	ldd	r24, Y+24	; 0x18
   3f324:	99 8d       	ldd	r25, Y+25	; 0x19
   3f326:	aa 8d       	ldd	r26, Y+26	; 0x1a
   3f328:	bb 8d       	ldd	r27, Y+27	; 0x1b
   3f32a:	4c 89       	ldd	r20, Y+20	; 0x14
   3f32c:	5d 89       	ldd	r21, Y+21	; 0x15
   3f32e:	6e 89       	ldd	r22, Y+22	; 0x16
   3f330:	7f 89       	ldd	r23, Y+23	; 0x17
   3f332:	84 1b       	sub	r24, r20
   3f334:	95 0b       	sbc	r25, r21
   3f336:	a6 0b       	sbc	r26, r22
   3f338:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
   3f33a:	a7 01       	movw	r20, r14
   3f33c:	70 e0       	ldi	r23, 0x00	; 0
   3f33e:	60 e0       	ldi	r22, 0x00	; 0
   3f340:	84 17       	cp	r24, r20
   3f342:	95 07       	cpc	r25, r21
   3f344:	a6 07       	cpc	r26, r22
   3f346:	b7 07       	cpc	r27, r23
   3f348:	08 f4       	brcc	.+2      	; 0x3f34c <pf_read+0x6c>
   3f34a:	7c 01       	movw	r14, r24
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
   3f34c:	34 01       	movw	r6, r8
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
   3f34e:	41 2c       	mov	r4, r1
   3f350:	32 e0       	ldi	r19, 0x02	; 2
   3f352:	53 2e       	mov	r5, r19
	while (btr)	{									/* Repeat until all data transferred */
   3f354:	e1 14       	cp	r14, r1
   3f356:	f1 04       	cpc	r15, r1
   3f358:	11 f4       	brne	.+4      	; 0x3f35e <pf_read+0x7e>
		if (dr) ABORT(FR_DISK_ERR);
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
   3f35a:	80 e0       	ldi	r24, 0x00	; 0
   3f35c:	26 c0       	rjmp	.+76     	; 0x3f3aa <pf_read+0xca>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
   3f35e:	8c 89       	ldd	r24, Y+20	; 0x14
   3f360:	9d 89       	ldd	r25, Y+21	; 0x15
   3f362:	ae 89       	ldd	r26, Y+22	; 0x16
   3f364:	bf 89       	ldd	r27, Y+23	; 0x17
   3f366:	ac 01       	movw	r20, r24
   3f368:	bd 01       	movw	r22, r26
   3f36a:	51 70       	andi	r21, 0x01	; 1
   3f36c:	66 27       	eor	r22, r22
   3f36e:	77 27       	eor	r23, r23
   3f370:	45 2b       	or	r20, r21
   3f372:	46 2b       	or	r20, r22
   3f374:	47 2b       	or	r20, r23
   3f376:	09 f0       	breq	.+2      	; 0x3f37a <pf_read+0x9a>
   3f378:	3f c0       	rjmp	.+126    	; 0x3f3f8 <pf_read+0x118>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
   3f37a:	da 80       	ldd	r13, Y+2	; 0x02
   3f37c:	da 94       	dec	r13
   3f37e:	ac 01       	movw	r20, r24
   3f380:	bd 01       	movw	r22, r26
   3f382:	29 e0       	ldi	r18, 0x09	; 9
   3f384:	76 95       	lsr	r23
   3f386:	67 95       	ror	r22
   3f388:	57 95       	ror	r21
   3f38a:	47 95       	ror	r20
   3f38c:	2a 95       	dec	r18
   3f38e:	d1 f7       	brne	.-12     	; 0x3f384 <pf_read+0xa4>
   3f390:	d4 22       	and	r13, r20
			if (!cs) {								/* On the cluster boundary? */
   3f392:	11 f5       	brne	.+68     	; 0x3f3d8 <pf_read+0xf8>
				if (fs->fptr == 0)					/* On the top of the file? */
   3f394:	89 2b       	or	r24, r25
   3f396:	8a 2b       	or	r24, r26
   3f398:	8b 2b       	or	r24, r27
   3f39a:	c1 f4       	brne	.+48     	; 0x3f3cc <pf_read+0xec>
					clst = fs->org_clust;
   3f39c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   3f39e:	9d 8d       	ldd	r25, Y+29	; 0x1d
				if (clst <= 1) ABORT(FR_DISK_ERR);
   3f3a0:	82 30       	cpi	r24, 0x02	; 2
   3f3a2:	91 05       	cpc	r25, r1
   3f3a4:	b8 f4       	brcc	.+46     	; 0x3f3d4 <pf_read+0xf4>
		if (dr) ABORT(FR_DISK_ERR);
   3f3a6:	19 82       	std	Y+1, r1	; 0x01
   3f3a8:	81 e0       	ldi	r24, 0x01	; 1
}
   3f3aa:	df 91       	pop	r29
   3f3ac:	cf 91       	pop	r28
   3f3ae:	1f 91       	pop	r17
   3f3b0:	0f 91       	pop	r16
   3f3b2:	ff 90       	pop	r15
   3f3b4:	ef 90       	pop	r14
   3f3b6:	df 90       	pop	r13
   3f3b8:	cf 90       	pop	r12
   3f3ba:	bf 90       	pop	r11
   3f3bc:	af 90       	pop	r10
   3f3be:	9f 90       	pop	r9
   3f3c0:	8f 90       	pop	r8
   3f3c2:	7f 90       	pop	r7
   3f3c4:	6f 90       	pop	r6
   3f3c6:	5f 90       	pop	r5
   3f3c8:	4f 90       	pop	r4
   3f3ca:	08 95       	ret
					clst = get_fat(fs->curr_clust);
   3f3cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
   3f3ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
   3f3d0:	08 dd       	rcall	.-1520   	; 0x3ede2 <get_fat>
   3f3d2:	e6 cf       	rjmp	.-52     	; 0x3f3a0 <pf_read+0xc0>
				fs->curr_clust = clst;				/* Update current cluster */
   3f3d4:	9f 8f       	std	Y+31, r25	; 0x1f
   3f3d6:	8e 8f       	std	Y+30, r24	; 0x1e
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
   3f3d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
   3f3da:	9f 8d       	ldd	r25, Y+31	; 0x1f
   3f3dc:	bb dc       	rcall	.-1674   	; 0x3ed54 <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
   3f3de:	61 15       	cp	r22, r1
   3f3e0:	71 05       	cpc	r23, r1
   3f3e2:	81 05       	cpc	r24, r1
   3f3e4:	91 05       	cpc	r25, r1
   3f3e6:	f9 f2       	breq	.-66     	; 0x3f3a6 <pf_read+0xc6>
			fs->dsect = sect + cs;
   3f3e8:	6d 0d       	add	r22, r13
   3f3ea:	71 1d       	adc	r23, r1
   3f3ec:	81 1d       	adc	r24, r1
   3f3ee:	91 1d       	adc	r25, r1
   3f3f0:	68 a3       	std	Y+32, r22	; 0x20
   3f3f2:	79 a3       	std	Y+33, r23	; 0x21
   3f3f4:	8a a3       	std	Y+34, r24	; 0x22
   3f3f6:	9b a3       	std	Y+35, r25	; 0x23
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
   3f3f8:	2c 89       	ldd	r18, Y+20	; 0x14
   3f3fa:	3d 89       	ldd	r19, Y+21	; 0x15
   3f3fc:	31 70       	andi	r19, 0x01	; 1
   3f3fe:	c2 01       	movw	r24, r4
   3f400:	82 1b       	sub	r24, r18
   3f402:	93 0b       	sbc	r25, r19
   3f404:	67 01       	movw	r12, r14
   3f406:	8e 15       	cp	r24, r14
   3f408:	9f 05       	cpc	r25, r15
   3f40a:	08 f4       	brcc	.+2      	; 0x3f40e <pf_read+0x12e>
   3f40c:	6c 01       	movw	r12, r24
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
   3f40e:	48 a1       	ldd	r20, Y+32	; 0x20
   3f410:	59 a1       	ldd	r21, Y+33	; 0x21
   3f412:	6a a1       	ldd	r22, Y+34	; 0x22
   3f414:	7b a1       	ldd	r23, Y+35	; 0x23
   3f416:	80 e0       	ldi	r24, 0x00	; 0
   3f418:	90 e0       	ldi	r25, 0x00	; 0
   3f41a:	81 14       	cp	r8, r1
   3f41c:	91 04       	cpc	r9, r1
   3f41e:	09 f0       	breq	.+2      	; 0x3f422 <pf_read+0x142>
   3f420:	c3 01       	movw	r24, r6
   3f422:	86 01       	movw	r16, r12
   3f424:	42 dc       	rcall	.-1916   	; 0x3ecaa <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
   3f426:	81 11       	cpse	r24, r1
   3f428:	be cf       	rjmp	.-132    	; 0x3f3a6 <pf_read+0xc6>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
   3f42a:	8c 89       	ldd	r24, Y+20	; 0x14
   3f42c:	9d 89       	ldd	r25, Y+21	; 0x15
   3f42e:	ae 89       	ldd	r26, Y+22	; 0x16
   3f430:	bf 89       	ldd	r27, Y+23	; 0x17
   3f432:	8c 0d       	add	r24, r12
   3f434:	9d 1d       	adc	r25, r13
   3f436:	a1 1d       	adc	r26, r1
   3f438:	b1 1d       	adc	r27, r1
   3f43a:	8c 8b       	std	Y+20, r24	; 0x14
   3f43c:	9d 8b       	std	Y+21, r25	; 0x15
   3f43e:	ae 8b       	std	Y+22, r26	; 0x16
   3f440:	bf 8b       	std	Y+23, r27	; 0x17
   3f442:	6c 0c       	add	r6, r12
   3f444:	7d 1c       	adc	r7, r13
		btr -= rcnt; *br += rcnt;
   3f446:	ec 18       	sub	r14, r12
   3f448:	fd 08       	sbc	r15, r13
   3f44a:	f5 01       	movw	r30, r10
   3f44c:	80 81       	ld	r24, Z
   3f44e:	91 81       	ldd	r25, Z+1	; 0x01
   3f450:	c8 0e       	add	r12, r24
   3f452:	d9 1e       	adc	r13, r25
   3f454:	d1 82       	std	Z+1, r13	; 0x01
   3f456:	c0 82       	st	Z, r12
   3f458:	7d cf       	rjmp	.-262    	; 0x3f354 <pf_read+0x74>
		return FR_NOT_OPENED;
   3f45a:	84 e0       	ldi	r24, 0x04	; 4
   3f45c:	a6 cf       	rjmp	.-180    	; 0x3f3aa <pf_read+0xca>

0003f45e <SDInit>:
#include "sdFile.h"

FATFS fs;

uint8_t SDInit(){
	FRESULT fr = pf_mount(&fs);
   3f45e:	82 e5       	ldi	r24, 0x52	; 82
   3f460:	95 e0       	ldi	r25, 0x05	; 5
   3f462:	2e dd       	rcall	.-1444   	; 0x3eec0 <pf_mount>
	if (fr == 0){
   3f464:	81 11       	cpse	r24, r1
   3f466:	05 c0       	rjmp	.+10     	; 0x3f472 <SDInit+0x14>
		fr = pf_open("upd.bin");
   3f468:	8f e4       	ldi	r24, 0x4F	; 79
   3f46a:	94 e0       	ldi	r25, 0x04	; 4
   3f46c:	19 de       	rcall	.-974    	; 0x3f0a0 <pf_open>
		if (fr == 0){
   3f46e:	91 e0       	ldi	r25, 0x01	; 1
   3f470:	81 11       	cpse	r24, r1
			return 1;
		}
	}
	return 0;
   3f472:	90 e0       	ldi	r25, 0x00	; 0
}
   3f474:	89 2f       	mov	r24, r25
   3f476:	08 95       	ret

0003f478 <SDRead>:

uint8_t SDRead(uint32_t address, uint8_t* data, uint16_t dataLength){
   3f478:	ef 92       	push	r14
   3f47a:	ff 92       	push	r15
   3f47c:	0f 93       	push	r16
   3f47e:	1f 93       	push	r17
   3f480:	cf 93       	push	r28
   3f482:	df 93       	push	r29
   3f484:	1f 92       	push	r1
   3f486:	1f 92       	push	r1
   3f488:	cd b7       	in	r28, 0x3d	; 61
   3f48a:	de b7       	in	r29, 0x3e	; 62
   3f48c:	8a 01       	movw	r16, r20
   3f48e:	79 01       	movw	r14, r18
	UINT sz;
	FRESULT fr = 0;
	if (address == 0){
   3f490:	67 2b       	or	r22, r23
   3f492:	68 2b       	or	r22, r24
   3f494:	69 2b       	or	r22, r25
   3f496:	99 f0       	breq	.+38     	; 0x3f4be <SDRead+0x46>
		fr = pf_open("upd.bin");
	}
	//no need to seek since firmware starts from zero
//	fr = pf_lseek(address);
	if (fr == 0){
		fr = pf_read(data, dataLength, &sz);
   3f498:	ae 01       	movw	r20, r28
   3f49a:	4f 5f       	subi	r20, 0xFF	; 255
   3f49c:	5f 4f       	sbci	r21, 0xFF	; 255
   3f49e:	b7 01       	movw	r22, r14
   3f4a0:	c8 01       	movw	r24, r16
   3f4a2:	1e df       	rcall	.-452    	; 0x3f2e0 <pf_read>
		return fr == 0;
   3f4a4:	91 e0       	ldi	r25, 0x01	; 1
   3f4a6:	81 11       	cpse	r24, r1
	}
	return 0;
   3f4a8:	90 e0       	ldi	r25, 0x00	; 0
}
   3f4aa:	89 2f       	mov	r24, r25
   3f4ac:	0f 90       	pop	r0
   3f4ae:	0f 90       	pop	r0
   3f4b0:	df 91       	pop	r29
   3f4b2:	cf 91       	pop	r28
   3f4b4:	1f 91       	pop	r17
   3f4b6:	0f 91       	pop	r16
   3f4b8:	ff 90       	pop	r15
   3f4ba:	ef 90       	pop	r14
   3f4bc:	08 95       	ret
		fr = pf_open("upd.bin");
   3f4be:	8f e4       	ldi	r24, 0x4F	; 79
   3f4c0:	94 e0       	ldi	r25, 0x04	; 4
   3f4c2:	ee dd       	rcall	.-1060   	; 0x3f0a0 <pf_open>
	if (fr == 0){
   3f4c4:	88 23       	and	r24, r24
   3f4c6:	41 f3       	breq	.-48     	; 0x3f498 <SDRead+0x20>
   3f4c8:	ef cf       	rjmp	.-34     	; 0x3f4a8 <SDRead+0x30>

0003f4ca <sha1_helper>:
   3f4ca:	0f 93       	push	r16
   3f4cc:	1f 93       	push	r17
   3f4ce:	fc 01       	movw	r30, r24
   3f4d0:	84 85       	ldd	r24, Z+12	; 0x0c
   3f4d2:	95 85       	ldd	r25, Z+13	; 0x0d
   3f4d4:	a6 85       	ldd	r26, Z+14	; 0x0e
   3f4d6:	b7 85       	ldd	r27, Z+15	; 0x0f
   3f4d8:	80 8b       	std	Z+16, r24	; 0x10
   3f4da:	91 8b       	std	Z+17, r25	; 0x11
   3f4dc:	a2 8b       	std	Z+18, r26	; 0x12
   3f4de:	b3 8b       	std	Z+19, r27	; 0x13
   3f4e0:	80 85       	ldd	r24, Z+8	; 0x08
   3f4e2:	91 85       	ldd	r25, Z+9	; 0x09
   3f4e4:	a2 85       	ldd	r26, Z+10	; 0x0a
   3f4e6:	b3 85       	ldd	r27, Z+11	; 0x0b
   3f4e8:	84 87       	std	Z+12, r24	; 0x0c
   3f4ea:	95 87       	std	Z+13, r25	; 0x0d
   3f4ec:	a6 87       	std	Z+14, r26	; 0x0e
   3f4ee:	b7 87       	std	Z+15, r27	; 0x0f
   3f4f0:	84 81       	ldd	r24, Z+4	; 0x04
   3f4f2:	95 81       	ldd	r25, Z+5	; 0x05
   3f4f4:	a6 81       	ldd	r26, Z+6	; 0x06
   3f4f6:	b7 81       	ldd	r27, Z+7	; 0x07
   3f4f8:	8c 01       	movw	r16, r24
   3f4fa:	9d 01       	movw	r18, r26
   3f4fc:	36 95       	lsr	r19
   3f4fe:	27 95       	ror	r18
   3f500:	17 95       	ror	r17
   3f502:	07 95       	ror	r16
   3f504:	36 95       	lsr	r19
   3f506:	27 95       	ror	r18
   3f508:	17 95       	ror	r17
   3f50a:	07 95       	ror	r16
   3f50c:	07 2e       	mov	r0, r23
   3f50e:	7e e1       	ldi	r23, 0x1E	; 30
   3f510:	88 0f       	add	r24, r24
   3f512:	99 1f       	adc	r25, r25
   3f514:	aa 1f       	adc	r26, r26
   3f516:	bb 1f       	adc	r27, r27
   3f518:	7a 95       	dec	r23
   3f51a:	d1 f7       	brne	.-12     	; 0x3f510 <sha1_helper+0x46>
   3f51c:	70 2d       	mov	r23, r0
   3f51e:	80 2b       	or	r24, r16
   3f520:	91 2b       	or	r25, r17
   3f522:	a2 2b       	or	r26, r18
   3f524:	b3 2b       	or	r27, r19
   3f526:	80 87       	std	Z+8, r24	; 0x08
   3f528:	91 87       	std	Z+9, r25	; 0x09
   3f52a:	a2 87       	std	Z+10, r26	; 0x0a
   3f52c:	b3 87       	std	Z+11, r27	; 0x0b
   3f52e:	80 81       	ld	r24, Z
   3f530:	91 81       	ldd	r25, Z+1	; 0x01
   3f532:	a2 81       	ldd	r26, Z+2	; 0x02
   3f534:	b3 81       	ldd	r27, Z+3	; 0x03
   3f536:	84 83       	std	Z+4, r24	; 0x04
   3f538:	95 83       	std	Z+5, r25	; 0x05
   3f53a:	a6 83       	std	Z+6, r26	; 0x06
   3f53c:	b7 83       	std	Z+7, r27	; 0x07
   3f53e:	40 83       	st	Z, r20
   3f540:	51 83       	std	Z+1, r21	; 0x01
   3f542:	62 83       	std	Z+2, r22	; 0x02
   3f544:	73 83       	std	Z+3, r23	; 0x03
   3f546:	1f 91       	pop	r17
   3f548:	0f 91       	pop	r16
   3f54a:	08 95       	ret

0003f54c <sha1_transform>:
   3f54c:	4f 92       	push	r4
   3f54e:	5f 92       	push	r5
   3f550:	6f 92       	push	r6
   3f552:	7f 92       	push	r7
   3f554:	8f 92       	push	r8
   3f556:	9f 92       	push	r9
   3f558:	af 92       	push	r10
   3f55a:	bf 92       	push	r11
   3f55c:	cf 92       	push	r12
   3f55e:	df 92       	push	r13
   3f560:	ef 92       	push	r14
   3f562:	ff 92       	push	r15
   3f564:	0f 93       	push	r16
   3f566:	1f 93       	push	r17
   3f568:	cf 93       	push	r28
   3f56a:	df 93       	push	r29
   3f56c:	cd b7       	in	r28, 0x3d	; 61
   3f56e:	de b7       	in	r29, 0x3e	; 62
   3f570:	c4 55       	subi	r28, 0x54	; 84
   3f572:	d1 40       	sbci	r29, 0x01	; 1
   3f574:	0f b6       	in	r0, 0x3f	; 63
   3f576:	f8 94       	cli
   3f578:	de bf       	out	0x3e, r29	; 62
   3f57a:	0f be       	out	0x3f, r0	; 63
   3f57c:	cd bf       	out	0x3d, r28	; 61
   3f57e:	6c 01       	movw	r12, r24
   3f580:	ce 01       	movw	r24, r28
   3f582:	01 96       	adiw	r24, 0x01	; 1
   3f584:	5c 01       	movw	r10, r24
   3f586:	cb 01       	movw	r24, r22
   3f588:	ae 01       	movw	r20, r28
   3f58a:	4f 5b       	subi	r20, 0xBF	; 191
   3f58c:	5f 4f       	sbci	r21, 0xFF	; 255
   3f58e:	f5 01       	movw	r30, r10
   3f590:	dc 01       	movw	r26, r24
   3f592:	60 e0       	ldi	r22, 0x00	; 0
   3f594:	32 2f       	mov	r19, r18
   3f596:	21 2f       	mov	r18, r17
   3f598:	10 2f       	mov	r17, r16
   3f59a:	00 27       	eor	r16, r16
   3f59c:	7d 91       	ld	r23, X+
   3f59e:	07 2b       	or	r16, r23
   3f5a0:	6f 5f       	subi	r22, 0xFF	; 255
   3f5a2:	64 30       	cpi	r22, 0x04	; 4
   3f5a4:	b9 f7       	brne	.-18     	; 0x3f594 <sha1_transform+0x48>
   3f5a6:	01 93       	st	Z+, r16
   3f5a8:	11 93       	st	Z+, r17
   3f5aa:	21 93       	st	Z+, r18
   3f5ac:	31 93       	st	Z+, r19
   3f5ae:	04 96       	adiw	r24, 0x04	; 4
   3f5b0:	4e 17       	cp	r20, r30
   3f5b2:	5f 07       	cpc	r21, r31
   3f5b4:	69 f7       	brne	.-38     	; 0x3f590 <sha1_transform+0x44>
   3f5b6:	95 01       	movw	r18, r10
   3f5b8:	33 95       	inc	r19
   3f5ba:	f5 01       	movw	r30, r10
   3f5bc:	af 01       	movw	r20, r30
   3f5be:	34 96       	adiw	r30, 0x04	; 4
   3f5c0:	da 01       	movw	r26, r20
   3f5c2:	d4 96       	adiw	r26, 0x34	; 52
   3f5c4:	ed 90       	ld	r14, X+
   3f5c6:	fd 90       	ld	r15, X+
   3f5c8:	0d 91       	ld	r16, X+
   3f5ca:	1c 91       	ld	r17, X
   3f5cc:	d7 97       	sbiw	r26, 0x37	; 55
   3f5ce:	90 96       	adiw	r26, 0x20	; 32
   3f5d0:	4d 90       	ld	r4, X+
   3f5d2:	5d 90       	ld	r5, X+
   3f5d4:	6d 90       	ld	r6, X+
   3f5d6:	7c 90       	ld	r7, X
   3f5d8:	93 97       	sbiw	r26, 0x23	; 35
   3f5da:	e4 24       	eor	r14, r4
   3f5dc:	f5 24       	eor	r15, r5
   3f5de:	06 25       	eor	r16, r6
   3f5e0:	17 25       	eor	r17, r7
   3f5e2:	18 96       	adiw	r26, 0x08	; 8
   3f5e4:	4d 90       	ld	r4, X+
   3f5e6:	5d 90       	ld	r5, X+
   3f5e8:	6d 90       	ld	r6, X+
   3f5ea:	7c 90       	ld	r7, X
   3f5ec:	1b 97       	sbiw	r26, 0x0b	; 11
   3f5ee:	4e 24       	eor	r4, r14
   3f5f0:	5f 24       	eor	r5, r15
   3f5f2:	60 26       	eor	r6, r16
   3f5f4:	71 26       	eor	r7, r17
   3f5f6:	4d 91       	ld	r20, X+
   3f5f8:	5d 91       	ld	r21, X+
   3f5fa:	6d 91       	ld	r22, X+
   3f5fc:	7c 91       	ld	r23, X
   3f5fe:	d3 01       	movw	r26, r6
   3f600:	c2 01       	movw	r24, r4
   3f602:	84 27       	eor	r24, r20
   3f604:	95 27       	eor	r25, r21
   3f606:	a6 27       	eor	r26, r22
   3f608:	b7 27       	eor	r27, r23
   3f60a:	88 0f       	add	r24, r24
   3f60c:	99 1f       	adc	r25, r25
   3f60e:	aa 1f       	adc	r26, r26
   3f610:	bb 1f       	adc	r27, r27
   3f612:	81 1d       	adc	r24, r1
   3f614:	84 af       	std	Z+60, r24	; 0x3c
   3f616:	95 af       	std	Z+61, r25	; 0x3d
   3f618:	a6 af       	std	Z+62, r26	; 0x3e
   3f61a:	b7 af       	std	Z+63, r27	; 0x3f
   3f61c:	2e 17       	cp	r18, r30
   3f61e:	3f 07       	cpc	r19, r31
   3f620:	69 f6       	brne	.-102    	; 0x3f5bc <sha1_transform+0x70>
   3f622:	76 01       	movw	r14, r12
   3f624:	b5 e4       	ldi	r27, 0x45	; 69
   3f626:	eb 0e       	add	r14, r27
   3f628:	f1 1c       	adc	r15, r1
   3f62a:	84 e1       	ldi	r24, 0x14	; 20
   3f62c:	f7 01       	movw	r30, r14
   3f62e:	de 01       	movw	r26, r28
   3f630:	af 5b       	subi	r26, 0xBF	; 191
   3f632:	be 4f       	sbci	r27, 0xFE	; 254
   3f634:	01 90       	ld	r0, Z+
   3f636:	0d 92       	st	X+, r0
   3f638:	8a 95       	dec	r24
   3f63a:	e1 f7       	brne	.-8      	; 0x3f634 <sha1_transform+0xe8>
   3f63c:	91 2c       	mov	r9, r1
   3f63e:	a4 e1       	ldi	r26, 0x14	; 20
   3f640:	8a 2e       	mov	r8, r26
   3f642:	cb 5b       	subi	r28, 0xBB	; 187
   3f644:	de 4f       	sbci	r29, 0xFE	; 254
   3f646:	88 81       	ld	r24, Y
   3f648:	99 81       	ldd	r25, Y+1	; 0x01
   3f64a:	aa 81       	ldd	r26, Y+2	; 0x02
   3f64c:	bb 81       	ldd	r27, Y+3	; 0x03
   3f64e:	c5 54       	subi	r28, 0x45	; 69
   3f650:	d1 40       	sbci	r29, 0x01	; 1
   3f652:	c7 5b       	subi	r28, 0xB7	; 183
   3f654:	de 4f       	sbci	r29, 0xFE	; 254
   3f656:	08 81       	ld	r16, Y
   3f658:	19 81       	ldd	r17, Y+1	; 0x01
   3f65a:	2a 81       	ldd	r18, Y+2	; 0x02
   3f65c:	3b 81       	ldd	r19, Y+3	; 0x03
   3f65e:	c9 54       	subi	r28, 0x49	; 73
   3f660:	d1 40       	sbci	r29, 0x01	; 1
   3f662:	c3 5b       	subi	r28, 0xB3	; 179
   3f664:	de 4f       	sbci	r29, 0xFE	; 254
   3f666:	48 80       	ld	r4, Y
   3f668:	59 80       	ldd	r5, Y+1	; 0x01
   3f66a:	6a 80       	ldd	r6, Y+2	; 0x02
   3f66c:	7b 80       	ldd	r7, Y+3	; 0x03
   3f66e:	cd 54       	subi	r28, 0x4D	; 77
   3f670:	d1 40       	sbci	r29, 0x01	; 1
   3f672:	e3 e1       	ldi	r30, 0x13	; 19
   3f674:	e9 15       	cp	r30, r9
   3f676:	08 f4       	brcc	.+2      	; 0x3f67a <sha1_transform+0x12e>
   3f678:	9e c0       	rjmp	.+316    	; 0x3f7b6 <sha1_transform+0x26a>
   3f67a:	ac 01       	movw	r20, r24
   3f67c:	bd 01       	movw	r22, r26
   3f67e:	40 95       	com	r20
   3f680:	50 95       	com	r21
   3f682:	60 95       	com	r22
   3f684:	70 95       	com	r23
   3f686:	44 22       	and	r4, r20
   3f688:	55 22       	and	r5, r21
   3f68a:	66 22       	and	r6, r22
   3f68c:	77 22       	and	r7, r23
   3f68e:	80 23       	and	r24, r16
   3f690:	91 23       	and	r25, r17
   3f692:	a2 23       	and	r26, r18
   3f694:	b3 23       	and	r27, r19
   3f696:	48 26       	eor	r4, r24
   3f698:	59 26       	eor	r5, r25
   3f69a:	6a 26       	eor	r6, r26
   3f69c:	7b 26       	eor	r7, r27
   3f69e:	d5 01       	movw	r26, r10
   3f6a0:	4d 91       	ld	r20, X+
   3f6a2:	5d 91       	ld	r21, X+
   3f6a4:	6d 91       	ld	r22, X+
   3f6a6:	7d 91       	ld	r23, X+
   3f6a8:	5d 01       	movw	r10, r26
   3f6aa:	cf 5b       	subi	r28, 0xBF	; 191
   3f6ac:	de 4f       	sbci	r29, 0xFE	; 254
   3f6ae:	88 81       	ld	r24, Y
   3f6b0:	99 81       	ldd	r25, Y+1	; 0x01
   3f6b2:	aa 81       	ldd	r26, Y+2	; 0x02
   3f6b4:	bb 81       	ldd	r27, Y+3	; 0x03
   3f6b6:	c1 54       	subi	r28, 0x41	; 65
   3f6b8:	d1 40       	sbci	r29, 0x01	; 1
   3f6ba:	8c 01       	movw	r16, r24
   3f6bc:	9d 01       	movw	r18, r26
   3f6be:	e5 e0       	ldi	r30, 0x05	; 5
   3f6c0:	00 0f       	add	r16, r16
   3f6c2:	11 1f       	adc	r17, r17
   3f6c4:	22 1f       	adc	r18, r18
   3f6c6:	33 1f       	adc	r19, r19
   3f6c8:	ea 95       	dec	r30
   3f6ca:	d1 f7       	brne	.-12     	; 0x3f6c0 <sha1_transform+0x174>
   3f6cc:	fb e1       	ldi	r31, 0x1B	; 27
   3f6ce:	b6 95       	lsr	r27
   3f6d0:	a7 95       	ror	r26
   3f6d2:	97 95       	ror	r25
   3f6d4:	87 95       	ror	r24
   3f6d6:	fa 95       	dec	r31
   3f6d8:	d1 f7       	brne	.-12     	; 0x3f6ce <sha1_transform+0x182>
   3f6da:	80 2b       	or	r24, r16
   3f6dc:	91 2b       	or	r25, r17
   3f6de:	a2 2b       	or	r26, r18
   3f6e0:	b3 2b       	or	r27, r19
   3f6e2:	cf 5a       	subi	r28, 0xAF	; 175
   3f6e4:	de 4f       	sbci	r29, 0xFE	; 254
   3f6e6:	08 81       	ld	r16, Y
   3f6e8:	19 81       	ldd	r17, Y+1	; 0x01
   3f6ea:	2a 81       	ldd	r18, Y+2	; 0x02
   3f6ec:	3b 81       	ldd	r19, Y+3	; 0x03
   3f6ee:	c1 55       	subi	r28, 0x51	; 81
   3f6f0:	d1 40       	sbci	r29, 0x01	; 1
   3f6f2:	80 0f       	add	r24, r16
   3f6f4:	91 1f       	adc	r25, r17
   3f6f6:	a2 1f       	adc	r26, r18
   3f6f8:	b3 1f       	adc	r27, r19
   3f6fa:	8c 01       	movw	r16, r24
   3f6fc:	9d 01       	movw	r18, r26
   3f6fe:	04 0f       	add	r16, r20
   3f700:	15 1f       	adc	r17, r21
   3f702:	26 1f       	adc	r18, r22
   3f704:	37 1f       	adc	r19, r23
   3f706:	89 2d       	mov	r24, r9
   3f708:	68 2d       	mov	r22, r8
   3f70a:	62 d2       	rcall	.+1220   	; 0x3fbd0 <__udivmodqi4>
   3f70c:	b4 e0       	ldi	r27, 0x04	; 4
   3f70e:	8b 9f       	mul	r24, r27
   3f710:	f0 01       	movw	r30, r0
   3f712:	11 24       	eor	r1, r1
   3f714:	ec 0d       	add	r30, r12
   3f716:	fd 1d       	adc	r31, r13
   3f718:	e7 5a       	subi	r30, 0xA7	; 167
   3f71a:	ff 4f       	sbci	r31, 0xFF	; 255
   3f71c:	40 81       	ld	r20, Z
   3f71e:	51 81       	ldd	r21, Z+1	; 0x01
   3f720:	62 81       	ldd	r22, Z+2	; 0x02
   3f722:	73 81       	ldd	r23, Z+3	; 0x03
   3f724:	40 0f       	add	r20, r16
   3f726:	51 1f       	adc	r21, r17
   3f728:	62 1f       	adc	r22, r18
   3f72a:	73 1f       	adc	r23, r19
   3f72c:	44 0d       	add	r20, r4
   3f72e:	55 1d       	adc	r21, r5
   3f730:	66 1d       	adc	r22, r6
   3f732:	77 1d       	adc	r23, r7
   3f734:	ce 01       	movw	r24, r28
   3f736:	8f 5b       	subi	r24, 0xBF	; 191
   3f738:	9e 4f       	sbci	r25, 0xFE	; 254
   3f73a:	c7 de       	rcall	.-626    	; 0x3f4ca <sha1_helper>
   3f73c:	93 94       	inc	r9
   3f73e:	e0 e5       	ldi	r30, 0x50	; 80
   3f740:	9e 12       	cpse	r9, r30
   3f742:	7f cf       	rjmp	.-258    	; 0x3f642 <sha1_transform+0xf6>
   3f744:	f7 01       	movw	r30, r14
   3f746:	ce 01       	movw	r24, r28
   3f748:	8f 5b       	subi	r24, 0xBF	; 191
   3f74a:	9e 4f       	sbci	r25, 0xFE	; 254
   3f74c:	7c 01       	movw	r14, r24
   3f74e:	99 e5       	ldi	r25, 0x59	; 89
   3f750:	c9 0e       	add	r12, r25
   3f752:	d1 1c       	adc	r13, r1
   3f754:	41 91       	ld	r20, Z+
   3f756:	51 91       	ld	r21, Z+
   3f758:	61 91       	ld	r22, Z+
   3f75a:	71 91       	ld	r23, Z+
   3f75c:	d7 01       	movw	r26, r14
   3f75e:	0d 91       	ld	r16, X+
   3f760:	1d 91       	ld	r17, X+
   3f762:	2d 91       	ld	r18, X+
   3f764:	3d 91       	ld	r19, X+
   3f766:	7d 01       	movw	r14, r26
   3f768:	cf 01       	movw	r24, r30
   3f76a:	04 97       	sbiw	r24, 0x04	; 4
   3f76c:	40 0f       	add	r20, r16
   3f76e:	51 1f       	adc	r21, r17
   3f770:	62 1f       	adc	r22, r18
   3f772:	73 1f       	adc	r23, r19
   3f774:	dc 01       	movw	r26, r24
   3f776:	4d 93       	st	X+, r20
   3f778:	5d 93       	st	X+, r21
   3f77a:	6d 93       	st	X+, r22
   3f77c:	7c 93       	st	X, r23
   3f77e:	13 97       	sbiw	r26, 0x03	; 3
   3f780:	ce 16       	cp	r12, r30
   3f782:	df 06       	cpc	r13, r31
   3f784:	39 f7       	brne	.-50     	; 0x3f754 <sha1_transform+0x208>
   3f786:	cc 5a       	subi	r28, 0xAC	; 172
   3f788:	de 4f       	sbci	r29, 0xFE	; 254
   3f78a:	0f b6       	in	r0, 0x3f	; 63
   3f78c:	f8 94       	cli
   3f78e:	de bf       	out	0x3e, r29	; 62
   3f790:	0f be       	out	0x3f, r0	; 63
   3f792:	cd bf       	out	0x3d, r28	; 61
   3f794:	df 91       	pop	r29
   3f796:	cf 91       	pop	r28
   3f798:	1f 91       	pop	r17
   3f79a:	0f 91       	pop	r16
   3f79c:	ff 90       	pop	r15
   3f79e:	ef 90       	pop	r14
   3f7a0:	df 90       	pop	r13
   3f7a2:	cf 90       	pop	r12
   3f7a4:	bf 90       	pop	r11
   3f7a6:	af 90       	pop	r10
   3f7a8:	9f 90       	pop	r9
   3f7aa:	8f 90       	pop	r8
   3f7ac:	7f 90       	pop	r7
   3f7ae:	6f 90       	pop	r6
   3f7b0:	5f 90       	pop	r5
   3f7b2:	4f 90       	pop	r4
   3f7b4:	08 95       	ret
   3f7b6:	f7 e2       	ldi	r31, 0x27	; 39
   3f7b8:	f9 15       	cp	r31, r9
   3f7ba:	28 f0       	brcs	.+10     	; 0x3f7c6 <sha1_transform+0x27a>
   3f7bc:	80 27       	eor	r24, r16
   3f7be:	91 27       	eor	r25, r17
   3f7c0:	a2 27       	eor	r26, r18
   3f7c2:	b3 27       	eor	r27, r19
   3f7c4:	68 cf       	rjmp	.-304    	; 0x3f696 <sha1_transform+0x14a>
   3f7c6:	4b e3       	ldi	r20, 0x3B	; 59
   3f7c8:	49 15       	cp	r20, r9
   3f7ca:	c0 f3       	brcs	.-16     	; 0x3f7bc <sha1_transform+0x270>
   3f7cc:	b9 01       	movw	r22, r18
   3f7ce:	a8 01       	movw	r20, r16
   3f7d0:	44 25       	eor	r20, r4
   3f7d2:	55 25       	eor	r21, r5
   3f7d4:	66 25       	eor	r22, r6
   3f7d6:	77 25       	eor	r23, r7
   3f7d8:	84 23       	and	r24, r20
   3f7da:	95 23       	and	r25, r21
   3f7dc:	a6 23       	and	r26, r22
   3f7de:	b7 23       	and	r27, r23
   3f7e0:	40 22       	and	r4, r16
   3f7e2:	51 22       	and	r5, r17
   3f7e4:	62 22       	and	r6, r18
   3f7e6:	73 22       	and	r7, r19
   3f7e8:	56 cf       	rjmp	.-340    	; 0x3f696 <sha1_transform+0x14a>

0003f7ea <sha1_init>:
   3f7ea:	cf 93       	push	r28
   3f7ec:	df 93       	push	r29
   3f7ee:	cd b7       	in	r28, 0x3d	; 61
   3f7f0:	de b7       	in	r29, 0x3e	; 62
   3f7f2:	a4 97       	sbiw	r28, 0x24	; 36
   3f7f4:	0f b6       	in	r0, 0x3f	; 63
   3f7f6:	f8 94       	cli
   3f7f8:	de bf       	out	0x3e, r29	; 62
   3f7fa:	0f be       	out	0x3f, r0	; 63
   3f7fc:	cd bf       	out	0x3d, r28	; 61
   3f7fe:	fc 01       	movw	r30, r24
   3f800:	e0 5c       	subi	r30, 0xC0	; 192
   3f802:	ff 4f       	sbci	r31, 0xFF	; 255
   3f804:	10 82       	st	Z, r1
   3f806:	31 96       	adiw	r30, 0x01	; 1
   3f808:	10 82       	st	Z, r1
   3f80a:	11 82       	std	Z+1, r1	; 0x01
   3f80c:	12 82       	std	Z+2, r1	; 0x02
   3f80e:	13 82       	std	Z+3, r1	; 0x03
   3f810:	24 e2       	ldi	r18, 0x24	; 36
   3f812:	e0 e2       	ldi	r30, 0x20	; 32
   3f814:	f2 e0       	ldi	r31, 0x02	; 2
   3f816:	de 01       	movw	r26, r28
   3f818:	11 96       	adiw	r26, 0x01	; 1
   3f81a:	01 90       	ld	r0, Z+
   3f81c:	0d 92       	st	X+, r0
   3f81e:	2a 95       	dec	r18
   3f820:	e1 f7       	brne	.-8      	; 0x3f81a <sha1_init+0x30>
   3f822:	dc 01       	movw	r26, r24
   3f824:	ab 5b       	subi	r26, 0xBB	; 187
   3f826:	bf 4f       	sbci	r27, 0xFF	; 255
   3f828:	84 e2       	ldi	r24, 0x24	; 36
   3f82a:	fe 01       	movw	r30, r28
   3f82c:	31 96       	adiw	r30, 0x01	; 1
   3f82e:	01 90       	ld	r0, Z+
   3f830:	0d 92       	st	X+, r0
   3f832:	8a 95       	dec	r24
   3f834:	e1 f7       	brne	.-8      	; 0x3f82e <sha1_init+0x44>
   3f836:	a4 96       	adiw	r28, 0x24	; 36
   3f838:	0f b6       	in	r0, 0x3f	; 63
   3f83a:	f8 94       	cli
   3f83c:	de bf       	out	0x3e, r29	; 62
   3f83e:	0f be       	out	0x3f, r0	; 63
   3f840:	cd bf       	out	0x3d, r28	; 61
   3f842:	df 91       	pop	r29
   3f844:	cf 91       	pop	r28
   3f846:	08 95       	ret

0003f848 <sha1_update>:
   3f848:	af 92       	push	r10
   3f84a:	bf 92       	push	r11
   3f84c:	cf 92       	push	r12
   3f84e:	df 92       	push	r13
   3f850:	ef 92       	push	r14
   3f852:	ff 92       	push	r15
   3f854:	0f 93       	push	r16
   3f856:	1f 93       	push	r17
   3f858:	cf 93       	push	r28
   3f85a:	df 93       	push	r29
   3f85c:	8c 01       	movw	r16, r24
   3f85e:	eb 01       	movw	r28, r22
   3f860:	7b 01       	movw	r14, r22
   3f862:	e4 0e       	add	r14, r20
   3f864:	f5 1e       	adc	r15, r21
   3f866:	6c 01       	movw	r12, r24
   3f868:	80 e4       	ldi	r24, 0x40	; 64
   3f86a:	c8 0e       	add	r12, r24
   3f86c:	d1 1c       	adc	r13, r1
   3f86e:	58 01       	movw	r10, r16
   3f870:	e1 e4       	ldi	r30, 0x41	; 65
   3f872:	ae 0e       	add	r10, r30
   3f874:	b1 1c       	adc	r11, r1
   3f876:	ce 15       	cp	r28, r14
   3f878:	df 05       	cpc	r29, r15
   3f87a:	59 f4       	brne	.+22     	; 0x3f892 <sha1_update+0x4a>
   3f87c:	df 91       	pop	r29
   3f87e:	cf 91       	pop	r28
   3f880:	1f 91       	pop	r17
   3f882:	0f 91       	pop	r16
   3f884:	ff 90       	pop	r15
   3f886:	ef 90       	pop	r14
   3f888:	df 90       	pop	r13
   3f88a:	cf 90       	pop	r12
   3f88c:	bf 90       	pop	r11
   3f88e:	af 90       	pop	r10
   3f890:	08 95       	ret
   3f892:	f6 01       	movw	r30, r12
   3f894:	80 81       	ld	r24, Z
   3f896:	99 91       	ld	r25, Y+
   3f898:	f8 01       	movw	r30, r16
   3f89a:	e8 0f       	add	r30, r24
   3f89c:	f1 1d       	adc	r31, r1
   3f89e:	90 83       	st	Z, r25
   3f8a0:	8f 5f       	subi	r24, 0xFF	; 255
   3f8a2:	f6 01       	movw	r30, r12
   3f8a4:	80 83       	st	Z, r24
   3f8a6:	80 34       	cpi	r24, 0x40	; 64
   3f8a8:	31 f7       	brne	.-52     	; 0x3f876 <sha1_update+0x2e>
   3f8aa:	b8 01       	movw	r22, r16
   3f8ac:	c8 01       	movw	r24, r16
   3f8ae:	4e de       	rcall	.-868    	; 0x3f54c <sha1_transform>
   3f8b0:	f5 01       	movw	r30, r10
   3f8b2:	80 81       	ld	r24, Z
   3f8b4:	91 81       	ldd	r25, Z+1	; 0x01
   3f8b6:	a2 81       	ldd	r26, Z+2	; 0x02
   3f8b8:	b3 81       	ldd	r27, Z+3	; 0x03
   3f8ba:	9e 5f       	subi	r25, 0xFE	; 254
   3f8bc:	af 4f       	sbci	r26, 0xFF	; 255
   3f8be:	bf 4f       	sbci	r27, 0xFF	; 255
   3f8c0:	80 83       	st	Z, r24
   3f8c2:	91 83       	std	Z+1, r25	; 0x01
   3f8c4:	a2 83       	std	Z+2, r26	; 0x02
   3f8c6:	b3 83       	std	Z+3, r27	; 0x03
   3f8c8:	f6 01       	movw	r30, r12
   3f8ca:	10 82       	st	Z, r1
   3f8cc:	d4 cf       	rjmp	.-88     	; 0x3f876 <sha1_update+0x2e>

0003f8ce <sha1_final>:
   3f8ce:	ef 92       	push	r14
   3f8d0:	ff 92       	push	r15
   3f8d2:	0f 93       	push	r16
   3f8d4:	1f 93       	push	r17
   3f8d6:	cf 93       	push	r28
   3f8d8:	df 93       	push	r29
   3f8da:	ec 01       	movw	r28, r24
   3f8dc:	8b 01       	movw	r16, r22
   3f8de:	7c 01       	movw	r14, r24
   3f8e0:	20 e4       	ldi	r18, 0x40	; 64
   3f8e2:	e2 0e       	add	r14, r18
   3f8e4:	f1 1c       	adc	r15, r1
   3f8e6:	f7 01       	movw	r30, r14
   3f8e8:	90 81       	ld	r25, Z
   3f8ea:	81 e0       	ldi	r24, 0x01	; 1
   3f8ec:	89 0f       	add	r24, r25
   3f8ee:	de 01       	movw	r26, r28
   3f8f0:	a9 0f       	add	r26, r25
   3f8f2:	b1 1d       	adc	r27, r1
   3f8f4:	e8 2f       	mov	r30, r24
   3f8f6:	f0 e0       	ldi	r31, 0x00	; 0
   3f8f8:	98 33       	cpi	r25, 0x38	; 56
   3f8fa:	08 f0       	brcs	.+2      	; 0x3f8fe <sha1_final+0x30>
   3f8fc:	54 c0       	rjmp	.+168    	; 0x3f9a6 <sha1_final+0xd8>
   3f8fe:	90 e8       	ldi	r25, 0x80	; 128
   3f900:	9c 93       	st	X, r25
   3f902:	ec 0f       	add	r30, r28
   3f904:	fd 1f       	adc	r31, r29
   3f906:	88 33       	cpi	r24, 0x38	; 56
   3f908:	09 f0       	breq	.+2      	; 0x3f90c <sha1_final+0x3e>
   3f90a:	4a c0       	rjmp	.+148    	; 0x3f9a0 <sha1_final+0xd2>
   3f90c:	f7 01       	movw	r30, r14
   3f90e:	80 81       	ld	r24, Z
   3f910:	f8 e0       	ldi	r31, 0x08	; 8
   3f912:	8f 9f       	mul	r24, r31
   3f914:	c0 01       	movw	r24, r0
   3f916:	11 24       	eor	r1, r1
   3f918:	09 2e       	mov	r0, r25
   3f91a:	00 0c       	add	r0, r0
   3f91c:	aa 0b       	sbc	r26, r26
   3f91e:	bb 0b       	sbc	r27, r27
   3f920:	fe 01       	movw	r30, r28
   3f922:	ef 5b       	subi	r30, 0xBF	; 191
   3f924:	ff 4f       	sbci	r31, 0xFF	; 255
   3f926:	40 81       	ld	r20, Z
   3f928:	51 81       	ldd	r21, Z+1	; 0x01
   3f92a:	62 81       	ldd	r22, Z+2	; 0x02
   3f92c:	73 81       	ldd	r23, Z+3	; 0x03
   3f92e:	84 0f       	add	r24, r20
   3f930:	95 1f       	adc	r25, r21
   3f932:	a6 1f       	adc	r26, r22
   3f934:	b7 1f       	adc	r27, r23
   3f936:	9e 01       	movw	r18, r28
   3f938:	28 50       	subi	r18, 0x08	; 8
   3f93a:	31 09       	sbc	r19, r1
   3f93c:	fe 01       	movw	r30, r28
   3f93e:	87 af       	std	Z+63, r24	; 0x3f
   3f940:	89 2f       	mov	r24, r25
   3f942:	9a 2f       	mov	r25, r26
   3f944:	ab 2f       	mov	r26, r27
   3f946:	bb 27       	eor	r27, r27
   3f948:	31 97       	sbiw	r30, 0x01	; 1
   3f94a:	2e 17       	cp	r18, r30
   3f94c:	3f 07       	cpc	r19, r31
   3f94e:	b9 f7       	brne	.-18     	; 0x3f93e <sha1_final+0x70>
   3f950:	be 01       	movw	r22, r28
   3f952:	ce 01       	movw	r24, r28
   3f954:	fb dd       	rcall	.-1034   	; 0x3f54c <sha1_transform>
   3f956:	c8 01       	movw	r24, r16
   3f958:	28 e1       	ldi	r18, 0x18	; 24
   3f95a:	8e 01       	movw	r16, r28
   3f95c:	07 5a       	subi	r16, 0xA7	; 167
   3f95e:	1f 4f       	sbci	r17, 0xFF	; 255
   3f960:	fe 01       	movw	r30, r28
   3f962:	eb 5b       	subi	r30, 0xBB	; 187
   3f964:	ff 4f       	sbci	r31, 0xFF	; 255
   3f966:	dc 01       	movw	r26, r24
   3f968:	41 91       	ld	r20, Z+
   3f96a:	51 91       	ld	r21, Z+
   3f96c:	61 91       	ld	r22, Z+
   3f96e:	71 91       	ld	r23, Z+
   3f970:	02 2e       	mov	r0, r18
   3f972:	04 c0       	rjmp	.+8      	; 0x3f97c <sha1_final+0xae>
   3f974:	76 95       	lsr	r23
   3f976:	67 95       	ror	r22
   3f978:	57 95       	ror	r21
   3f97a:	47 95       	ror	r20
   3f97c:	0a 94       	dec	r0
   3f97e:	d2 f7       	brpl	.-12     	; 0x3f974 <sha1_final+0xa6>
   3f980:	4c 93       	st	X, r20
   3f982:	14 96       	adiw	r26, 0x04	; 4
   3f984:	0e 17       	cp	r16, r30
   3f986:	1f 07       	cpc	r17, r31
   3f988:	79 f7       	brne	.-34     	; 0x3f968 <sha1_final+0x9a>
   3f98a:	01 96       	adiw	r24, 0x01	; 1
   3f98c:	28 50       	subi	r18, 0x08	; 8
   3f98e:	28 3f       	cpi	r18, 0xF8	; 248
   3f990:	39 f7       	brne	.-50     	; 0x3f960 <sha1_final+0x92>
   3f992:	df 91       	pop	r29
   3f994:	cf 91       	pop	r28
   3f996:	1f 91       	pop	r17
   3f998:	0f 91       	pop	r16
   3f99a:	ff 90       	pop	r15
   3f99c:	ef 90       	pop	r14
   3f99e:	08 95       	ret
   3f9a0:	8f 5f       	subi	r24, 0xFF	; 255
   3f9a2:	11 92       	st	Z+, r1
   3f9a4:	b0 cf       	rjmp	.-160    	; 0x3f906 <sha1_final+0x38>
   3f9a6:	90 e8       	ldi	r25, 0x80	; 128
   3f9a8:	9c 93       	st	X, r25
   3f9aa:	ec 0f       	add	r30, r28
   3f9ac:	fd 1f       	adc	r31, r29
   3f9ae:	80 34       	cpi	r24, 0x40	; 64
   3f9b0:	48 f0       	brcs	.+18     	; 0x3f9c4 <sha1_final+0xf6>
   3f9b2:	be 01       	movw	r22, r28
   3f9b4:	ce 01       	movw	r24, r28
   3f9b6:	ca dd       	rcall	.-1132   	; 0x3f54c <sha1_transform>
   3f9b8:	88 e3       	ldi	r24, 0x38	; 56
   3f9ba:	fe 01       	movw	r30, r28
   3f9bc:	11 92       	st	Z+, r1
   3f9be:	8a 95       	dec	r24
   3f9c0:	e9 f7       	brne	.-6      	; 0x3f9bc <sha1_final+0xee>
   3f9c2:	a4 cf       	rjmp	.-184    	; 0x3f90c <sha1_final+0x3e>
   3f9c4:	8f 5f       	subi	r24, 0xFF	; 255
   3f9c6:	11 92       	st	Z+, r1
   3f9c8:	f2 cf       	rjmp	.-28     	; 0x3f9ae <sha1_final+0xe0>

0003f9ca <SPIInit>:


#include <avr/io.h>

void SPIInit(){
	DDRB = 0b000111;
   3f9ca:	87 e0       	ldi	r24, 0x07	; 7
   3f9cc:	84 b9       	out	0x04, r24	; 4
//	DDRB &= ~(1<<3);
//	PORTB &= ~(1<<3);
	PORTB = (1<<0);
   3f9ce:	81 e0       	ldi	r24, 0x01	; 1
   3f9d0:	85 b9       	out	0x05, r24	; 5
	SPSR = 1;
   3f9d2:	8d bd       	out	0x2d, r24	; 45
	SPCR = (1<<SPE)|(1<<MSTR);//0b01010000;
   3f9d4:	80 e5       	ldi	r24, 0x50	; 80
   3f9d6:	8c bd       	out	0x2c, r24	; 44
}
   3f9d8:	08 95       	ret

0003f9da <SPIDeInit>:

void SPIDeInit(){
	DDRB = 0;
   3f9da:	14 b8       	out	0x04, r1	; 4
	PORTB = 0;
   3f9dc:	15 b8       	out	0x05, r1	; 5
	SPSR = 0;
   3f9de:	1d bc       	out	0x2d, r1	; 45
	SPCR = 0;
   3f9e0:	1c bc       	out	0x2c, r1	; 44
}
   3f9e2:	08 95       	ret

0003f9e4 <SPIXfer>:

uint8_t SPIXfer(uint8_t data){
//	uint16_t timeOut = 0xFFFF;
	SPDR = data;
   3f9e4:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & _BV(SPIF)) == 0);
   3f9e6:	0d b4       	in	r0, 0x2d	; 45
   3f9e8:	07 fe       	sbrs	r0, 7
   3f9ea:	fd cf       	rjmp	.-6      	; 0x3f9e6 <SPIXfer+0x2>
//	&& --timeOut);
//	SPSR |= _BV(SPIF);
	data = SPDR;
   3f9ec:	8e b5       	in	r24, 0x2e	; 46
	return data;
}
   3f9ee:	08 95       	ret

0003f9f0 <UartInit>:
#include <usart.h>
#include <crc.h>

void UartInit(void)
{
	UBRRL = UBR;
   3f9f0:	88 e0       	ldi	r24, 0x08	; 8
   3f9f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRRH = (UBR >> 8);
   3f9f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSRB = (1 << RXEN) | (1 << TXEN);
   3f9fa:	88 e1       	ldi	r24, 0x18	; 24
   3f9fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
}
   3fa00:	08 95       	ret

0003fa02 <UartDeInit>:

void UartDeInit(void){
	UBRRL = 0;
   3fa02:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRRH = 0;
   3fa06:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSRB = 0;
   3fa0a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
}
   3fa0e:	08 95       	ret

0003fa10 <UartPutC>:

void UartPutC(char data){
	while (!(UCSRA & (1 << UDRE)));
   3fa10:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3fa14:	95 ff       	sbrs	r25, 5
   3fa16:	fc cf       	rjmp	.-8      	; 0x3fa10 <UartPutC>
	UDR = data;
   3fa18:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
   3fa1c:	08 95       	ret

0003fa1e <UartGetC>:

int UartGetC(uint8_t timeOut100Us){
	while (!(UCSRA & (1 << RXC)) && timeOut100Us){
   3fa1e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3fa22:	97 fd       	sbrc	r25, 7
   3fa24:	0d c0       	rjmp	.+26     	; 0x3fa40 <UartGetC+0x22>
   3fa26:	81 11       	cpse	r24, r1
   3fa28:	03 c0       	rjmp	.+6      	; 0x3fa30 <UartGetC+0x12>
		_delay_us(100);
		if (timeOut100Us)
			timeOut100Us--;
	}
	if (timeOut100Us == 0)
		return -1;
   3fa2a:	8f ef       	ldi	r24, 0xFF	; 255
   3fa2c:	9f ef       	ldi	r25, 0xFF	; 255
	return UDR;
}
   3fa2e:	08 95       	ret
   3fa30:	ef e8       	ldi	r30, 0x8F	; 143
   3fa32:	f1 e0       	ldi	r31, 0x01	; 1
   3fa34:	31 97       	sbiw	r30, 0x01	; 1
   3fa36:	f1 f7       	brne	.-4      	; 0x3fa34 <UartGetC+0x16>
   3fa38:	00 c0       	rjmp	.+0      	; 0x3fa3a <UartGetC+0x1c>
   3fa3a:	00 00       	nop
			timeOut100Us--;
   3fa3c:	81 50       	subi	r24, 0x01	; 1
   3fa3e:	ef cf       	rjmp	.-34     	; 0x3fa1e <UartGetC>
	if (timeOut100Us == 0)
   3fa40:	88 23       	and	r24, r24
   3fa42:	99 f3       	breq	.-26     	; 0x3fa2a <UartGetC+0xc>
	return UDR;
   3fa44:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
   3fa48:	90 e0       	ldi	r25, 0x00	; 0
   3fa4a:	08 95       	ret

0003fa4c <UartRead>:

uint8_t UartRead(uint32_t address, uint8_t* data, uint16_t dataLength){
   3fa4c:	2f 92       	push	r2
   3fa4e:	3f 92       	push	r3
   3fa50:	4f 92       	push	r4
   3fa52:	5f 92       	push	r5
   3fa54:	6f 92       	push	r6
   3fa56:	7f 92       	push	r7
   3fa58:	8f 92       	push	r8
   3fa5a:	9f 92       	push	r9
   3fa5c:	af 92       	push	r10
   3fa5e:	bf 92       	push	r11
   3fa60:	cf 92       	push	r12
   3fa62:	df 92       	push	r13
   3fa64:	ef 92       	push	r14
   3fa66:	ff 92       	push	r15
   3fa68:	0f 93       	push	r16
   3fa6a:	1f 93       	push	r17
   3fa6c:	cf 93       	push	r28
   3fa6e:	df 93       	push	r29
   3fa70:	c6 2e       	mov	r12, r22
   3fa72:	5a 01       	movw	r10, r20
   3fa74:	e9 01       	movw	r28, r18
		UartPutC('<');
		UartPutC('r');
		uint16_t crc = 0;
		UartPutC(address);
		crc = CRC(crc, (uint8_t)address);
		UartPutC(address>>8);
   3fa76:	27 2e       	mov	r2, r23
		crc = CRC(crc, (uint8_t)(address>>8));
		UartPutC(address>>16);
   3fa78:	38 2e       	mov	r3, r24
		crc = CRC(crc, (uint8_t)(address>>16));
		UartPutC(address>>24);
   3fa7a:	49 2e       	mov	r4, r25
		crc = CRC(crc, (uint8_t)(address>>24));
		UartPutC(dataLength);
		crc = CRC(crc, (uint8_t)(dataLength));
		UartPutC(dataLength>>8);
   3fa7c:	5d 2e       	mov	r5, r29
	uint8_t loop = 0;
   3fa7e:	d1 2c       	mov	r13, r1
   3fa80:	4a 01       	movw	r8, r20
   3fa82:	82 0e       	add	r8, r18
   3fa84:	93 1e       	adc	r9, r19
		loop++;
   3fa86:	d3 94       	inc	r13
		UartPutC('<');
   3fa88:	8c e3       	ldi	r24, 0x3C	; 60
		UartPutC('r');
   3fa8a:	c2 df       	rcall	.-124    	; 0x3fa10 <UartPutC>
		UartPutC(address);
   3fa8c:	82 e7       	ldi	r24, 0x72	; 114
   3fa8e:	c0 df       	rcall	.-128    	; 0x3fa10 <UartPutC>
   3fa90:	8c 2d       	mov	r24, r12
		crc = CRC(crc, (uint8_t)address);
   3fa92:	be df       	rcall	.-132    	; 0x3fa10 <UartPutC>
   3fa94:	6c 2d       	mov	r22, r12
   3fa96:	90 e0       	ldi	r25, 0x00	; 0
   3fa98:	80 e0       	ldi	r24, 0x00	; 0
   3fa9a:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		UartPutC(address>>8);
   3fa9e:	8c 01       	movw	r16, r24
   3faa0:	82 2d       	mov	r24, r2
		crc = CRC(crc, (uint8_t)(address>>8));
   3faa2:	b6 df       	rcall	.-148    	; 0x3fa10 <UartPutC>
   3faa4:	62 2d       	mov	r22, r2
   3faa6:	c8 01       	movw	r24, r16
   3faa8:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		UartPutC(address>>16);
   3faac:	8c 01       	movw	r16, r24
   3faae:	83 2d       	mov	r24, r3
		crc = CRC(crc, (uint8_t)(address>>16));
   3fab0:	af df       	rcall	.-162    	; 0x3fa10 <UartPutC>
   3fab2:	63 2d       	mov	r22, r3
   3fab4:	c8 01       	movw	r24, r16
   3fab6:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		UartPutC(address>>24);
   3faba:	8c 01       	movw	r16, r24
		crc = CRC(crc, (uint8_t)(address>>24));
   3fabc:	84 2d       	mov	r24, r4
   3fabe:	a8 df       	rcall	.-176    	; 0x3fa10 <UartPutC>
   3fac0:	64 2d       	mov	r22, r4
   3fac2:	c8 01       	movw	r24, r16
		UartPutC(dataLength);
   3fac4:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		crc = CRC(crc, (uint8_t)(dataLength));
   3fac8:	8c 01       	movw	r16, r24
   3faca:	8c 2f       	mov	r24, r28
   3facc:	a1 df       	rcall	.-190    	; 0x3fa10 <UartPutC>
   3face:	6c 2f       	mov	r22, r28
   3fad0:	c8 01       	movw	r24, r16
		UartPutC(dataLength>>8);
   3fad2:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		crc = CRC(crc, (uint8_t)(dataLength>>8));
   3fad6:	8c 01       	movw	r16, r24
   3fad8:	85 2d       	mov	r24, r5
   3fada:	9a df       	rcall	.-204    	; 0x3fa10 <UartPutC>
   3fadc:	65 2d       	mov	r22, r5
		UartPutC(dataLength>>16);
   3fade:	c8 01       	movw	r24, r16
   3fae0:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		crc = CRC(crc, (uint8_t)(dataLength>>16));
   3fae4:	8c 01       	movw	r16, r24
   3fae6:	80 e0       	ldi	r24, 0x00	; 0
   3fae8:	93 df       	rcall	.-218    	; 0x3fa10 <UartPutC>
		UartPutC(dataLength>>24);
   3faea:	60 e0       	ldi	r22, 0x00	; 0
   3faec:	c8 01       	movw	r24, r16
   3faee:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		crc = CRC(crc, (uint8_t)(dataLength>>24));
   3faf2:	8c 01       	movw	r16, r24
   3faf4:	80 e0       	ldi	r24, 0x00	; 0
   3faf6:	8c df       	rcall	.-232    	; 0x3fa10 <UartPutC>
		UartPutC('\0');
   3faf8:	60 e0       	ldi	r22, 0x00	; 0
   3fafa:	c8 01       	movw	r24, r16
   3fafc:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		crc = CRC(crc, 0);
   3fb00:	8c 01       	movw	r16, r24
   3fb02:	80 e0       	ldi	r24, 0x00	; 0
   3fb04:	85 df       	rcall	.-246    	; 0x3fa10 <UartPutC>
		UartPutC('\0');
   3fb06:	60 e0       	ldi	r22, 0x00	; 0
   3fb08:	c8 01       	movw	r24, r16
		crc = CRC(crc, 0);
   3fb0a:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		UartPutC('\0');
   3fb0e:	8c 01       	movw	r16, r24
   3fb10:	80 e0       	ldi	r24, 0x00	; 0
		crc = CRC(crc, 0);
   3fb12:	7e df       	rcall	.-260    	; 0x3fa10 <UartPutC>
   3fb14:	60 e0       	ldi	r22, 0x00	; 0
   3fb16:	c8 01       	movw	r24, r16
   3fb18:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		UartPutC(crc);
		UartPutC(crc>>8);
   3fb1c:	8c 01       	movw	r16, r24
		UartPutC('>');
   3fb1e:	80 e0       	ldi	r24, 0x00	; 0
   3fb20:	77 df       	rcall	.-274    	; 0x3fa10 <UartPutC>
   3fb22:	60 e0       	ldi	r22, 0x00	; 0
		int d = UartGetC(255);
   3fb24:	c8 01       	movw	r24, r16
   3fb26:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
		if (d < 0)
   3fb2a:	19 2f       	mov	r17, r25
   3fb2c:	71 df       	rcall	.-286    	; 0x3fa10 <UartPutC>
			continue;
		if (d == 1){
   3fb2e:	81 2f       	mov	r24, r17
   3fb30:	6f df       	rcall	.-290    	; 0x3fa10 <UartPutC>
   3fb32:	8e e3       	ldi	r24, 0x3E	; 62
			UartGetC(2);
   3fb34:	6d df       	rcall	.-294    	; 0x3fa10 <UartPutC>
   3fb36:	8f ef       	ldi	r24, 0xFF	; 255
   3fb38:	72 df       	rcall	.-284    	; 0x3fa1e <UartGetC>
			UartGetC(2);
   3fb3a:	97 fd       	sbrc	r25, 7
   3fb3c:	07 c0       	rjmp	.+14     	; 0x3fb4c <UartRead+0x100>
   3fb3e:	81 30       	cpi	r24, 0x01	; 1
	while(retry--){
   3fb40:	91 05       	cpc	r25, r1
   3fb42:	01 f5       	brne	.+64     	; 0x3fb84 <UartRead+0x138>
   3fb44:	82 e0       	ldi	r24, 0x02	; 2
			ccrc |= ((uint16_t)UartGetC(2)) << 8;
			if (crc == ccrc)
				return 1;
		}
	}
	return 0;
   3fb46:	6b df       	rcall	.-298    	; 0x3fa1e <UartGetC>
}
   3fb48:	82 e0       	ldi	r24, 0x02	; 2
   3fb4a:	69 df       	rcall	.-302    	; 0x3fa1e <UartGetC>
   3fb4c:	f8 e0       	ldi	r31, 0x08	; 8
   3fb4e:	df 12       	cpse	r13, r31
   3fb50:	14 c0       	rjmp	.+40     	; 0x3fb7a <UartRead+0x12e>
   3fb52:	80 e0       	ldi	r24, 0x00	; 0
   3fb54:	df 91       	pop	r29
   3fb56:	cf 91       	pop	r28
   3fb58:	1f 91       	pop	r17
   3fb5a:	0f 91       	pop	r16
   3fb5c:	ff 90       	pop	r15
   3fb5e:	ef 90       	pop	r14
   3fb60:	df 90       	pop	r13
   3fb62:	cf 90       	pop	r12
   3fb64:	bf 90       	pop	r11
   3fb66:	af 90       	pop	r10
   3fb68:	9f 90       	pop	r9
			while(UartGetC(10) >= 0);
   3fb6a:	8f 90       	pop	r8
   3fb6c:	7f 90       	pop	r7
   3fb6e:	6f 90       	pop	r6
   3fb70:	5f 90       	pop	r5
   3fb72:	4f 90       	pop	r4
		}else if (d == 0){
   3fb74:	3f 90       	pop	r3
   3fb76:	2f 90       	pop	r2
			crc = CRC(0, 0);
   3fb78:	08 95       	ret
   3fb7a:	8a e0       	ldi	r24, 0x0A	; 10
   3fb7c:	50 df       	rcall	.-352    	; 0x3fa1e <UartGetC>
   3fb7e:	97 ff       	sbrs	r25, 7
   3fb80:	fc cf       	rjmp	.-8      	; 0x3fb7a <UartRead+0x12e>
			uint8_t* dd = data;
   3fb82:	81 cf       	rjmp	.-254    	; 0x3fa86 <UartRead+0x3a>
			while(dl--){
   3fb84:	89 2b       	or	r24, r25
   3fb86:	11 f7       	brne	.-60     	; 0x3fb4c <UartRead+0x100>
   3fb88:	60 e0       	ldi	r22, 0x00	; 0
			uint16_t ccrc = UartGetC(2);
   3fb8a:	90 e0       	ldi	r25, 0x00	; 0
   3fb8c:	80 e0       	ldi	r24, 0x00	; 0
   3fb8e:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
			ccrc |= ((uint16_t)UartGetC(2)) << 8;
   3fb92:	7c 01       	movw	r14, r24
   3fb94:	85 01       	movw	r16, r10
   3fb96:	08 15       	cp	r16, r8
   3fb98:	19 05       	cpc	r17, r9
   3fb9a:	69 f4       	brne	.+26     	; 0x3fbb6 <UartRead+0x16a>
   3fb9c:	82 e0       	ldi	r24, 0x02	; 2
			if (crc == ccrc)
   3fb9e:	3f df       	rcall	.-386    	; 0x3fa1e <UartGetC>
   3fba0:	8c 01       	movw	r16, r24
   3fba2:	82 e0       	ldi	r24, 0x02	; 2
				return 1;
   3fba4:	3c df       	rcall	.-392    	; 0x3fa1e <UartGetC>
   3fba6:	61 2c       	mov	r6, r1
				 d = UartGetC(2);
   3fba8:	06 29       	or	r16, r6
   3fbaa:	18 2b       	or	r17, r24
   3fbac:	e0 16       	cp	r14, r16
				if (d < 0)
   3fbae:	f1 06       	cpc	r15, r17
   3fbb0:	69 f6       	brne	.-102    	; 0x3fb4c <UartRead+0x100>
				*dd = d;
   3fbb2:	81 e0       	ldi	r24, 0x01	; 1
   3fbb4:	cf cf       	rjmp	.-98     	; 0x3fb54 <UartRead+0x108>
   3fbb6:	82 e0       	ldi	r24, 0x02	; 2
				crc = CRC(crc, d);
   3fbb8:	32 df       	rcall	.-412    	; 0x3fa1e <UartGetC>
   3fbba:	97 fd       	sbrc	r25, 7
   3fbbc:	c7 cf       	rjmp	.-114    	; 0x3fb4c <UartRead+0x100>
   3fbbe:	f8 01       	movw	r30, r16
   3fbc0:	81 93       	st	Z+, r24
   3fbc2:	8f 01       	movw	r16, r30
   3fbc4:	68 2f       	mov	r22, r24
   3fbc6:	c7 01       	movw	r24, r14
   3fbc8:	0f 94 60 f2 	call	0x3e4c0	; 0x3e4c0 <CRC>
   3fbcc:	7c 01       	movw	r14, r24
   3fbce:	e3 cf       	rjmp	.-58     	; 0x3fb96 <UartRead+0x14a>

0003fbd0 <__udivmodqi4>:
   3fbd0:	99 1b       	sub	r25, r25
   3fbd2:	79 e0       	ldi	r23, 0x09	; 9
   3fbd4:	04 c0       	rjmp	.+8      	; 0x3fbde <__udivmodqi4_ep>

0003fbd6 <__udivmodqi4_loop>:
   3fbd6:	99 1f       	adc	r25, r25
   3fbd8:	96 17       	cp	r25, r22
   3fbda:	08 f0       	brcs	.+2      	; 0x3fbde <__udivmodqi4_ep>
   3fbdc:	96 1b       	sub	r25, r22

0003fbde <__udivmodqi4_ep>:
   3fbde:	88 1f       	adc	r24, r24
   3fbe0:	7a 95       	dec	r23
   3fbe2:	c9 f7       	brne	.-14     	; 0x3fbd6 <__udivmodqi4_loop>
   3fbe4:	80 95       	com	r24
   3fbe6:	08 95       	ret

0003fbe8 <__udivmodsi4>:
   3fbe8:	a1 e2       	ldi	r26, 0x21	; 33
   3fbea:	1a 2e       	mov	r1, r26
   3fbec:	aa 1b       	sub	r26, r26
   3fbee:	bb 1b       	sub	r27, r27
   3fbf0:	fd 01       	movw	r30, r26
   3fbf2:	0d c0       	rjmp	.+26     	; 0x3fc0e <__udivmodsi4_ep>

0003fbf4 <__udivmodsi4_loop>:
   3fbf4:	aa 1f       	adc	r26, r26
   3fbf6:	bb 1f       	adc	r27, r27
   3fbf8:	ee 1f       	adc	r30, r30
   3fbfa:	ff 1f       	adc	r31, r31
   3fbfc:	a2 17       	cp	r26, r18
   3fbfe:	b3 07       	cpc	r27, r19
   3fc00:	e4 07       	cpc	r30, r20
   3fc02:	f5 07       	cpc	r31, r21
   3fc04:	20 f0       	brcs	.+8      	; 0x3fc0e <__udivmodsi4_ep>
   3fc06:	a2 1b       	sub	r26, r18
   3fc08:	b3 0b       	sbc	r27, r19
   3fc0a:	e4 0b       	sbc	r30, r20
   3fc0c:	f5 0b       	sbc	r31, r21

0003fc0e <__udivmodsi4_ep>:
   3fc0e:	66 1f       	adc	r22, r22
   3fc10:	77 1f       	adc	r23, r23
   3fc12:	88 1f       	adc	r24, r24
   3fc14:	99 1f       	adc	r25, r25
   3fc16:	1a 94       	dec	r1
   3fc18:	69 f7       	brne	.-38     	; 0x3fbf4 <__udivmodsi4_loop>
   3fc1a:	60 95       	com	r22
   3fc1c:	70 95       	com	r23
   3fc1e:	80 95       	com	r24
   3fc20:	90 95       	com	r25
   3fc22:	9b 01       	movw	r18, r22
   3fc24:	ac 01       	movw	r20, r24
   3fc26:	bd 01       	movw	r22, r26
   3fc28:	cf 01       	movw	r24, r30
   3fc2a:	08 95       	ret

0003fc2c <__umulhisi3>:
   3fc2c:	a2 9f       	mul	r26, r18
   3fc2e:	b0 01       	movw	r22, r0
   3fc30:	b3 9f       	mul	r27, r19
   3fc32:	c0 01       	movw	r24, r0
   3fc34:	a3 9f       	mul	r26, r19
   3fc36:	70 0d       	add	r23, r0
   3fc38:	81 1d       	adc	r24, r1
   3fc3a:	11 24       	eor	r1, r1
   3fc3c:	91 1d       	adc	r25, r1
   3fc3e:	b2 9f       	mul	r27, r18
   3fc40:	70 0d       	add	r23, r0
   3fc42:	81 1d       	adc	r24, r1
   3fc44:	11 24       	eor	r1, r1
   3fc46:	91 1d       	adc	r25, r1
   3fc48:	08 95       	ret

0003fc4a <__muluhisi3>:
   3fc4a:	f0 df       	rcall	.-32     	; 0x3fc2c <__umulhisi3>
   3fc4c:	a5 9f       	mul	r26, r21
   3fc4e:	90 0d       	add	r25, r0
   3fc50:	b4 9f       	mul	r27, r20
   3fc52:	90 0d       	add	r25, r0
   3fc54:	a4 9f       	mul	r26, r20
   3fc56:	80 0d       	add	r24, r0
   3fc58:	91 1d       	adc	r25, r1
   3fc5a:	11 24       	eor	r1, r1
   3fc5c:	08 95       	ret

0003fc5e <memcmp>:
   3fc5e:	fb 01       	movw	r30, r22
   3fc60:	dc 01       	movw	r26, r24
   3fc62:	04 c0       	rjmp	.+8      	; 0x3fc6c <memcmp+0xe>
   3fc64:	8d 91       	ld	r24, X+
   3fc66:	01 90       	ld	r0, Z+
   3fc68:	80 19       	sub	r24, r0
   3fc6a:	21 f4       	brne	.+8      	; 0x3fc74 <memcmp+0x16>
   3fc6c:	41 50       	subi	r20, 0x01	; 1
   3fc6e:	50 40       	sbci	r21, 0x00	; 0
   3fc70:	c8 f7       	brcc	.-14     	; 0x3fc64 <memcmp+0x6>
   3fc72:	88 1b       	sub	r24, r24
   3fc74:	99 0b       	sbc	r25, r25
   3fc76:	08 95       	ret

0003fc78 <memset>:
   3fc78:	dc 01       	movw	r26, r24
   3fc7a:	01 c0       	rjmp	.+2      	; 0x3fc7e <memset+0x6>
   3fc7c:	6d 93       	st	X+, r22
   3fc7e:	41 50       	subi	r20, 0x01	; 1
   3fc80:	50 40       	sbci	r21, 0x00	; 0
   3fc82:	e0 f7       	brcc	.-8      	; 0x3fc7c <memset+0x4>
   3fc84:	08 95       	ret

0003fc86 <_exit>:
   3fc86:	f8 94       	cli

0003fc88 <__stop_program>:
   3fc88:	ff cf       	rjmp	.-2      	; 0x3fc88 <__stop_program>
