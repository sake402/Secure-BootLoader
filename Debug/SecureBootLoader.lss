
SecureBootLoader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000258  00800200  0003ff2a  00001fbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f2a  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011e  00800458  00800458  00002216  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002216  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000380  00000000  00000000  00002228  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004905  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bc1  00000000  00000000  00006ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001328  00000000  00000000  00008a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009f0  00000000  00000000  00009d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bc3  00000000  00000000  0000a788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000390a  00000000  00000000  0000b34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000300  00000000  00000000  0000ec55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	71 c0       	rjmp	.+226    	; 0x3e0e4 <__ctors_end>
   3e002:	00 00       	nop
   3e004:	8f c0       	rjmp	.+286    	; 0x3e124 <__bad_interrupt>
   3e006:	00 00       	nop
   3e008:	8d c0       	rjmp	.+282    	; 0x3e124 <__bad_interrupt>
   3e00a:	00 00       	nop
   3e00c:	8b c0       	rjmp	.+278    	; 0x3e124 <__bad_interrupt>
   3e00e:	00 00       	nop
   3e010:	89 c0       	rjmp	.+274    	; 0x3e124 <__bad_interrupt>
   3e012:	00 00       	nop
   3e014:	87 c0       	rjmp	.+270    	; 0x3e124 <__bad_interrupt>
   3e016:	00 00       	nop
   3e018:	85 c0       	rjmp	.+266    	; 0x3e124 <__bad_interrupt>
   3e01a:	00 00       	nop
   3e01c:	83 c0       	rjmp	.+262    	; 0x3e124 <__bad_interrupt>
   3e01e:	00 00       	nop
   3e020:	81 c0       	rjmp	.+258    	; 0x3e124 <__bad_interrupt>
   3e022:	00 00       	nop
   3e024:	7f c0       	rjmp	.+254    	; 0x3e124 <__bad_interrupt>
   3e026:	00 00       	nop
   3e028:	7d c0       	rjmp	.+250    	; 0x3e124 <__bad_interrupt>
   3e02a:	00 00       	nop
   3e02c:	7b c0       	rjmp	.+246    	; 0x3e124 <__bad_interrupt>
   3e02e:	00 00       	nop
   3e030:	79 c0       	rjmp	.+242    	; 0x3e124 <__bad_interrupt>
   3e032:	00 00       	nop
   3e034:	77 c0       	rjmp	.+238    	; 0x3e124 <__bad_interrupt>
   3e036:	00 00       	nop
   3e038:	75 c0       	rjmp	.+234    	; 0x3e124 <__bad_interrupt>
   3e03a:	00 00       	nop
   3e03c:	73 c0       	rjmp	.+230    	; 0x3e124 <__bad_interrupt>
   3e03e:	00 00       	nop
   3e040:	71 c0       	rjmp	.+226    	; 0x3e124 <__bad_interrupt>
   3e042:	00 00       	nop
   3e044:	6f c0       	rjmp	.+222    	; 0x3e124 <__bad_interrupt>
   3e046:	00 00       	nop
   3e048:	6d c0       	rjmp	.+218    	; 0x3e124 <__bad_interrupt>
   3e04a:	00 00       	nop
   3e04c:	6b c0       	rjmp	.+214    	; 0x3e124 <__bad_interrupt>
   3e04e:	00 00       	nop
   3e050:	69 c0       	rjmp	.+210    	; 0x3e124 <__bad_interrupt>
   3e052:	00 00       	nop
   3e054:	67 c0       	rjmp	.+206    	; 0x3e124 <__bad_interrupt>
   3e056:	00 00       	nop
   3e058:	65 c0       	rjmp	.+202    	; 0x3e124 <__bad_interrupt>
   3e05a:	00 00       	nop
   3e05c:	63 c0       	rjmp	.+198    	; 0x3e124 <__bad_interrupt>
   3e05e:	00 00       	nop
   3e060:	61 c0       	rjmp	.+194    	; 0x3e124 <__bad_interrupt>
   3e062:	00 00       	nop
   3e064:	5f c0       	rjmp	.+190    	; 0x3e124 <__bad_interrupt>
   3e066:	00 00       	nop
   3e068:	5d c0       	rjmp	.+186    	; 0x3e124 <__bad_interrupt>
   3e06a:	00 00       	nop
   3e06c:	5b c0       	rjmp	.+182    	; 0x3e124 <__bad_interrupt>
   3e06e:	00 00       	nop
   3e070:	59 c0       	rjmp	.+178    	; 0x3e124 <__bad_interrupt>
   3e072:	00 00       	nop
   3e074:	57 c0       	rjmp	.+174    	; 0x3e124 <__bad_interrupt>
   3e076:	00 00       	nop
   3e078:	55 c0       	rjmp	.+170    	; 0x3e124 <__bad_interrupt>
   3e07a:	00 00       	nop
   3e07c:	53 c0       	rjmp	.+166    	; 0x3e124 <__bad_interrupt>
   3e07e:	00 00       	nop
   3e080:	51 c0       	rjmp	.+162    	; 0x3e124 <__bad_interrupt>
   3e082:	00 00       	nop
   3e084:	4f c0       	rjmp	.+158    	; 0x3e124 <__bad_interrupt>
   3e086:	00 00       	nop
   3e088:	4d c0       	rjmp	.+154    	; 0x3e124 <__bad_interrupt>
   3e08a:	00 00       	nop
   3e08c:	4b c0       	rjmp	.+150    	; 0x3e124 <__bad_interrupt>
   3e08e:	00 00       	nop
   3e090:	49 c0       	rjmp	.+146    	; 0x3e124 <__bad_interrupt>
   3e092:	00 00       	nop
   3e094:	47 c0       	rjmp	.+142    	; 0x3e124 <__bad_interrupt>
   3e096:	00 00       	nop
   3e098:	45 c0       	rjmp	.+138    	; 0x3e124 <__bad_interrupt>
   3e09a:	00 00       	nop
   3e09c:	43 c0       	rjmp	.+134    	; 0x3e124 <__bad_interrupt>
   3e09e:	00 00       	nop
   3e0a0:	41 c0       	rjmp	.+130    	; 0x3e124 <__bad_interrupt>
   3e0a2:	00 00       	nop
   3e0a4:	3f c0       	rjmp	.+126    	; 0x3e124 <__bad_interrupt>
   3e0a6:	00 00       	nop
   3e0a8:	3d c0       	rjmp	.+122    	; 0x3e124 <__bad_interrupt>
   3e0aa:	00 00       	nop
   3e0ac:	3b c0       	rjmp	.+118    	; 0x3e124 <__bad_interrupt>
   3e0ae:	00 00       	nop
   3e0b0:	39 c0       	rjmp	.+114    	; 0x3e124 <__bad_interrupt>
   3e0b2:	00 00       	nop
   3e0b4:	37 c0       	rjmp	.+110    	; 0x3e124 <__bad_interrupt>
   3e0b6:	00 00       	nop
   3e0b8:	35 c0       	rjmp	.+106    	; 0x3e124 <__bad_interrupt>
   3e0ba:	00 00       	nop
   3e0bc:	33 c0       	rjmp	.+102    	; 0x3e124 <__bad_interrupt>
   3e0be:	00 00       	nop
   3e0c0:	31 c0       	rjmp	.+98     	; 0x3e124 <__bad_interrupt>
   3e0c2:	00 00       	nop
   3e0c4:	2f c0       	rjmp	.+94     	; 0x3e124 <__bad_interrupt>
   3e0c6:	00 00       	nop
   3e0c8:	2d c0       	rjmp	.+90     	; 0x3e124 <__bad_interrupt>
   3e0ca:	00 00       	nop
   3e0cc:	2b c0       	rjmp	.+86     	; 0x3e124 <__bad_interrupt>
   3e0ce:	00 00       	nop
   3e0d0:	29 c0       	rjmp	.+82     	; 0x3e124 <__bad_interrupt>
   3e0d2:	00 00       	nop
   3e0d4:	27 c0       	rjmp	.+78     	; 0x3e124 <__bad_interrupt>
   3e0d6:	00 00       	nop
   3e0d8:	25 c0       	rjmp	.+74     	; 0x3e124 <__bad_interrupt>
   3e0da:	00 00       	nop
   3e0dc:	23 c0       	rjmp	.+70     	; 0x3e124 <__bad_interrupt>
   3e0de:	00 00       	nop
   3e0e0:	21 c0       	rjmp	.+66     	; 0x3e124 <__bad_interrupt>
	...

0003e0e4 <__ctors_end>:
   3e0e4:	11 24       	eor	r1, r1
   3e0e6:	1f be       	out	0x3f, r1	; 63
   3e0e8:	cf ef       	ldi	r28, 0xFF	; 255
   3e0ea:	d1 e2       	ldi	r29, 0x21	; 33
   3e0ec:	de bf       	out	0x3e, r29	; 62
   3e0ee:	cd bf       	out	0x3d, r28	; 61
   3e0f0:	01 e0       	ldi	r16, 0x01	; 1
   3e0f2:	0c bf       	out	0x3c, r16	; 60

0003e0f4 <__do_copy_data>:
   3e0f4:	14 e0       	ldi	r17, 0x04	; 4
   3e0f6:	a0 e0       	ldi	r26, 0x00	; 0
   3e0f8:	b2 e0       	ldi	r27, 0x02	; 2
   3e0fa:	ea e2       	ldi	r30, 0x2A	; 42
   3e0fc:	ff ef       	ldi	r31, 0xFF	; 255
   3e0fe:	03 e0       	ldi	r16, 0x03	; 3
   3e100:	0b bf       	out	0x3b, r16	; 59
   3e102:	02 c0       	rjmp	.+4      	; 0x3e108 <__do_copy_data+0x14>
   3e104:	07 90       	elpm	r0, Z+
   3e106:	0d 92       	st	X+, r0
   3e108:	a8 35       	cpi	r26, 0x58	; 88
   3e10a:	b1 07       	cpc	r27, r17
   3e10c:	d9 f7       	brne	.-10     	; 0x3e104 <__do_copy_data+0x10>

0003e10e <__do_clear_bss>:
   3e10e:	15 e0       	ldi	r17, 0x05	; 5
   3e110:	a8 e5       	ldi	r26, 0x58	; 88
   3e112:	b4 e0       	ldi	r27, 0x04	; 4
   3e114:	01 c0       	rjmp	.+2      	; 0x3e118 <.do_clear_bss_start>

0003e116 <.do_clear_bss_loop>:
   3e116:	1d 92       	st	X+, r1

0003e118 <.do_clear_bss_start>:
   3e118:	a6 37       	cpi	r26, 0x76	; 118
   3e11a:	b1 07       	cpc	r27, r17
   3e11c:	e1 f7       	brne	.-8      	; 0x3e116 <.do_clear_bss_loop>
   3e11e:	f4 d4       	rcall	.+2536   	; 0x3eb08 <main>
   3e120:	0d 94 93 ff 	jmp	0x3ff26	; 0x3ff26 <_exit>

0003e124 <__bad_interrupt>:
   3e124:	6d cf       	rjmp	.-294    	; 0x3e000 <__vectors>

0003e126 <AddRoundKey>:
}

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
   3e126:	cf 93       	push	r28
   3e128:	df 93       	push	r29
   3e12a:	60 91 4c 05 	lds	r22, 0x054C
   3e12e:	70 91 4d 05 	lds	r23, 0x054D
   3e132:	90 e1       	ldi	r25, 0x10	; 16
   3e134:	89 9f       	mul	r24, r25
   3e136:	e0 01       	movw	r28, r0
   3e138:	11 24       	eor	r1, r1
  uint8_t i,j;
  for (i=0;i<4;++i)
  {
    for (j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
   3e13a:	40 e0       	ldi	r20, 0x00	; 0
   3e13c:	50 e0       	ldi	r21, 0x00	; 0
   3e13e:	fa 01       	movw	r30, r20
   3e140:	ec 0f       	add	r30, r28
   3e142:	fd 1f       	adc	r31, r29
   3e144:	e4 5a       	subi	r30, 0xA4	; 164
   3e146:	fb 4f       	sbci	r31, 0xFB	; 251
}

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
   3e148:	20 e0       	ldi	r18, 0x00	; 0
   3e14a:	30 e0       	ldi	r19, 0x00	; 0
   3e14c:	db 01       	movw	r26, r22
   3e14e:	a2 0f       	add	r26, r18
   3e150:	b3 1f       	adc	r27, r19
  uint8_t i,j;
  for (i=0;i<4;++i)
  {
    for (j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
   3e152:	91 91       	ld	r25, Z+
   3e154:	8c 91       	ld	r24, X
   3e156:	98 27       	eor	r25, r24
   3e158:	9c 93       	st	X, r25
   3e15a:	2f 5f       	subi	r18, 0xFF	; 255
   3e15c:	3f 4f       	sbci	r19, 0xFF	; 255
static void AddRoundKey(uint8_t round)
{
  uint8_t i,j;
  for (i=0;i<4;++i)
  {
    for (j = 0; j < 4; ++j)
   3e15e:	24 30       	cpi	r18, 0x04	; 4
   3e160:	31 05       	cpc	r19, r1
   3e162:	a1 f7       	brne	.-24     	; 0x3e14c <AddRoundKey+0x26>
   3e164:	4c 5f       	subi	r20, 0xFC	; 252
   3e166:	5f 4f       	sbci	r21, 0xFF	; 255
   3e168:	6c 5f       	subi	r22, 0xFC	; 252
   3e16a:	7f 4f       	sbci	r23, 0xFF	; 255
// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
  uint8_t i,j;
  for (i=0;i<4;++i)
   3e16c:	40 31       	cpi	r20, 0x10	; 16
   3e16e:	51 05       	cpc	r21, r1
   3e170:	31 f7       	brne	.-52     	; 0x3e13e <AddRoundKey+0x18>
    for (j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
    }
  }
}
   3e172:	df 91       	pop	r29
   3e174:	cf 91       	pop	r28
   3e176:	08 95       	ret

0003e178 <xtime>:
  ((x<<1) ^ (((x>>7) & 1) * 0x1b))

#else
static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
   3e178:	98 2f       	mov	r25, r24
   3e17a:	99 1f       	adc	r25, r25
   3e17c:	99 27       	eor	r25, r25
   3e17e:	99 1f       	adc	r25, r25
   3e180:	2b e1       	ldi	r18, 0x1B	; 27
   3e182:	92 9f       	mul	r25, r18
   3e184:	90 2d       	mov	r25, r0
   3e186:	11 24       	eor	r1, r1
   3e188:	88 0f       	add	r24, r24
}
   3e18a:	89 27       	eor	r24, r25
   3e18c:	08 95       	ret

0003e18e <InvCipher>:
  ShiftRows();
  AddRoundKey(Nr);
}

static void InvCipher(void)
{
   3e18e:	2f 92       	push	r2
   3e190:	3f 92       	push	r3
   3e192:	4f 92       	push	r4
   3e194:	5f 92       	push	r5
   3e196:	6f 92       	push	r6
   3e198:	7f 92       	push	r7
   3e19a:	8f 92       	push	r8
   3e19c:	9f 92       	push	r9
   3e19e:	af 92       	push	r10
   3e1a0:	bf 92       	push	r11
   3e1a2:	cf 92       	push	r12
   3e1a4:	df 92       	push	r13
   3e1a6:	ef 92       	push	r14
   3e1a8:	ff 92       	push	r15
   3e1aa:	0f 93       	push	r16
   3e1ac:	1f 93       	push	r17
   3e1ae:	cf 93       	push	r28
   3e1b0:	df 93       	push	r29
   3e1b2:	cd b7       	in	r28, 0x3d	; 61
   3e1b4:	de b7       	in	r29, 0x3e	; 62
   3e1b6:	2a 97       	sbiw	r28, 0x0a	; 10
   3e1b8:	0f b6       	in	r0, 0x3f	; 63
   3e1ba:	f8 94       	cli
   3e1bc:	de bf       	out	0x3e, r29	; 62
   3e1be:	0f be       	out	0x3f, r0	; 63
   3e1c0:	cd bf       	out	0x3d, r28	; 61
  int8_t round;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr);
   3e1c2:	8e e0       	ldi	r24, 0x0E	; 14
   3e1c4:	b0 df       	rcall	.-160    	; 0x3e126 <AddRoundKey>
   3e1c6:	8d e0       	ldi	r24, 0x0D	; 13

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round >= 0; --round)
   3e1c8:	38 2e       	mov	r3, r24
   3e1ca:	00 91 4c 05 	lds	r16, 0x054C
static void InvShiftRows(void)
{
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
   3e1ce:	10 91 4d 05 	lds	r17, 0x054D
   3e1d2:	f8 01       	movw	r30, r16
   3e1d4:	85 85       	ldd	r24, Z+13	; 0x0d
   3e1d6:	91 85       	ldd	r25, Z+9	; 0x09
  (*state)[3][1] = (*state)[2][1];
   3e1d8:	95 87       	std	Z+13, r25	; 0x0d
   3e1da:	95 81       	ldd	r25, Z+5	; 0x05
  (*state)[2][1] = (*state)[1][1];
   3e1dc:	91 87       	std	Z+9, r25	; 0x09
   3e1de:	91 81       	ldd	r25, Z+1	; 0x01
  (*state)[1][1] = (*state)[0][1];
   3e1e0:	95 83       	std	Z+5, r25	; 0x05
   3e1e2:	81 83       	std	Z+1, r24	; 0x01
  (*state)[0][1] = temp;
   3e1e4:	82 81       	ldd	r24, Z+2	; 0x02

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
   3e1e6:	92 85       	ldd	r25, Z+10	; 0x0a
  (*state)[0][2] = (*state)[2][2];
   3e1e8:	92 83       	std	Z+2, r25	; 0x02
   3e1ea:	82 87       	std	Z+10, r24	; 0x0a
  (*state)[2][2] = temp;
   3e1ec:	86 81       	ldd	r24, Z+6	; 0x06

  temp = (*state)[1][2];
   3e1ee:	96 85       	ldd	r25, Z+14	; 0x0e
  (*state)[1][2] = (*state)[3][2];
   3e1f0:	96 83       	std	Z+6, r25	; 0x06
   3e1f2:	86 87       	std	Z+14, r24	; 0x0e
  (*state)[3][2] = temp;
   3e1f4:	83 81       	ldd	r24, Z+3	; 0x03

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
   3e1f6:	97 81       	ldd	r25, Z+7	; 0x07
  (*state)[0][3] = (*state)[1][3];
   3e1f8:	93 83       	std	Z+3, r25	; 0x03
   3e1fa:	93 85       	ldd	r25, Z+11	; 0x0b
  (*state)[1][3] = (*state)[2][3];
   3e1fc:	97 83       	std	Z+7, r25	; 0x07
   3e1fe:	97 85       	ldd	r25, Z+15	; 0x0f
  (*state)[2][3] = (*state)[3][3];
   3e200:	93 87       	std	Z+11, r25	; 0x0b
   3e202:	87 87       	std	Z+15, r24	; 0x0f
  (*state)[3][3] = temp;
   3e204:	58 01       	movw	r10, r16
   3e206:	98 01       	movw	r18, r16
   3e208:	94 e0       	ldi	r25, 0x04	; 4
   3e20a:	d9 01       	movw	r26, r18
  AddRoundKey(Nr);

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round >= 0; --round)
   3e20c:	80 e0       	ldi	r24, 0x00	; 0
   3e20e:	ec 91       	ld	r30, X
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
  {
    for (j = 0; j < 4; ++j)
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
   3e210:	f0 e0       	ldi	r31, 0x00	; 0
   3e212:	e1 5b       	subi	r30, 0xB1	; 177
   3e214:	fd 4f       	sbci	r31, 0xFD	; 253
   3e216:	40 81       	ld	r20, Z
   3e218:	4c 93       	st	X, r20
   3e21a:	8f 5f       	subi	r24, 0xFF	; 255
static void InvSubBytes(void)
{
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
  {
    for (j = 0; j < 4; ++j)
   3e21c:	14 96       	adiw	r26, 0x04	; 4
   3e21e:	84 30       	cpi	r24, 0x04	; 4
   3e220:	b1 f7       	brne	.-20     	; 0x3e20e <InvCipher+0x80>
   3e222:	91 50       	subi	r25, 0x01	; 1
   3e224:	2f 5f       	subi	r18, 0xFF	; 255
   3e226:	3f 4f       	sbci	r19, 0xFF	; 255
   3e228:	91 11       	cpse	r25, r1
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(void)
{
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
   3e22a:	ef cf       	rjmp	.-34     	; 0x3e20a <InvCipher+0x7c>
   3e22c:	83 2d       	mov	r24, r3
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round >= 0; --round)
  {
    InvShiftRows();
    InvSubBytes();
    AddRoundKey(round);
   3e22e:	7b df       	rcall	.-266    	; 0x3e126 <AddRoundKey>
   3e230:	31 10       	cpse	r3, r1
   3e232:	1d c0       	rjmp	.+58     	; 0x3e26e <InvCipher+0xe0>
    if (round)
   3e234:	3a 94       	dec	r3
   3e236:	ff ef       	ldi	r31, 0xFF	; 255
   3e238:	3f 12       	cpse	r3, r31
  AddRoundKey(Nr);

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round >= 0; --round)
   3e23a:	c7 cf       	rjmp	.-114    	; 0x3e1ca <InvCipher+0x3c>
   3e23c:	2a 96       	adiw	r28, 0x0a	; 10
   3e23e:	0f b6       	in	r0, 0x3f	; 63
  // The last round is given below.
  // The MixColumns function is not here in the last round.
//  InvShiftRows();
//  InvSubBytes();
//  AddRoundKey(0);
}
   3e240:	f8 94       	cli
   3e242:	de bf       	out	0x3e, r29	; 62
   3e244:	0f be       	out	0x3f, r0	; 63
   3e246:	cd bf       	out	0x3d, r28	; 61
   3e248:	df 91       	pop	r29
   3e24a:	cf 91       	pop	r28
   3e24c:	1f 91       	pop	r17
   3e24e:	0f 91       	pop	r16
   3e250:	ff 90       	pop	r15
   3e252:	ef 90       	pop	r14
   3e254:	df 90       	pop	r13
   3e256:	cf 90       	pop	r12
   3e258:	bf 90       	pop	r11
   3e25a:	af 90       	pop	r10
   3e25c:	9f 90       	pop	r9
   3e25e:	8f 90       	pop	r8
   3e260:	7f 90       	pop	r7
   3e262:	6f 90       	pop	r6
   3e264:	5f 90       	pop	r5
   3e266:	4f 90       	pop	r4
   3e268:	3f 90       	pop	r3
   3e26a:	2f 90       	pop	r2
   3e26c:	08 95       	ret
   3e26e:	68 01       	movw	r12, r16
   3e270:	63 e0       	ldi	r22, 0x03	; 3
   3e272:	c6 0e       	add	r12, r22
   3e274:	d1 1c       	adc	r13, r1
   3e276:	c8 01       	movw	r24, r16
   3e278:	40 96       	adiw	r24, 0x10	; 16
   3e27a:	9a 83       	std	Y+2, r25	; 0x02
   3e27c:	89 83       	std	Y+1, r24	; 0x01
   3e27e:	f5 01       	movw	r30, r10
   3e280:	10 81       	ld	r17, Z

//    for (int8_t ii = 0; ii < 4; ii++)
//        (*state)[i][3-ii] = Multiply(a, mul[ii%4]) ^ Multiply(b, mul[(ii+1)%4]) ^ Multiply(c, mul[(ii+2)%4]) ^ Multiply(d, mul[(ii+3)%4]);


	a = (*state)[i][0];
   3e282:	36 01       	movw	r6, r12
   3e284:	f2 e0       	ldi	r31, 0x02	; 2
   3e286:	6f 1a       	sub	r6, r31
   3e288:	71 08       	sbc	r7, r1
   3e28a:	f3 01       	movw	r30, r6
   3e28c:	60 81       	ld	r22, Z
    b = (*state)[i][1];
   3e28e:	f6 01       	movw	r30, r12
   3e290:	e2 90       	ld	r14, -Z
    c = (*state)[i][2];
   3e292:	4f 01       	movw	r8, r30
   3e294:	f6 01       	movw	r30, r12
   3e296:	00 81       	ld	r16, Z
    d = (*state)[i][3];
   3e298:	81 2f       	mov	r24, r17
   3e29a:	68 87       	std	Y+8, r22	; 0x08


    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
   3e29c:	6d df       	rcall	.-294    	; 0x3e178 <xtime>
   3e29e:	38 2f       	mov	r19, r24
   3e2a0:	3f 83       	std	Y+7, r19	; 0x07
   3e2a2:	6a df       	rcall	.-300    	; 0x3e178 <xtime>
   3e2a4:	f8 2e       	mov	r15, r24
   3e2a6:	68 df       	rcall	.-304    	; 0x3e178 <xtime>
   3e2a8:	58 2f       	mov	r21, r24
   3e2aa:	68 85       	ldd	r22, Y+8	; 0x08
   3e2ac:	86 2f       	mov	r24, r22
   3e2ae:	5e 83       	std	Y+6, r21	; 0x06
   3e2b0:	63 df       	rcall	.-314    	; 0x3e178 <xtime>
   3e2b2:	89 87       	std	Y+9, r24	; 0x09
   3e2b4:	61 df       	rcall	.-318    	; 0x3e178 <xtime>
   3e2b6:	28 2f       	mov	r18, r24
   3e2b8:	2d 83       	std	Y+5, r18	; 0x05
   3e2ba:	5e df       	rcall	.-324    	; 0x3e178 <xtime>
   3e2bc:	48 2e       	mov	r4, r24
   3e2be:	8e 2d       	mov	r24, r14
   3e2c0:	5b df       	rcall	.-330    	; 0x3e178 <xtime>
   3e2c2:	48 2f       	mov	r20, r24
   3e2c4:	4c 83       	std	Y+4, r20	; 0x04
   3e2c6:	58 df       	rcall	.-336    	; 0x3e178 <xtime>
   3e2c8:	8a 87       	std	Y+10, r24	; 0x0a
   3e2ca:	56 df       	rcall	.-340    	; 0x3e178 <xtime>
   3e2cc:	58 2e       	mov	r5, r24
   3e2ce:	80 2f       	mov	r24, r16
   3e2d0:	53 df       	rcall	.-346    	; 0x3e178 <xtime>
   3e2d2:	98 2f       	mov	r25, r24
   3e2d4:	9b 83       	std	Y+3, r25	; 0x03
   3e2d6:	50 df       	rcall	.-352    	; 0x3e178 <xtime>
   3e2d8:	28 2e       	mov	r2, r24
   3e2da:	4e df       	rcall	.-356    	; 0x3e178 <xtime>
   3e2dc:	3f 81       	ldd	r19, Y+7	; 0x07
   3e2de:	7f 2d       	mov	r23, r15
   3e2e0:	73 27       	eor	r23, r19
   3e2e2:	5e 81       	ldd	r21, Y+6	; 0x06
   3e2e4:	75 27       	eor	r23, r21
   3e2e6:	f9 85       	ldd	r31, Y+9	; 0x09
   3e2e8:	7f 27       	eor	r23, r31
   3e2ea:	74 25       	eor	r23, r4
   3e2ec:	ea 85       	ldd	r30, Y+10	; 0x0a
   3e2ee:	7e 27       	eor	r23, r30
   3e2f0:	75 25       	eor	r23, r5
   3e2f2:	78 27       	eor	r23, r24
   3e2f4:	70 27       	eor	r23, r16
   3e2f6:	68 85       	ldd	r22, Y+8	; 0x08
   3e2f8:	76 27       	eor	r23, r22
   3e2fa:	7e 25       	eor	r23, r14
   3e2fc:	f5 01       	movw	r30, r10
   3e2fe:	70 83       	st	Z, r23
   3e300:	79 85       	ldd	r23, Y+9	; 0x09
   3e302:	75 27       	eor	r23, r21
   3e304:	2d 81       	ldd	r18, Y+5	; 0x05
   3e306:	72 27       	eor	r23, r18
   3e308:	74 25       	eor	r23, r4
   3e30a:	4c 81       	ldd	r20, Y+4	; 0x04
   3e30c:	74 27       	eor	r23, r20
   3e30e:	75 25       	eor	r23, r5
   3e310:	72 25       	eor	r23, r2
   3e312:	78 27       	eor	r23, r24
   3e314:	71 27       	eor	r23, r17
   3e316:	70 27       	eor	r23, r16
   3e318:	7e 25       	eor	r23, r14
   3e31a:	f3 01       	movw	r30, r6
   3e31c:	70 83       	st	Z, r23
   3e31e:	16 27       	eor	r17, r22
   3e320:	f5 26       	eor	r15, r21
   3e322:	f4 24       	eor	r15, r4
   3e324:	4f 25       	eor	r20, r15
   3e326:	6a 85       	ldd	r22, Y+10	; 0x0a
   3e328:	46 27       	eor	r20, r22
   3e32a:	45 25       	eor	r20, r5
   3e32c:	9b 81       	ldd	r25, Y+3	; 0x03
   3e32e:	49 27       	eor	r20, r25
   3e330:	48 27       	eor	r20, r24
   3e332:	04 27       	eor	r16, r20
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
   3e334:	01 27       	eor	r16, r17
   3e336:	f4 01       	movw	r30, r8
   3e338:	00 83       	st	Z, r16
   3e33a:	35 27       	eor	r19, r21
   3e33c:	23 27       	eor	r18, r19
   3e33e:	42 26       	eor	r4, r18
   3e340:	54 24       	eor	r5, r4
   3e342:	59 26       	eor	r5, r25
   3e344:	25 24       	eor	r2, r5
   3e346:	82 25       	eor	r24, r2
   3e348:	e8 26       	eor	r14, r24
   3e34a:	1e 25       	eor	r17, r14
   3e34c:	f6 01       	movw	r30, r12
   3e34e:	10 83       	st	Z, r17
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
   3e350:	f4 e0       	ldi	r31, 0x04	; 4
   3e352:	af 0e       	add	r10, r31
   3e354:	b1 1c       	adc	r11, r1
   3e356:	64 e0       	ldi	r22, 0x04	; 4
   3e358:	c6 0e       	add	r12, r22
   3e35a:	d1 1c       	adc	r13, r1
   3e35c:	89 81       	ldd	r24, Y+1	; 0x01
   3e35e:	9a 81       	ldd	r25, Y+2	; 0x02
   3e360:	a8 16       	cp	r10, r24
   3e362:	b9 06       	cpc	r11, r25
   3e364:	09 f0       	breq	.+2      	; 0x3e368 <InvCipher+0x1da>
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
   3e366:	8b cf       	rjmp	.-234    	; 0x3e27e <InvCipher+0xf0>
   3e368:	65 cf       	rjmp	.-310    	; 0x3e234 <InvCipher+0xa6>

0003e36a <XorWithIv>:
   3e36a:	a0 91 58 04 	lds	r26, 0x0458
   3e36e:	b0 91 59 04 	lds	r27, 0x0459
   3e372:	fc 01       	movw	r30, r24
   3e374:	91 e1       	ldi	r25, 0x11	; 17
   3e376:	91 50       	subi	r25, 0x01	; 1
//  uint8_t abcd[4];
//#define a abcd[0]
//#define b abcd[1]
//#define c abcd[2]
//#define d abcd[3]
  for (i = 0; i < 4; ++i)
   3e378:	29 f0       	breq	.+10     	; 0x3e384 <XorWithIv+0x1a>
   3e37a:	8d 91       	ld	r24, X+
   3e37c:	20 81       	ld	r18, Z
   3e37e:	82 27       	eor	r24, r18
   3e380:	81 93       	st	Z+, r24
   3e382:	f9 cf       	rjmp	.-14     	; 0x3e376 <XorWithIv+0xc>
   3e384:	08 95       	ret

0003e386 <KeyExpansion>:
}
#endif

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(void)
{
   3e386:	cf 92       	push	r12
   3e388:	df 92       	push	r13
   3e38a:	ef 92       	push	r14
   3e38c:	ff 92       	push	r15
   3e38e:	1f 93       	push	r17
   3e390:	cf 93       	push	r28
   3e392:	df 93       	push	r29
   3e394:	00 d0       	rcall	.+0      	; 0x3e396 <KeyExpansion+0x10>
   3e396:	1f 92       	push	r1
   3e398:	cd b7       	in	r28, 0x3d	; 61
   3e39a:	de b7       	in	r29, 0x3e	; 62
  uint8_t i, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  memcpy(RoundKey, Key, 32);
   3e39c:	e0 91 5a 04 	lds	r30, 0x045A
   3e3a0:	f0 91 5b 04 	lds	r31, 0x045B
   3e3a4:	80 e2       	ldi	r24, 0x20	; 32
   3e3a6:	ac e5       	ldi	r26, 0x5C	; 92
   3e3a8:	b4 e0       	ldi	r27, 0x04	; 4
   3e3aa:	01 90       	ld	r0, Z+
   3e3ac:	0d 92       	st	X+, r0
   3e3ae:	8a 95       	dec	r24
   3e3b0:	e1 f7       	brne	.-8      	; 0x3e3aa <KeyExpansion+0x24>
   3e3b2:	28 e7       	ldi	r18, 0x78	; 120
   3e3b4:	34 e0       	ldi	r19, 0x04	; 4
   3e3b6:	ef e7       	ldi	r30, 0x7F	; 127
   3e3b8:	f4 e0       	ldi	r31, 0x04	; 4
////   RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
////   RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
//  }

  // All other round keys are found from the previous round keys.
  i = Nk;
   3e3ba:	88 e0       	ldi	r24, 0x08	; 8
   3e3bc:	ae 01       	movw	r20, r28
   3e3be:	4f 5f       	subi	r20, 0xFF	; 255
   3e3c0:	5f 4f       	sbci	r21, 0xFF	; 255
   3e3c2:	14 e0       	ldi	r17, 0x04	; 4
   3e3c4:	14 0f       	add	r17, r20
  for (; i < Nb * (Nr + 1); ++i)
  {
    {
    	memcpy(tempa, &RoundKey[(i-1) * 4], 4);
   3e3c6:	d9 01       	movw	r26, r18
   3e3c8:	cd 90       	ld	r12, X+
   3e3ca:	dd 90       	ld	r13, X+
   3e3cc:	ed 90       	ld	r14, X+
   3e3ce:	fd 90       	ld	r15, X+
   3e3d0:	9d 01       	movw	r18, r26
   3e3d2:	c9 82       	std	Y+1, r12	; 0x01
   3e3d4:	da 82       	std	Y+2, r13	; 0x02
   3e3d6:	eb 82       	std	Y+3, r14	; 0x03
   3e3d8:	fc 82       	std	Y+4, r15	; 0x04
//      tempa[1]=RoundKey[(i-1) * 4 + 1];
//      tempa[2]=RoundKey[(i-1) * 4 + 2];
//      tempa[3]=RoundKey[(i-1) * 4 + 3];
    }

    if (i % Nk == 0)
   3e3da:	98 2f       	mov	r25, r24
   3e3dc:	97 70       	andi	r25, 0x07	; 7
   3e3de:	09 f5       	brne	.+66     	; 0x3e422 <KeyExpansion+0x9c>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        k = tempa[0];
   3e3e0:	99 81       	ldd	r25, Y+1	; 0x01
        tempa[0] = tempa[1];
   3e3e2:	6a 81       	ldd	r22, Y+2	; 0x02
   3e3e4:	69 83       	std	Y+1, r22	; 0x01
        tempa[1] = tempa[2];
   3e3e6:	6b 81       	ldd	r22, Y+3	; 0x03
   3e3e8:	6a 83       	std	Y+2, r22	; 0x02
        tempa[2] = tempa[3];
   3e3ea:	6c 81       	ldd	r22, Y+4	; 0x04
   3e3ec:	6b 83       	std	Y+3, r22	; 0x03
        tempa[3] = k;
   3e3ee:	9c 83       	std	Y+4, r25	; 0x04
   3e3f0:	ba 01       	movw	r22, r20
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
      	  for (uint8_t ii = 0; ii < 4; ii++)
              tempa[ii] = getSBoxValue(tempa[ii]);
   3e3f2:	db 01       	movw	r26, r22
   3e3f4:	9c 91       	ld	r25, X
   3e3f6:	a9 2f       	mov	r26, r25
   3e3f8:	b0 e0       	ldi	r27, 0x00	; 0
   3e3fa:	a1 5b       	subi	r26, 0xB1	; 177
   3e3fc:	bc 4f       	sbci	r27, 0xFC	; 252
   3e3fe:	9c 91       	ld	r25, X
   3e400:	db 01       	movw	r26, r22
   3e402:	9d 93       	st	X+, r25
   3e404:	bd 01       	movw	r22, r26
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
      	  for (uint8_t ii = 0; ii < 4; ii++)
   3e406:	1a 13       	cpse	r17, r26
   3e408:	f4 cf       	rjmp	.-24     	; 0x3e3f2 <KeyExpansion+0x6c>
//        tempa[1] = getSBoxValue(tempa[1]);
//        tempa[2] = getSBoxValue(tempa[2]);
//        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
   3e40a:	a8 2f       	mov	r26, r24
   3e40c:	a6 95       	lsr	r26
   3e40e:	a6 95       	lsr	r26
   3e410:	a6 95       	lsr	r26
   3e412:	b0 e0       	ldi	r27, 0x00	; 0
   3e414:	ac 5b       	subi	r26, 0xBC	; 188
   3e416:	bd 4f       	sbci	r27, 0xFD	; 253
   3e418:	69 81       	ldd	r22, Y+1	; 0x01
   3e41a:	9c 91       	ld	r25, X
   3e41c:	96 27       	eor	r25, r22
   3e41e:	99 83       	std	Y+1, r25	; 0x01
   3e420:	0f c0       	rjmp	.+30     	; 0x3e440 <KeyExpansion+0xba>
    }
#if defined(AES256) && (AES256 == 1)
    if (i % Nk == 4)
   3e422:	94 30       	cpi	r25, 0x04	; 4
   3e424:	69 f4       	brne	.+26     	; 0x3e440 <KeyExpansion+0xba>
   3e426:	ba 01       	movw	r22, r20
    {
      // Function Subword()
      {
      	  for (uint8_t ii = 0; ii < 4; ii++)
              tempa[ii] = getSBoxValue(tempa[ii]);
   3e428:	db 01       	movw	r26, r22
   3e42a:	9c 91       	ld	r25, X
   3e42c:	a9 2f       	mov	r26, r25
   3e42e:	b0 e0       	ldi	r27, 0x00	; 0
   3e430:	a1 5b       	subi	r26, 0xB1	; 177
   3e432:	bc 4f       	sbci	r27, 0xFC	; 252
   3e434:	9c 91       	ld	r25, X
   3e436:	db 01       	movw	r26, r22
   3e438:	9d 93       	st	X+, r25
   3e43a:	bd 01       	movw	r22, r26
#if defined(AES256) && (AES256 == 1)
    if (i % Nk == 4)
    {
      // Function Subword()
      {
      	  for (uint8_t ii = 0; ii < 4; ii++)
   3e43c:	1a 13       	cpse	r17, r26
   3e43e:	f4 cf       	rjmp	.-24     	; 0x3e428 <KeyExpansion+0xa2>
   3e440:	df 01       	movw	r26, r30
   3e442:	93 97       	sbiw	r26, 0x23	; 35
      }
    }
#endif
//	  for (uint8_t ii = 0; ii < 4; ii++)
//		    RoundKey[i * 4 + ii] = RoundKey[(i - Nk) * 4 + ii] ^ tempa[ii];
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
   3e444:	6c 91       	ld	r22, X
   3e446:	99 81       	ldd	r25, Y+1	; 0x01
   3e448:	96 27       	eor	r25, r22
   3e44a:	d9 01       	movw	r26, r18
   3e44c:	9c 93       	st	X, r25
   3e44e:	7f 01       	movw	r14, r30
   3e450:	b2 e0       	ldi	r27, 0x02	; 2
   3e452:	eb 1a       	sub	r14, r27
   3e454:	f1 08       	sbc	r15, r1
   3e456:	bf 01       	movw	r22, r30
   3e458:	62 52       	subi	r22, 0x22	; 34
   3e45a:	71 09       	sbc	r23, r1
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
   3e45c:	db 01       	movw	r26, r22
   3e45e:	6c 91       	ld	r22, X
   3e460:	9a 81       	ldd	r25, Y+2	; 0x02
   3e462:	96 27       	eor	r25, r22
   3e464:	d7 01       	movw	r26, r14
   3e466:	9c 93       	st	X, r25
   3e468:	7f 01       	movw	r14, r30
   3e46a:	b1 e0       	ldi	r27, 0x01	; 1
   3e46c:	eb 1a       	sub	r14, r27
   3e46e:	f1 08       	sbc	r15, r1
   3e470:	bf 01       	movw	r22, r30
   3e472:	61 52       	subi	r22, 0x21	; 33
   3e474:	71 09       	sbc	r23, r1
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
   3e476:	db 01       	movw	r26, r22
   3e478:	6c 91       	ld	r22, X
   3e47a:	9b 81       	ldd	r25, Y+3	; 0x03
   3e47c:	96 27       	eor	r25, r22
   3e47e:	d7 01       	movw	r26, r14
   3e480:	9c 93       	st	X, r25
   3e482:	5f 97       	sbiw	r26, 0x1f	; 31
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
   3e484:	6c 91       	ld	r22, X
   3e486:	9c 81       	ldd	r25, Y+4	; 0x04
   3e488:	96 27       	eor	r25, r22
   3e48a:	90 83       	st	Z, r25
////   RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
//  }

  // All other round keys are found from the previous round keys.
  i = Nk;
  for (; i < Nb * (Nr + 1); ++i)
   3e48c:	8f 5f       	subi	r24, 0xFF	; 255
   3e48e:	34 96       	adiw	r30, 0x04	; 4
   3e490:	8c 33       	cpi	r24, 0x3C	; 60
   3e492:	09 f0       	breq	.+2      	; 0x3e496 <KeyExpansion+0x110>
   3e494:	98 cf       	rjmp	.-208    	; 0x3e3c6 <KeyExpansion+0x40>
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
  }
}
   3e496:	0f 90       	pop	r0
   3e498:	0f 90       	pop	r0
   3e49a:	0f 90       	pop	r0
   3e49c:	0f 90       	pop	r0
   3e49e:	df 91       	pop	r29
   3e4a0:	cf 91       	pop	r28
   3e4a2:	1f 91       	pop	r17
   3e4a4:	ff 90       	pop	r15
   3e4a6:	ef 90       	pop	r14
   3e4a8:	df 90       	pop	r13
   3e4aa:	cf 90       	pop	r12
   3e4ac:	08 95       	ret

0003e4ae <AES_CBC_decrypt_buffer>:
    Cipher();
  }
}

void AES_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint16_t length, const uint8_t* key, const uint8_t* iv)
{
   3e4ae:	7f 92       	push	r7
   3e4b0:	8f 92       	push	r8
   3e4b2:	9f 92       	push	r9
   3e4b4:	af 92       	push	r10
   3e4b6:	bf 92       	push	r11
   3e4b8:	cf 92       	push	r12
   3e4ba:	df 92       	push	r13
   3e4bc:	ef 92       	push	r14
   3e4be:	ff 92       	push	r15
   3e4c0:	0f 93       	push	r16
   3e4c2:	1f 93       	push	r17
   3e4c4:	cf 93       	push	r28
   3e4c6:	df 93       	push	r29
   3e4c8:	5c 01       	movw	r10, r24
   3e4ca:	4b 01       	movw	r8, r22
   3e4cc:	6a 01       	movw	r12, r20
//  uint8_t extra = length % BLOCKLEN; /* Remaining bytes in the last non-full block */

  // Skip the key expansion if key is passed as 0
//  if (0 != key)
  {
    Key = key;
   3e4ce:	30 93 5b 04 	sts	0x045B, r19
   3e4d2:	20 93 5a 04 	sts	0x045A, r18
    KeyExpansion();
   3e4d6:	57 df       	rcall	.-338    	; 0x3e386 <KeyExpansion>
   3e4d8:	10 93 59 04 	sts	0x0459, r17
  }

  // If iv is passed as 0, we continue to encrypt without re-setting the Iv
//  if (iv != 0)
  {
    Iv = (uint8_t*)iv;
   3e4dc:	00 93 58 04 	sts	0x0458, r16
   3e4e0:	c0 e0       	ldi	r28, 0x00	; 0
  }

  for (i = 0; i < length; i += BLOCKLEN)
   3e4e2:	d0 e0       	ldi	r29, 0x00	; 0
   3e4e4:	80 e1       	ldi	r24, 0x10	; 16
  {
    memcpy(output, input, BLOCKLEN);
   3e4e6:	78 2e       	mov	r7, r24
   3e4e8:	74 01       	movw	r14, r8
   3e4ea:	ec 0e       	add	r14, r28
   3e4ec:	fd 1e       	adc	r15, r29
   3e4ee:	85 01       	movw	r16, r10
   3e4f0:	0c 0f       	add	r16, r28
   3e4f2:	1d 1f       	adc	r17, r29
   3e4f4:	cc 15       	cp	r28, r12
//  if (iv != 0)
  {
    Iv = (uint8_t*)iv;
  }

  for (i = 0; i < length; i += BLOCKLEN)
   3e4f6:	dd 05       	cpc	r29, r13
   3e4f8:	a0 f4       	brcc	.+40     	; 0x3e522 <AES_CBC_decrypt_buffer+0x74>
   3e4fa:	f7 01       	movw	r30, r14
  {
    memcpy(output, input, BLOCKLEN);
   3e4fc:	d8 01       	movw	r26, r16
   3e4fe:	87 2d       	mov	r24, r7
   3e500:	01 90       	ld	r0, Z+
   3e502:	0d 92       	st	X+, r0
   3e504:	8a 95       	dec	r24
   3e506:	e1 f7       	brne	.-8      	; 0x3e500 <AES_CBC_decrypt_buffer+0x52>
   3e508:	10 93 4d 05 	sts	0x054D, r17
    state = (state_t*)output;
   3e50c:	00 93 4c 05 	sts	0x054C, r16
   3e510:	3e de       	rcall	.-900    	; 0x3e18e <InvCipher>
    InvCipher();
   3e512:	c8 01       	movw	r24, r16
   3e514:	2a df       	rcall	.-428    	; 0x3e36a <XorWithIv>
    XorWithIv(output);
   3e516:	f0 92 59 04 	sts	0x0459, r15
   3e51a:	e0 92 58 04 	sts	0x0458, r14
    Iv = input;
   3e51e:	60 96       	adiw	r28, 0x10	; 16
   3e520:	e3 cf       	rjmp	.-58     	; 0x3e4e8 <AES_CBC_decrypt_buffer+0x3a>
   3e522:	df 91       	pop	r29
//  if (iv != 0)
  {
    Iv = (uint8_t*)iv;
  }

  for (i = 0; i < length; i += BLOCKLEN)
   3e524:	cf 91       	pop	r28
   3e526:	1f 91       	pop	r17
//  {
//    memcpy(output, input, extra);
//    state = (state_t*)output;
//    InvCipher();
//  }
}
   3e528:	0f 91       	pop	r16
   3e52a:	ff 90       	pop	r15
   3e52c:	ef 90       	pop	r14
   3e52e:	df 90       	pop	r13
   3e530:	cf 90       	pop	r12
   3e532:	bf 90       	pop	r11
   3e534:	af 90       	pop	r10
   3e536:	9f 90       	pop	r9
   3e538:	8f 90       	pop	r8
   3e53a:	7f 90       	pop	r7
   3e53c:	08 95       	ret

0003e53e <CRC>:


#include <crc.h>
#include <stdint.h>

uint16_t CRC(uint16_t crc, uint8_t ch){
   3e53e:	28 e0       	ldi	r18, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++) {
		if ((crc ^ ch) & 1)
   3e540:	ac 01       	movw	r20, r24
   3e542:	46 27       	eor	r20, r22
   3e544:	96 95       	lsr	r25
   3e546:	87 95       	ror	r24
   3e548:	40 ff       	sbrs	r20, 0
   3e54a:	04 c0       	rjmp	.+8      	; 0x3e554 <CRC+0x16>
			crc = (crc >> 1) ^ 0xA001;
   3e54c:	31 e0       	ldi	r19, 0x01	; 1
   3e54e:	83 27       	eor	r24, r19
   3e550:	30 ea       	ldi	r19, 0xA0	; 160
   3e552:	93 27       	eor	r25, r19
		else
			crc >>= 1;
		ch >>= 1;
   3e554:	66 95       	lsr	r22
   3e556:	21 50       	subi	r18, 0x01	; 1

#include <crc.h>
#include <stdint.h>

uint16_t CRC(uint16_t crc, uint8_t ch){
	for (uint8_t i = 0; i < 8; i++) {
   3e558:	99 f7       	brne	.-26     	; 0x3e540 <CRC+0x2>
		else
			crc >>= 1;
		ch >>= 1;
	}
	return crc;
}
   3e55a:	08 95       	ret

0003e55c <FlashInit>:
	SPIXfer(*data>>8);
	SPIXfer(*data>>0);
}

void FlashInit(){
	DDRH |= (1<<7);
   3e55c:	e1 e0       	ldi	r30, 0x01	; 1
   3e55e:	f1 e0       	ldi	r31, 0x01	; 1
   3e560:	80 81       	ld	r24, Z
   3e562:	80 68       	ori	r24, 0x80	; 128
   3e564:	80 83       	st	Z, r24
	PORTH |= (1<<7);
   3e566:	e2 e0       	ldi	r30, 0x02	; 2
   3e568:	f1 e0       	ldi	r31, 0x01	; 1
   3e56a:	80 81       	ld	r24, Z
   3e56c:	80 68       	ori	r24, 0x80	; 128
   3e56e:	80 83       	st	Z, r24
   3e570:	08 95       	ret

0003e572 <FlashDeInit>:
}

void FlashDeInit(){
	DDRH &= ~(1<<7);
   3e572:	e1 e0       	ldi	r30, 0x01	; 1
   3e574:	f1 e0       	ldi	r31, 0x01	; 1
   3e576:	80 81       	ld	r24, Z
   3e578:	8f 77       	andi	r24, 0x7F	; 127
   3e57a:	80 83       	st	Z, r24
	PORTH &= ~(1<<7);
   3e57c:	e2 e0       	ldi	r30, 0x02	; 2
   3e57e:	f1 e0       	ldi	r31, 0x01	; 1
   3e580:	80 81       	ld	r24, Z
   3e582:	8f 77       	andi	r24, 0x7F	; 127
   3e584:	80 83       	st	Z, r24
   3e586:	08 95       	ret

0003e588 <FlashGetStatus1>:

#define Deselect(){ \
	PORTH |= (1<<7);\
}

uint8_t FlashGetStatus1() {
   3e588:	cf 93       	push	r28
   3e58a:	df 93       	push	r29
	Select();
   3e58c:	c2 e0       	ldi	r28, 0x02	; 2
   3e58e:	d1 e0       	ldi	r29, 0x01	; 1
   3e590:	88 81       	ld	r24, Y
   3e592:	8f 77       	andi	r24, 0x7F	; 127
   3e594:	88 83       	st	Y, r24
	SPIXfer(0x05);
   3e596:	85 e0       	ldi	r24, 0x05	; 5
   3e598:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
	uint8_t status = SPIXfer(0);
   3e59c:	80 e0       	ldi	r24, 0x00	; 0
   3e59e:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
	Deselect();
   3e5a2:	98 81       	ld	r25, Y
   3e5a4:	90 68       	ori	r25, 0x80	; 128
   3e5a6:	98 83       	st	Y, r25
	return status;
}
   3e5a8:	df 91       	pop	r29
   3e5aa:	cf 91       	pop	r28
   3e5ac:	08 95       	ret

0003e5ae <FlashBusy>:

uint8_t FlashBusy() {
	return (FlashGetStatus1() & 0x01) != 0;
   3e5ae:	ec df       	rcall	.-40     	; 0x3e588 <FlashGetStatus1>
   3e5b0:	81 70       	andi	r24, 0x01	; 1
}
   3e5b2:	08 95       	ret

0003e5b4 <FlashWriteEnable>:
   3e5b4:	cf 93       	push	r28

void FlashWriteEnable(){
   3e5b6:	df 93       	push	r29
	Select();
   3e5b8:	c2 e0       	ldi	r28, 0x02	; 2
   3e5ba:	d1 e0       	ldi	r29, 0x01	; 1
   3e5bc:	88 81       	ld	r24, Y
   3e5be:	8f 77       	andi	r24, 0x7F	; 127
   3e5c0:	88 83       	st	Y, r24
	SPIXfer(0x06);
   3e5c2:	86 e0       	ldi	r24, 0x06	; 6
   3e5c4:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
	Deselect();
   3e5c8:	88 81       	ld	r24, Y
   3e5ca:	80 68       	ori	r24, 0x80	; 128
   3e5cc:	88 83       	st	Y, r24
}
   3e5ce:	df 91       	pop	r29
   3e5d0:	cf 91       	pop	r28
   3e5d2:	08 95       	ret

0003e5d4 <FlashWriteDisable>:

void FlashWriteDisable(){
   3e5d4:	cf 93       	push	r28
   3e5d6:	df 93       	push	r29
	Select();
   3e5d8:	c2 e0       	ldi	r28, 0x02	; 2
   3e5da:	d1 e0       	ldi	r29, 0x01	; 1
   3e5dc:	88 81       	ld	r24, Y
   3e5de:	8f 77       	andi	r24, 0x7F	; 127
   3e5e0:	88 83       	st	Y, r24
	SPIXfer(0x04);
   3e5e2:	84 e0       	ldi	r24, 0x04	; 4
   3e5e4:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
	Deselect();
   3e5e8:	88 81       	ld	r24, Y
   3e5ea:	80 68       	ori	r24, 0x80	; 128
   3e5ec:	88 83       	st	Y, r24
}
   3e5ee:	df 91       	pop	r29
   3e5f0:	cf 91       	pop	r28
   3e5f2:	08 95       	ret

0003e5f4 <FlashEraseBlock>:
	else
		size = (uint32_t)1 << 31;
	return size;
}

void FlashEraseBlock(uint32_t blockAddress){
   3e5f4:	1f 93       	push	r17
   3e5f6:	cf 93       	push	r28
   3e5f8:	df 93       	push	r29
   3e5fa:	1f 92       	push	r1
   3e5fc:	1f 92       	push	r1
   3e5fe:	cd b7       	in	r28, 0x3d	; 61
   3e600:	de b7       	in	r29, 0x3e	; 62
   3e602:	18 2f       	mov	r17, r24
	FlashWriteEnable();
   3e604:	6a 83       	std	Y+2, r22	; 0x02
   3e606:	79 83       	std	Y+1, r23	; 0x01
   3e608:	d5 df       	rcall	.-86     	; 0x3e5b4 <FlashWriteEnable>
   3e60a:	90 91 02 01 	lds	r25, 0x0102
	Select();
   3e60e:	9f 77       	andi	r25, 0x7F	; 127
   3e610:	90 93 02 01 	sts	0x0102, r25
   3e614:	80 e2       	ldi	r24, 0x20	; 32
	SPIXfer(0x20);
   3e616:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3e61a:	81 2f       	mov	r24, r17
	SPIXfer(blockAddress>>16);
   3e61c:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3e620:	79 81       	ldd	r23, Y+1	; 0x01
	SPIXfer(blockAddress>>8);
   3e622:	87 2f       	mov	r24, r23
   3e624:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3e628:	6a 81       	ldd	r22, Y+2	; 0x02
	SPIXfer(blockAddress>>0);
   3e62a:	86 2f       	mov	r24, r22
   3e62c:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3e630:	80 91 02 01 	lds	r24, 0x0102
	Deselect();
   3e634:	80 68       	ori	r24, 0x80	; 128
   3e636:	80 93 02 01 	sts	0x0102, r24
   3e63a:	b9 df       	rcall	.-142    	; 0x3e5ae <FlashBusy>
	while(FlashBusy());
   3e63c:	81 11       	cpse	r24, r1
   3e63e:	fd cf       	rjmp	.-6      	; 0x3e63a <FlashEraseBlock+0x46>
   3e640:	0f 90       	pop	r0
   3e642:	0f 90       	pop	r0
	FlashWriteDisable();
}
   3e644:	df 91       	pop	r29
   3e646:	cf 91       	pop	r28
   3e648:	1f 91       	pop	r17
   3e64a:	c4 cf       	rjmp	.-120    	; 0x3e5d4 <FlashWriteDisable>

0003e64c <FlashRead>:
   3e64c:	ef 92       	push	r14
	SPIXfer(blockAddress>>16);
	SPIXfer(blockAddress>>8);
	SPIXfer(blockAddress>>0);
	Deselect();
	while(FlashBusy());
	FlashWriteDisable();
   3e64e:	ff 92       	push	r15
   3e650:	0f 93       	push	r16
}

void FlashRead(uint32_t address, uint8_t* data, uint16_t dataLength){
   3e652:	1f 93       	push	r17
   3e654:	cf 93       	push	r28
   3e656:	df 93       	push	r29
   3e658:	00 d0       	rcall	.+0      	; 0x3e65a <FlashRead+0xe>
   3e65a:	1f 92       	push	r1
   3e65c:	cd b7       	in	r28, 0x3d	; 61
   3e65e:	de b7       	in	r29, 0x3e	; 62
   3e660:	f8 2e       	mov	r15, r24
   3e662:	89 01       	movw	r16, r18
	Select();
   3e664:	90 91 02 01 	lds	r25, 0x0102
   3e668:	9f 77       	andi	r25, 0x7F	; 127
   3e66a:	90 93 02 01 	sts	0x0102, r25
	SPIXfer(0x03);
   3e66e:	83 e0       	ldi	r24, 0x03	; 3
   3e670:	4b 83       	std	Y+3, r20	; 0x03
   3e672:	5c 83       	std	Y+4, r21	; 0x04
   3e674:	6a 83       	std	Y+2, r22	; 0x02
   3e676:	79 83       	std	Y+1, r23	; 0x01
   3e678:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
	SPIXfer(address>>16);
   3e67c:	8f 2d       	mov	r24, r15
   3e67e:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
	SPIXfer(address>>8);
   3e682:	79 81       	ldd	r23, Y+1	; 0x01
   3e684:	87 2f       	mov	r24, r23
   3e686:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
	SPIXfer(address>>0);
   3e68a:	6a 81       	ldd	r22, Y+2	; 0x02
   3e68c:	86 2f       	mov	r24, r22
   3e68e:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3e692:	4b 81       	ldd	r20, Y+3	; 0x03
   3e694:	e4 2e       	mov	r14, r20
   3e696:	5c 81       	ldd	r21, Y+4	; 0x04
   3e698:	f5 2e       	mov	r15, r21
   3e69a:	0e 0d       	add	r16, r14
   3e69c:	1f 1d       	adc	r17, r15
	for (uint16_t i = 0 ; i < dataLength; i++){
   3e69e:	e0 16       	cp	r14, r16
   3e6a0:	f1 06       	cpc	r15, r17
   3e6a2:	39 f0       	breq	.+14     	; 0x3e6b2 <FlashRead+0x66>
		data[i] = SPIXfer(0);
   3e6a4:	80 e0       	ldi	r24, 0x00	; 0
   3e6a6:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3e6aa:	f7 01       	movw	r30, r14
   3e6ac:	81 93       	st	Z+, r24
   3e6ae:	7f 01       	movw	r14, r30
   3e6b0:	f6 cf       	rjmp	.-20     	; 0x3e69e <FlashRead+0x52>
	}
	Deselect();
   3e6b2:	80 91 02 01 	lds	r24, 0x0102
   3e6b6:	80 68       	ori	r24, 0x80	; 128
   3e6b8:	80 93 02 01 	sts	0x0102, r24
}
   3e6bc:	0f 90       	pop	r0
   3e6be:	0f 90       	pop	r0
   3e6c0:	0f 90       	pop	r0
   3e6c2:	0f 90       	pop	r0
   3e6c4:	df 91       	pop	r29
   3e6c6:	cf 91       	pop	r28
   3e6c8:	1f 91       	pop	r17
   3e6ca:	0f 91       	pop	r16
   3e6cc:	ff 90       	pop	r15
   3e6ce:	ef 90       	pop	r14
   3e6d0:	08 95       	ret

0003e6d2 <Read>:

//data dataSource
uint8_t dataSource;

uint8_t Read(uint32_t address, uint8_t* data, uint16_t dataLength){
	switch (dataSource){
   3e6d2:	e0 91 50 05 	lds	r30, 0x0550
   3e6d6:	ed 34       	cpi	r30, 0x4D	; 77
   3e6d8:	81 f0       	breq	.+32     	; 0x3e6fa <Read+0x28>
   3e6da:	e5 35       	cpi	r30, 0x55	; 85
   3e6dc:	61 f0       	breq	.+24     	; 0x3e6f6 <Read+0x24>
   3e6de:	e6 34       	cpi	r30, 0x46	; 70
   3e6e0:	69 f4       	brne	.+26     	; 0x3e6fc <Read+0x2a>
   3e6e2:	dc 01       	movw	r26, r24
   3e6e4:	cb 01       	movw	r24, r22
	case 'F':
		FlashRead(address+flashOffset, data, dataLength);
   3e6e6:	bc 01       	movw	r22, r24
   3e6e8:	cd 01       	movw	r24, r26
   3e6ea:	70 5f       	subi	r23, 0xF0	; 240
   3e6ec:	8f 4f       	sbci	r24, 0xFF	; 255
   3e6ee:	9f 4f       	sbci	r25, 0xFF	; 255
   3e6f0:	ad df       	rcall	.-166    	; 0x3e64c <FlashRead>
   3e6f2:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
   3e6f4:	08 95       	ret
   3e6f6:	0d 94 6d fe 	jmp	0x3fcda	; 0x3fcda <UartRead>
	case 'U':
		return UartRead(address, data, dataLength);
   3e6fa:	cd c7       	rjmp	.+3994   	; 0x3f696 <SDRead>
	case 'M':
		return SDRead(address, data, dataLength);
   3e6fc:	80 e0       	ldi	r24, 0x00	; 0
   3e6fe:	08 95       	ret

0003e700 <boot_program_page>:
	}
	return 0;
   3e700:	0f 93       	push	r16
}
   3e702:	1f 93       	push	r17

void boot_program_page (uint32_t page, uint8_t *buf){
   3e704:	cf 93       	push	r28
   3e706:	df 93       	push	r29
   uint16_t i;
   boot_page_erase (page);
   3e708:	23 e0       	ldi	r18, 0x03	; 3
   3e70a:	fb 01       	movw	r30, r22
   3e70c:	80 93 5b 00 	sts	0x005B, r24
   3e710:	20 93 57 00 	sts	0x0057, r18
   3e714:	e8 95       	spm
   boot_spm_busy_wait ();      // Wait until the memory is erased.
   3e716:	07 b6       	in	r0, 0x37	; 55
   3e718:	00 fc       	sbrc	r0, 0
   3e71a:	fd cf       	rjmp	.-6      	; 0x3e716 <boot_program_page+0x16>
   3e71c:	ea 01       	movw	r28, r20
   3e71e:	00 e0       	ldi	r16, 0x00	; 0
   3e720:	10 e0       	ldi	r17, 0x00	; 0
   3e722:	98 01       	movw	r18, r16
   for (i=0; i<SPM_PAGESIZE; i+=2, buf+=2)
   {
	   uint16_t w = *(uint16_t*)buf;
//	   w += (*buf++) << 8;
	   boot_page_fill (i, w);
   3e724:	41 e0       	ldi	r20, 0x01	; 1
   uint16_t i;
   boot_page_erase (page);
   boot_spm_busy_wait ();      // Wait until the memory is erased.
   for (i=0; i<SPM_PAGESIZE; i+=2, buf+=2)
   {
	   uint16_t w = *(uint16_t*)buf;
   3e726:	a9 91       	ld	r26, Y+
   3e728:	b9 91       	ld	r27, Y+
//	   w += (*buf++) << 8;
	   boot_page_fill (i, w);
   3e72a:	0d 01       	movw	r0, r26
   3e72c:	f8 01       	movw	r30, r16
   3e72e:	20 93 5b 00 	sts	0x005B, r18
   3e732:	40 93 57 00 	sts	0x0057, r20
   3e736:	e8 95       	spm
   3e738:	11 24       	eor	r1, r1
   3e73a:	0e 5f       	subi	r16, 0xFE	; 254
   3e73c:	1f 4f       	sbci	r17, 0xFF	; 255
   3e73e:	2f 4f       	sbci	r18, 0xFF	; 255
   3e740:	3f 4f       	sbci	r19, 0xFF	; 255

void boot_program_page (uint32_t page, uint8_t *buf){
   uint16_t i;
   boot_page_erase (page);
   boot_spm_busy_wait ();      // Wait until the memory is erased.
   for (i=0; i<SPM_PAGESIZE; i+=2, buf+=2)
   3e742:	01 15       	cp	r16, r1
   3e744:	51 e0       	ldi	r21, 0x01	; 1
   3e746:	15 07       	cpc	r17, r21
   3e748:	21 05       	cpc	r18, r1
   3e74a:	31 05       	cpc	r19, r1
   3e74c:	61 f7       	brne	.-40     	; 0x3e726 <boot_program_page+0x26>
   {
	   uint16_t w = *(uint16_t*)buf;
//	   w += (*buf++) << 8;
	   boot_page_fill (i, w);
   }
   boot_page_write (page);     // Store buffer in flash page.
   3e74e:	25 e0       	ldi	r18, 0x05	; 5
   3e750:	fb 01       	movw	r30, r22
   3e752:	80 93 5b 00 	sts	0x005B, r24
   3e756:	20 93 57 00 	sts	0x0057, r18
   3e75a:	e8 95       	spm
   boot_spm_busy_wait();       // Wait until the memory is written.
   3e75c:	07 b6       	in	r0, 0x37	; 55
   3e75e:	00 fc       	sbrc	r0, 0
   3e760:	fd cf       	rjmp	.-6      	; 0x3e75c <boot_program_page+0x5c>
   boot_rww_enable ();
   3e762:	81 e1       	ldi	r24, 0x11	; 17
   3e764:	80 93 57 00 	sts	0x0057, r24
   3e768:	e8 95       	spm
}
   3e76a:	df 91       	pop	r29
   3e76c:	cf 91       	pop	r28
   3e76e:	1f 91       	pop	r17
   3e770:	0f 91       	pop	r16
   3e772:	08 95       	ret

0003e774 <BootLoader>:

void BootLoader(){
   3e774:	2f 92       	push	r2
   3e776:	3f 92       	push	r3
   3e778:	4f 92       	push	r4
   3e77a:	5f 92       	push	r5
   3e77c:	6f 92       	push	r6
   3e77e:	7f 92       	push	r7
   3e780:	8f 92       	push	r8
   3e782:	9f 92       	push	r9
   3e784:	af 92       	push	r10
   3e786:	bf 92       	push	r11
   3e788:	cf 92       	push	r12
   3e78a:	df 92       	push	r13
   3e78c:	ef 92       	push	r14
   3e78e:	ff 92       	push	r15
   3e790:	0f 93       	push	r16
   3e792:	1f 93       	push	r17
   3e794:	cf 93       	push	r28
   3e796:	df 93       	push	r29
   3e798:	cd b7       	in	r28, 0x3d	; 61
   3e79a:	de b7       	in	r29, 0x3e	; 62
   3e79c:	cd 5a       	subi	r28, 0xAD	; 173
   3e79e:	d2 40       	sbci	r29, 0x02	; 2
   3e7a0:	0f b6       	in	r0, 0x3f	; 63
   3e7a2:	f8 94       	cli
   3e7a4:	de bf       	out	0x3e, r29	; 62
   3e7a6:	0f be       	out	0x3f, r0	; 63
   3e7a8:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[BUFFER_SIZE];
	dataSource = 0;
   3e7aa:	10 92 50 05 	sts	0x0550, r1
	SPIInit();
   3e7ae:	0f 94 2c fe 	call	0x3fc58	; 0x3fc58 <SPIInit>
	UartInit();
   3e7b2:	0f 94 3f fe 	call	0x3fc7e	; 0x3fc7e <UartInit>
	FlashInit();
   3e7b6:	d2 de       	rcall	.-604    	; 0x3e55c <FlashInit>
   3e7b8:	21 e0       	ldi	r18, 0x01	; 1
	if (UartRead(0xFFFFFFFF, &dataSource, 1)){ //Bootloader Connects
   3e7ba:	30 e0       	ldi	r19, 0x00	; 0
   3e7bc:	40 e5       	ldi	r20, 0x50	; 80
   3e7be:	55 e0       	ldi	r21, 0x05	; 5
   3e7c0:	6f ef       	ldi	r22, 0xFF	; 255
   3e7c2:	7f ef       	ldi	r23, 0xFF	; 255
   3e7c4:	cb 01       	movw	r24, r22
   3e7c6:	0f 94 6d fe 	call	0x3fcda	; 0x3fcda <UartRead>
   3e7ca:	88 23       	and	r24, r24
   3e7cc:	39 f0       	breq	.+14     	; 0x3e7dc <BootLoader+0x68>
   3e7ce:	80 91 50 05 	lds	r24, 0x0550
		if (dataSource == 0xFF){
   3e7d2:	8f 3f       	cpi	r24, 0xFF	; 255
   3e7d4:	19 f4       	brne	.+6      	; 0x3e7dc <BootLoader+0x68>
   3e7d6:	85 e5       	ldi	r24, 0x55	; 85
			dataSource = 'U';
   3e7d8:	80 93 50 05 	sts	0x0550, r24
   3e7dc:	80 91 50 05 	lds	r24, 0x0550
		}
	}
	if (dataSource == 0){
   3e7e0:	81 11       	cpse	r24, r1
   3e7e2:	06 c0       	rjmp	.+12     	; 0x3e7f0 <BootLoader+0x7c>
   3e7e4:	4b d7       	rcall	.+3734   	; 0x3f67c <SDInit>
		if (SDInit()){
   3e7e6:	88 23       	and	r24, r24
   3e7e8:	19 f0       	breq	.+6      	; 0x3e7f0 <BootLoader+0x7c>
   3e7ea:	8d e4       	ldi	r24, 0x4D	; 77
   3e7ec:	80 93 50 05 	sts	0x0550, r24
			dataSource = 'M';
   3e7f0:	80 91 50 05 	lds	r24, 0x0550
		}
	}
	if (dataSource == 0){
   3e7f4:	81 11       	cpse	r24, r1
   3e7f6:	03 c0       	rjmp	.+6      	; 0x3e7fe <BootLoader+0x8a>
   3e7f8:	86 e4       	ldi	r24, 0x46	; 70
   3e7fa:	80 93 50 05 	sts	0x0550, r24
		dataSource = 'F';
   3e7fe:	80 91 50 05 	lds	r24, 0x0550
//		if (buffer[0] == 's' && buffer[1] == 'b'){
//			dataSource = 'F';
//		}
	}

	if (dataSource != 0){
   3e802:	88 23       	and	r24, r24
   3e804:	09 f4       	brne	.+2      	; 0x3e808 <BootLoader+0x94>
   3e806:	58 c1       	rjmp	.+688    	; 0x3eab8 <BootLoader+0x344>
   3e808:	80 e2       	ldi	r24, 0x20	; 32
   3e80a:	e0 e0       	ldi	r30, 0x00	; 0
		do{
			uint8_t aes_iv[16];
			uint8_t aes_key[32] = {
   3e80c:	f2 e0       	ldi	r31, 0x02	; 2
   3e80e:	de 01       	movw	r26, r28
   3e810:	a6 59       	subi	r26, 0x96	; 150
   3e812:	bd 4f       	sbci	r27, 0xFD	; 253
   3e814:	01 90       	ld	r0, Z+
   3e816:	0d 92       	st	X+, r0
   3e818:	8a 95       	dec	r24
   3e81a:	e1 f7       	brne	.-8      	; 0x3e814 <BootLoader+0xa0>
   3e81c:	7e 01       	movw	r14, r28
   3e81e:	81 e0       	ldi	r24, 0x01	; 1
					0x9B, 0x58, 0x0F, 0x3E, 0x30, 0xAC, 0xFB, 0x0D,
					0xBF, 0x8F, 0x6C, 0x55, 0xDA, 0x79, 0xD6, 0x74,
					0x91, 0xCC, 0x2F, 0xF5, 0x7F, 0x56, 0xFE, 0x75
			};

			Read(fileIDAddress, buffer, fileIDSize);
   3e820:	e8 0e       	add	r14, r24
   3e822:	f8 1e       	adc	r15, r24
   3e824:	20 e1       	ldi	r18, 0x10	; 16
   3e826:	30 e0       	ldi	r19, 0x00	; 0
   3e828:	a7 01       	movw	r20, r14
   3e82a:	60 e0       	ldi	r22, 0x00	; 0
   3e82c:	70 e0       	ldi	r23, 0x00	; 0
   3e82e:	cb 01       	movw	r24, r22
   3e830:	50 df       	rcall	.-352    	; 0x3e6d2 <Read>
   3e832:	f7 01       	movw	r30, r14
   3e834:	90 81       	ld	r25, Z
   3e836:	80 91 50 05 	lds	r24, 0x0550
			if (buffer[0] != 's' || buffer[1] != 'b'){
   3e83a:	93 37       	cpi	r25, 0x73	; 115
   3e83c:	19 f4       	brne	.+6      	; 0x3e844 <BootLoader+0xd0>
   3e83e:	91 81       	ldd	r25, Z+1	; 0x01
   3e840:	92 36       	cpi	r25, 0x62	; 98
   3e842:	61 f0       	breq	.+24     	; 0x3e85c <BootLoader+0xe8>
   3e844:	85 35       	cpi	r24, 0x55	; 85
   3e846:	09 f0       	breq	.+2      	; 0x3e84a <BootLoader+0xd6>
   3e848:	37 c1       	rjmp	.+622    	; 0x3eab8 <BootLoader+0x344>
				if (dataSource == 'U')
   3e84a:	20 e0       	ldi	r18, 0x00	; 0
   3e84c:	30 e0       	ldi	r19, 0x00	; 0
   3e84e:	40 e0       	ldi	r20, 0x00	; 0
					UartRead(0xFFFFFFFE, NULL, 0);			//Invalid file loaded
   3e850:	50 e0       	ldi	r21, 0x00	; 0
   3e852:	6e ef       	ldi	r22, 0xFE	; 254
   3e854:	7f ef       	ldi	r23, 0xFF	; 255
   3e856:	8f ef       	ldi	r24, 0xFF	; 255
   3e858:	9f ef       	ldi	r25, 0xFF	; 255
   3e85a:	2c c1       	rjmp	.+600    	; 0x3eab4 <BootLoader+0x340>
   3e85c:	f7 01       	movw	r30, r14
   3e85e:	92 81       	ldd	r25, Z+2	; 0x02
   3e860:	90 33       	cpi	r25, 0x30	; 48
				break;
			}

//			if (strcmp(&buffer[2], MAJOR_VERSION_NUMBER MINOR_VERSION_NUMBER) == 0){
			if (buffer[2] != MAJOR_VERSION_NUMBER[0] || buffer[3] != MAJOR_VERSION_NUMBER[1] || buffer[4] != MINOR_VERSION_NUMBER[0] || buffer[5] != MINOR_VERSION_NUMBER[1]){
   3e862:	49 f4       	brne	.+18     	; 0x3e876 <BootLoader+0x102>
   3e864:	93 81       	ldd	r25, Z+3	; 0x03
   3e866:	91 33       	cpi	r25, 0x31	; 49
   3e868:	31 f4       	brne	.+12     	; 0x3e876 <BootLoader+0x102>
   3e86a:	94 81       	ldd	r25, Z+4	; 0x04
   3e86c:	90 33       	cpi	r25, 0x30	; 48
   3e86e:	19 f4       	brne	.+6      	; 0x3e876 <BootLoader+0x102>
   3e870:	95 81       	ldd	r25, Z+5	; 0x05
   3e872:	90 33       	cpi	r25, 0x30	; 48
   3e874:	61 f0       	breq	.+24     	; 0x3e88e <BootLoader+0x11a>
   3e876:	85 35       	cpi	r24, 0x55	; 85
   3e878:	09 f0       	breq	.+2      	; 0x3e87c <BootLoader+0x108>
   3e87a:	1e c1       	rjmp	.+572    	; 0x3eab8 <BootLoader+0x344>
				if (dataSource == 'U')
   3e87c:	20 e0       	ldi	r18, 0x00	; 0
   3e87e:	30 e0       	ldi	r19, 0x00	; 0
   3e880:	40 e0       	ldi	r20, 0x00	; 0
					UartRead(0xFFFFFFFD, NULL, 0);			//Invalid file version
   3e882:	50 e0       	ldi	r21, 0x00	; 0
   3e884:	6d ef       	ldi	r22, 0xFD	; 253
   3e886:	7f ef       	ldi	r23, 0xFF	; 255
   3e888:	8f ef       	ldi	r24, 0xFF	; 255
   3e88a:	9f ef       	ldi	r25, 0xFF	; 255
   3e88c:	13 c1       	rjmp	.+550    	; 0x3eab4 <BootLoader+0x340>
   3e88e:	85 35       	cpi	r24, 0x55	; 85
   3e890:	51 f4       	brne	.+20     	; 0x3e8a6 <BootLoader+0x132>
   3e892:	20 e0       	ldi	r18, 0x00	; 0
//			while(i < 8){
//				firmwareVersion*=10;
//				firmwareVersion+=buffer[i++]-'0';
//			}

			if (dataSource == 'U')
   3e894:	30 e0       	ldi	r19, 0x00	; 0
   3e896:	40 e0       	ldi	r20, 0x00	; 0
				UartRead(0xFFFFFFFC, NULL, 0); //Validating firmware
   3e898:	50 e0       	ldi	r21, 0x00	; 0
   3e89a:	6c ef       	ldi	r22, 0xFC	; 252
   3e89c:	7f ef       	ldi	r23, 0xFF	; 255
   3e89e:	8f ef       	ldi	r24, 0xFF	; 255
   3e8a0:	9f ef       	ldi	r25, 0xFF	; 255
   3e8a2:	0f 94 6d fe 	call	0x3fcda	; 0x3fcda <UartRead>
   3e8a6:	20 e1       	ldi	r18, 0x10	; 16
   3e8a8:	30 e0       	ldi	r19, 0x00	; 0
   3e8aa:	ae 01       	movw	r20, r28

			Read(aesIvAddress, aes_iv, aesIVSize);
   3e8ac:	42 56       	subi	r20, 0x62	; 98
   3e8ae:	5d 4f       	sbci	r21, 0xFD	; 253
   3e8b0:	60 ef       	ldi	r22, 0xF0	; 240
   3e8b2:	70 e0       	ldi	r23, 0x00	; 0
   3e8b4:	80 e0       	ldi	r24, 0x00	; 0
   3e8b6:	90 e0       	ldi	r25, 0x00	; 0
   3e8b8:	0c df       	rcall	.-488    	; 0x3e6d2 <Read>
   3e8ba:	ce 01       	movw	r24, r28
   3e8bc:	8f 5f       	subi	r24, 0xFF	; 255
   3e8be:	9d 4f       	sbci	r25, 0xFD	; 253
   3e8c0:	0f 94 39 fd 	call	0x3fa72	; 0x3fa72 <sha1_init>

//			uint8_t shaPassed = 1;
			SHA1_CTX sha1;
			sha1_init(&sha1);
   3e8c4:	40 e2       	ldi	r20, 0x20	; 32
   3e8c6:	50 e0       	ldi	r21, 0x00	; 0
   3e8c8:	be 01       	movw	r22, r28
   3e8ca:	66 59       	subi	r22, 0x96	; 150
			sha1_update(&sha1, aes_key, sizeof(aes_key));
   3e8cc:	7d 4f       	sbci	r23, 0xFD	; 253
   3e8ce:	ce 01       	movw	r24, r28
   3e8d0:	8f 5f       	subi	r24, 0xFF	; 255
   3e8d2:	9d 4f       	sbci	r25, 0xFD	; 253
   3e8d4:	0f 94 68 fd 	call	0x3fad0	; 0x3fad0 <sha1_update>
   3e8d8:	40 e1       	ldi	r20, 0x10	; 16
   3e8da:	50 e0       	ldi	r21, 0x00	; 0
   3e8dc:	be 01       	movw	r22, r28
   3e8de:	62 56       	subi	r22, 0x62	; 98
			sha1_update(&sha1, aes_iv, aesIVSize);
   3e8e0:	7d 4f       	sbci	r23, 0xFD	; 253
   3e8e2:	ce 01       	movw	r24, r28
   3e8e4:	8f 5f       	subi	r24, 0xFF	; 255
   3e8e6:	9d 4f       	sbci	r25, 0xFD	; 253
   3e8e8:	0f 94 68 fd 	call	0x3fad0	; 0x3fad0 <sha1_update>
   3e8ec:	81 2c       	mov	r8, r1
   3e8ee:	91 2c       	mov	r9, r1
   3e8f0:	54 01       	movw	r10, r8
   3e8f2:	14 e0       	ldi	r17, 0x04	; 4
			for (uint32_t p = 0; p < firmwareSize; p+=BUFFER_SIZE){
   3e8f4:	8e b1       	in	r24, 0x0e	; 14
   3e8f6:	81 27       	eor	r24, r17
   3e8f8:	8e b9       	out	0x0e, r24	; 14
				PORTE ^= (1 << 2);
   3e8fa:	ff ef       	ldi	r31, 0xFF	; 255
   3e8fc:	9f 1a       	sub	r9, r31
   3e8fe:	af 0a       	sbc	r10, r31
   3e900:	bf 0a       	sbc	r11, r31
				if (Read(firmwareAddress+p, buffer, BUFFER_SIZE) == 0){
   3e902:	20 e0       	ldi	r18, 0x00	; 0
   3e904:	31 e0       	ldi	r19, 0x01	; 1
   3e906:	a7 01       	movw	r20, r14
   3e908:	c5 01       	movw	r24, r10
   3e90a:	b4 01       	movw	r22, r8
   3e90c:	e2 de       	rcall	.-572    	; 0x3e6d2 <Read>
   3e90e:	81 11       	cpse	r24, r1
   3e910:	1d c0       	rjmp	.+58     	; 0x3e94c <BootLoader+0x1d8>
   3e912:	be 01       	movw	r22, r28
   3e914:	66 57       	subi	r22, 0x76	; 118
   3e916:	7d 4f       	sbci	r23, 0xFD	; 253
   3e918:	ce 01       	movw	r24, r28
   3e91a:	8f 5f       	subi	r24, 0xFF	; 255
//					UartRead(0xFFFFFFFB, NULL, 0); //Validation Failed
//				break;
//			}

			uint8_t hash[20];
			sha1_final(&sha1, hash);
   3e91c:	9d 4f       	sbci	r25, 0xFD	; 253
   3e91e:	0f 94 ab fd 	call	0x3fb56	; 0x3fb56 <sha1_final>
   3e922:	24 e1       	ldi	r18, 0x14	; 20
   3e924:	30 e0       	ldi	r19, 0x00	; 0
   3e926:	a7 01       	movw	r20, r14
   3e928:	60 e1       	ldi	r22, 0x10	; 16
   3e92a:	70 e0       	ldi	r23, 0x00	; 0
			Read(signatureAddress, buffer, 20);
   3e92c:	80 e0       	ldi	r24, 0x00	; 0
   3e92e:	90 e0       	ldi	r25, 0x00	; 0
   3e930:	d0 de       	rcall	.-608    	; 0x3e6d2 <Read>
   3e932:	44 e1       	ldi	r20, 0x14	; 20
   3e934:	50 e0       	ldi	r21, 0x00	; 0
   3e936:	be 01       	movw	r22, r28
   3e938:	66 57       	subi	r22, 0x76	; 118
   3e93a:	7d 4f       	sbci	r23, 0xFD	; 253
   3e93c:	c7 01       	movw	r24, r14
			if (memcmp(buffer, hash, 20) != 0){
   3e93e:	0f 94 7f ff 	call	0x3fefe	; 0x3fefe <memcmp>
   3e942:	20 91 50 05 	lds	r18, 0x0550
   3e946:	89 2b       	or	r24, r25
   3e948:	89 f4       	brne	.+34     	; 0x3e96c <BootLoader+0x1f8>
   3e94a:	1c c0       	rjmp	.+56     	; 0x3e984 <BootLoader+0x210>
   3e94c:	40 e0       	ldi	r20, 0x00	; 0
   3e94e:	51 e0       	ldi	r21, 0x01	; 1
   3e950:	b7 01       	movw	r22, r14
   3e952:	ce 01       	movw	r24, r28
   3e954:	8f 5f       	subi	r24, 0xFF	; 255
   3e956:	9d 4f       	sbci	r25, 0xFD	; 253
				PORTE ^= (1 << 2);
				if (Read(firmwareAddress+p, buffer, BUFFER_SIZE) == 0){
//					shaPassed = 0;
					break;
				}
				sha1_update(&sha1, buffer, BUFFER_SIZE);
   3e958:	0f 94 68 fd 	call	0x3fad0	; 0x3fad0 <sha1_update>
   3e95c:	81 14       	cp	r8, r1
   3e95e:	80 ee       	ldi	r24, 0xE0	; 224
   3e960:	98 06       	cpc	r9, r24
   3e962:	83 e0       	ldi	r24, 0x03	; 3
   3e964:	a8 06       	cpc	r10, r24
   3e966:	b1 04       	cpc	r11, r1
//			uint8_t shaPassed = 1;
			SHA1_CTX sha1;
			sha1_init(&sha1);
			sha1_update(&sha1, aes_key, sizeof(aes_key));
			sha1_update(&sha1, aes_iv, aesIVSize);
			for (uint32_t p = 0; p < firmwareSize; p+=BUFFER_SIZE){
   3e968:	29 f6       	brne	.-118    	; 0x3e8f4 <BootLoader+0x180>
   3e96a:	d3 cf       	rjmp	.-90     	; 0x3e912 <BootLoader+0x19e>
   3e96c:	25 35       	cpi	r18, 0x55	; 85
   3e96e:	09 f0       	breq	.+2      	; 0x3e972 <BootLoader+0x1fe>
   3e970:	a3 c0       	rjmp	.+326    	; 0x3eab8 <BootLoader+0x344>
   3e972:	20 e0       	ldi	r18, 0x00	; 0
   3e974:	30 e0       	ldi	r19, 0x00	; 0
   3e976:	40 e0       	ldi	r20, 0x00	; 0

			uint8_t hash[20];
			sha1_final(&sha1, hash);
			Read(signatureAddress, buffer, 20);
			if (memcmp(buffer, hash, 20) != 0){
				if (dataSource == 'U')
   3e978:	50 e0       	ldi	r21, 0x00	; 0
   3e97a:	6b ef       	ldi	r22, 0xFB	; 251
   3e97c:	7f ef       	ldi	r23, 0xFF	; 255
					UartRead(0xFFFFFFFB, NULL, 0); //Validation Failed
   3e97e:	8f ef       	ldi	r24, 0xFF	; 255
   3e980:	9f ef       	ldi	r25, 0xFF	; 255
   3e982:	98 c0       	rjmp	.+304    	; 0x3eab4 <BootLoader+0x340>
   3e984:	25 35       	cpi	r18, 0x55	; 85
   3e986:	51 f4       	brne	.+20     	; 0x3e99c <BootLoader+0x228>
   3e988:	20 e0       	ldi	r18, 0x00	; 0
   3e98a:	30 e0       	ldi	r19, 0x00	; 0
   3e98c:	40 e0       	ldi	r20, 0x00	; 0
   3e98e:	50 e0       	ldi	r21, 0x00	; 0
				break;
			}

			if (dataSource == 'U')
   3e990:	6a ef       	ldi	r22, 0xFA	; 250
   3e992:	7f ef       	ldi	r23, 0xFF	; 255
				UartRead(0xFFFFFFFA, NULL, 0);//Installing Firmware
   3e994:	8f ef       	ldi	r24, 0xFF	; 255
   3e996:	9f ef       	ldi	r25, 0xFF	; 255
   3e998:	0f 94 6d fe 	call	0x3fcda	; 0x3fcda <UartRead>
   3e99c:	81 2c       	mov	r8, r1
   3e99e:	91 2c       	mov	r9, r1
   3e9a0:	54 01       	movw	r10, r8
   3e9a2:	d1 2c       	mov	r13, r1
   3e9a4:	c1 2c       	mov	r12, r1
   3e9a6:	8e b1       	in	r24, 0x0e	; 14
//			uint8_t shaPassed = 1;
			SHA1_CTX sha1;
			sha1_init(&sha1);
			sha1_update(&sha1, aes_key, sizeof(aes_key));
			sha1_update(&sha1, aes_iv, aesIVSize);
			for (uint32_t p = 0; p < firmwareSize; p+=BUFFER_SIZE){
   3e9a8:	94 e0       	ldi	r25, 0x04	; 4
   3e9aa:	89 27       	eor	r24, r25
   3e9ac:	8e b9       	out	0x0e, r24	; 14
   3e9ae:	24 01       	movw	r4, r8
   3e9b0:	35 01       	movw	r6, r10
			uint16_t crc = 0;

			uint8_t success = 1;
			for (uint32_t ptr = 0; ptr < firmwareSize; ptr += BUFFER_SIZE)
			{
					PORTE ^= (1 << 2);
   3e9b2:	ef ef       	ldi	r30, 0xFF	; 255
   3e9b4:	5e 1a       	sub	r5, r30
   3e9b6:	6e 0a       	sbc	r6, r30
   3e9b8:	7e 0a       	sbc	r7, r30
					uint8_t cipher[BUFFER_SIZE];
					if (Read(firmwareAddress+ptr, cipher, BUFFER_SIZE) == 0){
   3e9ba:	20 e0       	ldi	r18, 0x00	; 0
   3e9bc:	31 e0       	ldi	r19, 0x01	; 1
   3e9be:	ae 01       	movw	r20, r28
   3e9c0:	4f 5f       	subi	r20, 0xFF	; 255
   3e9c2:	5f 4f       	sbci	r21, 0xFF	; 255
   3e9c4:	c3 01       	movw	r24, r6
   3e9c6:	b2 01       	movw	r22, r4
   3e9c8:	84 de       	rcall	.-760    	; 0x3e6d2 <Read>
   3e9ca:	88 23       	and	r24, r24
   3e9cc:	09 f4       	brne	.+2      	; 0x3e9d0 <BootLoader+0x25c>
   3e9ce:	5f c0       	rjmp	.+190    	; 0x3ea8e <BootLoader+0x31a>
   3e9d0:	8e 01       	movw	r16, r28
   3e9d2:	02 56       	subi	r16, 0x62	; 98
   3e9d4:	1d 4f       	sbci	r17, 0xFD	; 253
   3e9d6:	9e 01       	movw	r18, r28
   3e9d8:	26 59       	subi	r18, 0x96	; 150
   3e9da:	3d 4f       	sbci	r19, 0xFD	; 253
   3e9dc:	40 e0       	ldi	r20, 0x00	; 0
						success = 0;
						break;
					}
					AES_CBC_decrypt_buffer(buffer, cipher, BUFFER_SIZE, aes_key, aes_iv);
   3e9de:	51 e0       	ldi	r21, 0x01	; 1
   3e9e0:	be 01       	movw	r22, r28
   3e9e2:	6f 5f       	subi	r22, 0xFF	; 255
   3e9e4:	7f 4f       	sbci	r23, 0xFF	; 255
   3e9e6:	c7 01       	movw	r24, r14
   3e9e8:	62 dd       	rcall	.-1340   	; 0x3e4ae <AES_CBC_decrypt_buffer>
   3e9ea:	fe 01       	movw	r30, r28
   3e9ec:	ef 50       	subi	r30, 0x0F	; 15
   3e9ee:	ff 4f       	sbci	r31, 0xFF	; 255
   3e9f0:	d8 01       	movw	r26, r16
   3e9f2:	80 e1       	ldi	r24, 0x10	; 16
   3e9f4:	01 90       	ld	r0, Z+
   3e9f6:	0d 92       	st	X+, r0
   3e9f8:	8a 95       	dec	r24
					memcpy(aes_iv, &cipher[BUFFER_SIZE-16], 16);
   3e9fa:	e1 f7       	brne	.-8      	; 0x3e9f4 <BootLoader+0x280>
   3e9fc:	11 e0       	ldi	r17, 0x01	; 1
   3e9fe:	81 14       	cp	r8, r1
   3ea00:	ff ed       	ldi	r31, 0xDF	; 223
   3ea02:	9f 06       	cpc	r9, r31
   3ea04:	f3 e0       	ldi	r31, 0x03	; 3
   3ea06:	af 06       	cpc	r10, r31
   3ea08:	b1 04       	cpc	r11, r1
   3ea0a:	08 f4       	brcc	.+2      	; 0x3ea0e <BootLoader+0x29a>
					uint16_t i = 0;
					uint8_t isLast = !(ptr < firmwareSize - BUFFER_SIZE);
   3ea0c:	10 e0       	ldi	r17, 0x00	; 0
   3ea0e:	17 01       	movw	r2, r14
   3ea10:	8d 2d       	mov	r24, r13
   3ea12:	9c 2d       	mov	r25, r12
   3ea14:	b1 01       	movw	r22, r2
   3ea16:	6e 19       	sub	r22, r14
   3ea18:	7f 09       	sbc	r23, r15
   3ea1a:	11 11       	cpse	r17, r1
   3ea1c:	03 c0       	rjmp	.+6      	; 0x3ea24 <BootLoader+0x2b0>
					while(i < (isLast ? BUFFER_SIZE-4 : BUFFER_SIZE))
   3ea1e:	40 e0       	ldi	r20, 0x00	; 0
   3ea20:	51 e0       	ldi	r21, 0x01	; 1
   3ea22:	02 c0       	rjmp	.+4      	; 0x3ea28 <BootLoader+0x2b4>
   3ea24:	4c ef       	ldi	r20, 0xFC	; 252
   3ea26:	50 e0       	ldi	r21, 0x00	; 0
   3ea28:	64 17       	cp	r22, r20
   3ea2a:	75 07       	cpc	r23, r21
   3ea2c:	28 f4       	brcc	.+10     	; 0x3ea38 <BootLoader+0x2c4>
   3ea2e:	f1 01       	movw	r30, r2
   3ea30:	61 91       	ld	r22, Z+
   3ea32:	1f 01       	movw	r2, r30
   3ea34:	84 dd       	rcall	.-1272   	; 0x3e53e <CRC>
   3ea36:	ee cf       	rjmp	.-36     	; 0x3ea14 <BootLoader+0x2a0>
   3ea38:	d8 2e       	mov	r13, r24
   3ea3a:	c9 2e       	mov	r12, r25
   3ea3c:	11 23       	and	r17, r17
						crc = CRC(crc, buffer[i++]);
   3ea3e:	c1 f0       	breq	.+48     	; 0x3ea70 <BootLoader+0x2fc>
   3ea40:	c3 50       	subi	r28, 0x03	; 3
   3ea42:	de 4f       	sbci	r29, 0xFE	; 254
   3ea44:	68 81       	ld	r22, Y
   3ea46:	cd 5f       	subi	r28, 0xFD	; 253
   3ea48:	d1 40       	sbci	r29, 0x01	; 1
   3ea4a:	79 dd       	rcall	.-1294   	; 0x3e53e <CRC>
   3ea4c:	c2 50       	subi	r28, 0x02	; 2
					// if it's the last page, replace with CRC and firmwareVersion
					if (isLast){
   3ea4e:	de 4f       	sbci	r29, 0xFE	; 254
   3ea50:	68 81       	ld	r22, Y
//						if (buffer[BUFFER_SIZE-4] == 0xFF && buffer[BUFFER_SIZE-3] == 0xFF){
//							*(uint16_t*)&buffer[BUFFER_SIZE-4] = firmwareVersion;
//							buffer[BUFFER_SIZE-4] = firmwareVersion;
//							buffer[BUFFER_SIZE-3] = firmwareVersion>>8;
//						}
						crc = CRC(crc, buffer[BUFFER_SIZE-4]);
   3ea52:	ce 5f       	subi	r28, 0xFE	; 254
   3ea54:	d1 40       	sbci	r29, 0x01	; 1
   3ea56:	73 dd       	rcall	.-1306   	; 0x3e53e <CRC>
   3ea58:	d8 2e       	mov	r13, r24
   3ea5a:	c9 2e       	mov	r12, r25
   3ea5c:	c1 50       	subi	r28, 0x01	; 1
   3ea5e:	de 4f       	sbci	r29, 0xFE	; 254
						crc = CRC(crc, buffer[BUFFER_SIZE-3]);
   3ea60:	88 83       	st	Y, r24
   3ea62:	cf 5f       	subi	r28, 0xFF	; 255
   3ea64:	d1 40       	sbci	r29, 0x01	; 1
   3ea66:	c0 50       	subi	r28, 0x00	; 0
   3ea68:	de 4f       	sbci	r29, 0xFE	; 254
   3ea6a:	98 83       	st	Y, r25
   3ea6c:	c0 50       	subi	r28, 0x00	; 0
   3ea6e:	d2 40       	sbci	r29, 0x02	; 2
   3ea70:	a7 01       	movw	r20, r14
						*(uint16_t*)&buffer[BUFFER_SIZE-2] = crc;
   3ea72:	c5 01       	movw	r24, r10
   3ea74:	b4 01       	movw	r22, r8
   3ea76:	44 de       	rcall	.-888    	; 0x3e700 <boot_program_page>
   3ea78:	53 01       	movw	r10, r6
   3ea7a:	42 01       	movw	r8, r4
   3ea7c:	41 14       	cp	r4, r1
   3ea7e:	f0 ee       	ldi	r31, 0xE0	; 224
   3ea80:	5f 06       	cpc	r5, r31
   3ea82:	f3 e0       	ldi	r31, 0x03	; 3
   3ea84:	6f 06       	cpc	r6, r31
//						buffer[BUFFER_SIZE-2] = crc;
//						buffer[BUFFER_SIZE-1] = crc>>8;
					}
					uint16_t p = 0;
					while (p < BUFFER_SIZE){
						boot_program_page(ptr+p, &buffer[p]);
   3ea86:	71 04       	cpc	r7, r1
   3ea88:	09 f0       	breq	.+2      	; 0x3ea8c <BootLoader+0x318>
   3ea8a:	8d cf       	rjmp	.-230    	; 0x3e9a6 <BootLoader+0x232>
   3ea8c:	81 e0       	ldi	r24, 0x01	; 1
   3ea8e:	90 91 50 05 	lds	r25, 0x0550
   3ea92:	95 35       	cpi	r25, 0x55	; 85
				UartRead(0xFFFFFFFA, NULL, 0);//Installing Firmware

			uint16_t crc = 0;

			uint8_t success = 1;
			for (uint32_t ptr = 0; ptr < firmwareSize; ptr += BUFFER_SIZE)
   3ea94:	89 f4       	brne	.+34     	; 0x3eab8 <BootLoader+0x344>
   3ea96:	20 e0       	ldi	r18, 0x00	; 0
   3ea98:	30 e0       	ldi	r19, 0x00	; 0
   3ea9a:	40 e0       	ldi	r20, 0x00	; 0
   3ea9c:	50 e0       	ldi	r21, 0x00	; 0
   3ea9e:	88 23       	and	r24, r24
   3eaa0:	29 f0       	breq	.+10     	; 0x3eaac <BootLoader+0x338>
   3eaa2:	69 ef       	ldi	r22, 0xF9	; 249
			if (dataSource == 'U')
				UartRead(0xFFFFFFFA, NULL, 0);//Installing Firmware

			uint16_t crc = 0;

			uint8_t success = 1;
   3eaa4:	7f ef       	ldi	r23, 0xFF	; 255
						boot_program_page(ptr+p, &buffer[p]);
						p += SPM_PAGESIZE;
					}
			}

			if (dataSource == 'U'){
   3eaa6:	8f ef       	ldi	r24, 0xFF	; 255
   3eaa8:	9f ef       	ldi	r25, 0xFF	; 255
   3eaaa:	04 c0       	rjmp	.+8      	; 0x3eab4 <BootLoader+0x340>
   3eaac:	68 ef       	ldi	r22, 0xF8	; 248
				if (success)
					UartRead(0xFFFFFFF9, NULL, 0); //Installation Successful
   3eaae:	7f ef       	ldi	r23, 0xFF	; 255
   3eab0:	8f ef       	ldi	r24, 0xFF	; 255
   3eab2:	9f ef       	ldi	r25, 0xFF	; 255
   3eab4:	0f 94 6d fe 	call	0x3fcda	; 0x3fcda <UartRead>
						p += SPM_PAGESIZE;
					}
			}

			if (dataSource == 'U'){
				if (success)
   3eab8:	80 91 50 05 	lds	r24, 0x0550
					UartRead(0xFFFFFFF9, NULL, 0); //Installation Successful
   3eabc:	86 34       	cpi	r24, 0x46	; 70
   3eabe:	29 f4       	brne	.+10     	; 0x3eaca <BootLoader+0x356>
   3eac0:	60 e0       	ldi	r22, 0x00	; 0
   3eac2:	70 e1       	ldi	r23, 0x10	; 16
				else
					UartRead(0xFFFFFFF8, NULL, 0); //Installation Failed
   3eac4:	80 e0       	ldi	r24, 0x00	; 0
   3eac6:	90 e0       	ldi	r25, 0x00	; 0
   3eac8:	95 dd       	rcall	.-1238   	; 0x3e5f4 <FlashEraseBlock>
   3eaca:	53 dd       	rcall	.-1370   	; 0x3e572 <FlashDeInit>
   3eacc:	0f 94 34 fe 	call	0x3fc68	; 0x3fc68 <SPIDeInit>

		}while(0);
	}

	//erase the digital signature
	if (dataSource == 'F')
   3ead0:	0f 94 48 fe 	call	0x3fc90	; 0x3fc90 <UartDeInit>
   3ead4:	c3 55       	subi	r28, 0x53	; 83
   3ead6:	dd 4f       	sbci	r29, 0xFD	; 253
		FlashEraseBlock(flashOffset);
   3ead8:	0f b6       	in	r0, 0x3f	; 63
   3eada:	f8 94       	cli
   3eadc:	de bf       	out	0x3e, r29	; 62
   3eade:	0f be       	out	0x3f, r0	; 63
   3eae0:	cd bf       	out	0x3d, r28	; 61
   3eae2:	df 91       	pop	r29

	FlashDeInit();
   3eae4:	cf 91       	pop	r28
   3eae6:	1f 91       	pop	r17
	SPIDeInit();
   3eae8:	0f 91       	pop	r16
   3eaea:	ff 90       	pop	r15
	UartDeInit();
   3eaec:	ef 90       	pop	r14
   3eaee:	df 90       	pop	r13
}
   3eaf0:	cf 90       	pop	r12
   3eaf2:	bf 90       	pop	r11
   3eaf4:	af 90       	pop	r10
   3eaf6:	9f 90       	pop	r9
   3eaf8:	8f 90       	pop	r8
   3eafa:	7f 90       	pop	r7
   3eafc:	6f 90       	pop	r6
   3eafe:	5f 90       	pop	r5
   3eb00:	4f 90       	pop	r4
   3eb02:	3f 90       	pop	r3
   3eb04:	2f 90       	pop	r2
   3eb06:	08 95       	ret

0003eb08 <main>:
   3eb08:	cf 92       	push	r12
   3eb0a:	df 92       	push	r13
   3eb0c:	ef 92       	push	r14
   3eb0e:	ff 92       	push	r15
   3eb10:	6a 9a       	sbi	0x0d, 2	; 13
   3eb12:	9d 9a       	sbi	0x13, 5	; 19
   3eb14:	a5 98       	cbi	0x14, 5	; 20
   3eb16:	14 be       	out	0x34, r1	; 52
   3eb18:	88 e1       	ldi	r24, 0x18	; 24
   3eb1a:	0f b6       	in	r0, 0x3f	; 63
   3eb1c:	f8 94       	cli
   3eb1e:	80 93 60 00 	sts	0x0060, r24
   3eb22:	10 92 60 00 	sts	0x0060, r1
{
	DDRE |= (1<<2);
	DDRG |= (1<<5);
	PORTG &= ~(1<<5);
    MCUSR = 0;
    wdt_disable();
   3eb26:	0f be       	out	0x3f, r0	; 63
	BootLoader();
   3eb28:	25 de       	rcall	.-950    	; 0x3e774 <BootLoader>
   3eb2a:	80 e0       	ldi	r24, 0x00	; 0
		uint16_t p = 0x000000;
	#else
		uint32_t p = 0x000000;
	#endif

	uint16_t crc = 0;
   3eb2c:	90 e0       	ldi	r25, 0x00	; 0
   3eb2e:	c1 2c       	mov	r12, r1
	BootLoader();

	#ifndef RAMPZ
		uint16_t p = 0x000000;
	#else
		uint32_t p = 0x000000;
   3eb30:	d1 2c       	mov	r13, r1
   3eb32:	76 01       	movw	r14, r12
   3eb34:	eb be       	out	0x3b, r14	; 59
	do
	{
		#ifndef RAMPZ
			crc = CRC(crc, pgm_read_byte(p));
		#else
			crc = CRC(crc, pgm_read_byte_far(p));
   3eb36:	f6 01       	movw	r30, r12
   3eb38:	67 91       	elpm	r22, Z+
   3eb3a:	01 dd       	rcall	.-1534   	; 0x3e53e <CRC>
   3eb3c:	2f ef       	ldi	r18, 0xFF	; 255
   3eb3e:	c2 1a       	sub	r12, r18
		#endif
	}
	while (++p < firmwareSize);
   3eb40:	d2 0a       	sbc	r13, r18
   3eb42:	e2 0a       	sbc	r14, r18
   3eb44:	f2 0a       	sbc	r15, r18
   3eb46:	c1 14       	cp	r12, r1
   3eb48:	30 ee       	ldi	r19, 0xE0	; 224
   3eb4a:	d3 06       	cpc	r13, r19
   3eb4c:	33 e0       	ldi	r19, 0x03	; 3
   3eb4e:	e3 06       	cpc	r14, r19
   3eb50:	f1 04       	cpc	r15, r1
   3eb52:	81 f7       	brne	.-32     	; 0x3eb34 <main+0x2c>
   3eb54:	89 2b       	or	r24, r25
   3eb56:	71 f0       	breq	.+28     	; 0x3eb74 <main+0x6c>

	if (crc)
   3eb58:	94 e0       	ldi	r25, 0x04	; 4
   3eb5a:	8e b1       	in	r24, 0x0e	; 14
	{
		for(;;)
		{
			PORTE ^= (1<<2);
   3eb5c:	89 27       	eor	r24, r25
   3eb5e:	8e b9       	out	0x0e, r24	; 14
   3eb60:	8f ef       	ldi	r24, 0xFF	; 255
   3eb62:	23 ed       	ldi	r18, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3eb64:	30 e3       	ldi	r19, 0x30	; 48
   3eb66:	81 50       	subi	r24, 0x01	; 1
   3eb68:	20 40       	sbci	r18, 0x00	; 0
   3eb6a:	30 40       	sbci	r19, 0x00	; 0
   3eb6c:	e1 f7       	brne	.-8      	; 0x3eb66 <main+0x5e>
   3eb6e:	00 c0       	rjmp	.+0      	; 0x3eb70 <main+0x68>
   3eb70:	00 00       	nop
   3eb72:	f3 cf       	rjmp	.-26     	; 0x3eb5a <main+0x52>
   3eb74:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
			_delay_ms(1000);
		}
	}
    asm volatile ("jmp 0");
   3eb78:	80 e0       	ldi	r24, 0x00	; 0
   3eb7a:	90 e0       	ldi	r25, 0x00	; 0
}
   3eb7c:	ff 90       	pop	r15
   3eb7e:	ef 90       	pop	r14
   3eb80:	df 90       	pop	r13
   3eb82:	cf 90       	pop	r12
   3eb84:	08 95       	ret

0003eb86 <send_cmd>:
   3eb86:	ff 92       	push	r15
   3eb88:	0f 93       	push	r16
static
BYTE send_cmd (
    BYTE cmd,		/* 1st byte (Start + Index) */
    DWORD arg		/* Argument (32 bits) */
)
{
   3eb8a:	1f 93       	push	r17
   3eb8c:	cf 93       	push	r28
   3eb8e:	df 93       	push	r29
   3eb90:	c8 2f       	mov	r28, r24
   3eb92:	d4 2f       	mov	r29, r20
   3eb94:	15 2f       	mov	r17, r21
   3eb96:	06 2f       	mov	r16, r22
   3eb98:	f7 2e       	mov	r15, r23
    BYTE n, res;


    if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
   3eb9a:	87 ff       	sbrs	r24, 7
   3eb9c:	08 c0       	rjmp	.+16     	; 0x3ebae <send_cmd+0x28>
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
   3eb9e:	40 e0       	ldi	r20, 0x00	; 0
   3eba0:	50 e0       	ldi	r21, 0x00	; 0
   3eba2:	ba 01       	movw	r22, r20
   3eba4:	87 e7       	ldi	r24, 0x77	; 119
   3eba6:	ef df       	rcall	.-34     	; 0x3eb86 <send_cmd>
   3eba8:	82 30       	cpi	r24, 0x02	; 2
        if (res > 1) return res;
   3ebaa:	40 f5       	brcc	.+80     	; 0x3ebfc <send_cmd+0x76>
   3ebac:	cf 77       	andi	r28, 0x7F	; 127
{
    BYTE n, res;


    if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
        cmd &= 0x7F;
   3ebae:	90 91 05 01 	lds	r25, 0x0105
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

    /* Select the card */
    select();
   3ebb2:	9f 77       	andi	r25, 0x7F	; 127
   3ebb4:	90 93 05 01 	sts	0x0105, r25
   3ebb8:	8c 2f       	mov	r24, r28

    /* Send a command packet */
    SPIXfer(cmd);						/* Start + Command index */
   3ebba:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3ebbe:	8f 2d       	mov	r24, r15
    SPIXfer((BYTE)(arg >> 24));		/* Argument[31..24] */
   3ebc0:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3ebc4:	80 2f       	mov	r24, r16
    SPIXfer((BYTE)(arg >> 16));		/* Argument[23..16] */
   3ebc6:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3ebca:	81 2f       	mov	r24, r17
    SPIXfer((BYTE)(arg >> 8));			/* Argument[15..8] */
   3ebcc:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3ebd0:	8d 2f       	mov	r24, r29
    SPIXfer((BYTE)arg);				/* Argument[7..0] */
   3ebd2:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3ebd6:	c0 34       	cpi	r28, 0x40	; 64
    n = 0x01;							/* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
   3ebd8:	21 f0       	breq	.+8      	; 0x3ebe2 <send_cmd+0x5c>
   3ebda:	c8 34       	cpi	r28, 0x48	; 72
    if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
   3ebdc:	21 f4       	brne	.+8      	; 0x3ebe6 <send_cmd+0x60>
   3ebde:	87 e8       	ldi	r24, 0x87	; 135
   3ebe0:	03 c0       	rjmp	.+6      	; 0x3ebe8 <send_cmd+0x62>
   3ebe2:	85 e9       	ldi	r24, 0x95	; 149
    SPIXfer((BYTE)(arg >> 24));		/* Argument[31..24] */
    SPIXfer((BYTE)(arg >> 16));		/* Argument[23..16] */
    SPIXfer((BYTE)(arg >> 8));			/* Argument[15..8] */
    SPIXfer((BYTE)arg);				/* Argument[7..0] */
    n = 0x01;							/* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
   3ebe4:	01 c0       	rjmp	.+2      	; 0x3ebe8 <send_cmd+0x62>
   3ebe6:	81 e0       	ldi	r24, 0x01	; 1
    SPIXfer(cmd);						/* Start + Command index */
    SPIXfer((BYTE)(arg >> 24));		/* Argument[31..24] */
    SPIXfer((BYTE)(arg >> 16));		/* Argument[23..16] */
    SPIXfer((BYTE)(arg >> 8));			/* Argument[15..8] */
    SPIXfer((BYTE)arg);				/* Argument[7..0] */
    n = 0x01;							/* Dummy CRC + Stop */
   3ebe8:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
    if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    SPIXfer(n);
   3ebec:	ca e0       	ldi	r28, 0x0A	; 10
   3ebee:	8f ef       	ldi	r24, 0xFF	; 255

    /* Receive a command response */
    n = 10;								/* Wait for a valid response in timeout of 10 attempts */
    do {
        res = SPIXfer(0xFF);
   3ebf0:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3ebf4:	87 ff       	sbrs	r24, 7
    } while ((res & 0x80) && --n);
   3ebf6:	02 c0       	rjmp	.+4      	; 0x3ebfc <send_cmd+0x76>
   3ebf8:	c1 50       	subi	r28, 0x01	; 1
   3ebfa:	c9 f7       	brne	.-14     	; 0x3ebee <send_cmd+0x68>
   3ebfc:	df 91       	pop	r29

    return res;			/* Return with the response value */
}
   3ebfe:	cf 91       	pop	r28
   3ec00:	1f 91       	pop	r17
   3ec02:	0f 91       	pop	r16
   3ec04:	ff 90       	pop	r15
   3ec06:	08 95       	ret

0003ec08 <disk_initialize>:
   3ec08:	df 92       	push	r13
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
   3ec0a:	ef 92       	push	r14
   3ec0c:	ff 92       	push	r15
   3ec0e:	0f 93       	push	r16
   3ec10:	1f 93       	push	r17
   3ec12:	cf 93       	push	r28
   3ec14:	df 93       	push	r29
   3ec16:	00 d0       	rcall	.+0      	; 0x3ec18 <disk_initialize+0x10>
   3ec18:	1f 92       	push	r1
   3ec1a:	cd b7       	in	r28, 0x3d	; 61
   3ec1c:	de b7       	in	r29, 0x3e	; 62
    BYTE n, cmd, ty, ocr[4];
    UINT tmr;


    SPIInit();							/* Initialize ports to control MMC */
   3ec1e:	0f 94 2c fe 	call	0x3fc58	; 0x3fc58 <SPIInit>
	DDRJ |= (1<<7);
   3ec22:	80 91 04 01 	lds	r24, 0x0104
   3ec26:	80 68       	ori	r24, 0x80	; 128
   3ec28:	80 93 04 01 	sts	0x0104, r24
   3ec2c:	84 e6       	ldi	r24, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3ec2e:	ef e8       	ldi	r30, 0x8F	; 143
   3ec30:	f1 e0       	ldi	r31, 0x01	; 1
   3ec32:	31 97       	sbiw	r30, 0x01	; 1
   3ec34:	f1 f7       	brne	.-4      	; 0x3ec32 <disk_initialize+0x2a>
   3ec36:	00 c0       	rjmp	.+0      	; 0x3ec38 <disk_initialize+0x30>
   3ec38:	00 00       	nop
   3ec3a:	81 50       	subi	r24, 0x01	; 1
    for (n = 100; n; n--) dly_100us();	/* 10ms delay */
   3ec3c:	c1 f7       	brne	.-16     	; 0x3ec2e <disk_initialize+0x26>
   3ec3e:	1a e0       	ldi	r17, 0x0A	; 10
    for (n = 10; n; n--)
    	deselect();	/* 80 Dummy clocks with CS=H */
   3ec40:	80 91 05 01 	lds	r24, 0x0105
   3ec44:	80 68       	ori	r24, 0x80	; 128
   3ec46:	80 93 05 01 	sts	0x0105, r24
   3ec4a:	8f ef       	ldi	r24, 0xFF	; 255
   3ec4c:	0f 94 39 fe 	call	0x3fc72	; 0x3fc72 <SPIXfer>
   3ec50:	11 50       	subi	r17, 0x01	; 1


    SPIInit();							/* Initialize ports to control MMC */
	DDRJ |= (1<<7);
    for (n = 100; n; n--) dly_100us();	/* 10ms delay */
    for (n = 10; n; n--)
   3ec52:	b1 f7       	brne	.-20     	; 0x3ec40 <disk_initialize+0x38>
    	deselect();	/* 80 Dummy clocks with CS=H */

    ty = 0;
    if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
   3ec54:	40 e0       	ldi	r20, 0x00	; 0
   3ec56:	50 e0       	ldi	r21, 0x00	; 0
   3ec58:	ba 01       	movw	r22, r20
   3ec5a:	80 e4       	ldi	r24, 0x40	; 64
   3ec5c:	94 df       	rcall	.-216    	; 0x3eb86 <send_cmd>
   3ec5e:	81 30       	cpi	r24, 0x01	; 1
   3ec60:	09 f0       	breq	.+2      	; 0x3ec64 <disk_initialize+0x5c>
   3ec62:	81 c0       	rjmp	.+258    	; 0x3ed66 <disk_initialize+0x15e>
   3ec64:	4a ea       	ldi	r20, 0xAA	; 170
        if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
   3ec66:	51 e0       	ldi	r21, 0x01	; 1
   3ec68:	60 e0       	ldi	r22, 0x00	; 0
   3ec6a:	70 e0       	ldi	r23, 0x00	; 0
   3ec6c:	88 e4       	ldi	r24, 0x48	; 72
   3ec6e:	8b df       	rcall	.-234    	; 0x3eb86 <send_cmd>
   3ec70:	81 30       	cpi	r24, 0x01	; 1
   3ec72:	69 f5       	brne	.+90     	; 0x3ecce <disk_initialize+0xc6>
   3ec74:	8e 01       	movw	r16, r28
   3ec76:	0f 5f       	subi	r16, 0xFF	; 255
   3ec78:	1f 4f       	sbci	r17, 0xFF	; 255
   3ec7a:	78 01       	movw	r14, r16
   3ec7c:	24 e0       	ldi	r18, 0x04	; 4
   3ec7e:	d2 2e       	mov	r13, r18
   3ec80:	d0 0e       	add	r13, r16
   3ec82:	8f ef       	ldi	r24, 0xFF	; 255
   3ec84:	f6 d7       	rcall	.+4076   	; 0x3fc72 <SPIXfer>
            for (n = 0; n < 4; n++) ocr[n] = SPIXfer(0xFF);		/* Get trailing return value of R7 resp */
   3ec86:	f7 01       	movw	r30, r14
   3ec88:	81 93       	st	Z+, r24
   3ec8a:	7f 01       	movw	r14, r30
   3ec8c:	de 12       	cpse	r13, r30
   3ec8e:	f9 cf       	rjmp	.-14     	; 0x3ec82 <disk_initialize+0x7a>
   3ec90:	8b 81       	ldd	r24, Y+3	; 0x03
   3ec92:	81 30       	cpi	r24, 0x01	; 1
   3ec94:	09 f0       	breq	.+2      	; 0x3ec98 <disk_initialize+0x90>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
   3ec96:	67 c0       	rjmp	.+206    	; 0x3ed66 <disk_initialize+0x15e>
   3ec98:	8c 81       	ldd	r24, Y+4	; 0x04
   3ec9a:	8a 3a       	cpi	r24, 0xAA	; 170
   3ec9c:	09 f0       	breq	.+2      	; 0x3eca0 <disk_initialize+0x98>
   3ec9e:	63 c0       	rjmp	.+198    	; 0x3ed66 <disk_initialize+0x15e>
   3eca0:	90 e1       	ldi	r25, 0x10	; 16
   3eca2:	e9 2e       	mov	r14, r25
   3eca4:	97 e2       	ldi	r25, 0x27	; 39
   3eca6:	f9 2e       	mov	r15, r25
   3eca8:	40 e0       	ldi	r20, 0x00	; 0
   3ecaa:	50 e0       	ldi	r21, 0x00	; 0
   3ecac:	60 e0       	ldi	r22, 0x00	; 0
                for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
   3ecae:	70 e4       	ldi	r23, 0x40	; 64
   3ecb0:	89 ee       	ldi	r24, 0xE9	; 233
   3ecb2:	69 df       	rcall	.-302    	; 0x3eb86 <send_cmd>
   3ecb4:	88 23       	and	r24, r24
   3ecb6:	69 f1       	breq	.+90     	; 0x3ed12 <disk_initialize+0x10a>
   3ecb8:	8f e8       	ldi	r24, 0x8F	; 143
   3ecba:	91 e0       	ldi	r25, 0x01	; 1
   3ecbc:	01 97       	sbiw	r24, 0x01	; 1
   3ecbe:	f1 f7       	brne	.-4      	; 0x3ecbc <disk_initialize+0xb4>
   3ecc0:	00 c0       	rjmp	.+0      	; 0x3ecc2 <disk_initialize+0xba>
   3ecc2:	00 00       	nop
   3ecc4:	91 e0       	ldi	r25, 0x01	; 1
   3ecc6:	e9 1a       	sub	r14, r25
   3ecc8:	f1 08       	sbc	r15, r1
   3ecca:	71 f7       	brne	.-36     	; 0x3eca8 <disk_initialize+0xa0>
   3eccc:	4c c0       	rjmp	.+152    	; 0x3ed66 <disk_initialize+0x15e>
   3ecce:	40 e0       	ldi	r20, 0x00	; 0
   3ecd0:	50 e0       	ldi	r21, 0x00	; 0
   3ecd2:	ba 01       	movw	r22, r20
   3ecd4:	89 ee       	ldi	r24, 0xE9	; 233
                    for (n = 0; n < 4; n++) ocr[n] = SPIXfer(0xFF);
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
                }
            }
        } else {							/* SDv1 or MMCv3 */
            if (send_cmd(ACMD41, 0) <= 1) 	{
   3ecd6:	57 df       	rcall	.-338    	; 0x3eb86 <send_cmd>
   3ecd8:	82 30       	cpi	r24, 0x02	; 2
   3ecda:	18 f0       	brcs	.+6      	; 0x3ece2 <disk_initialize+0xda>
   3ecdc:	11 e0       	ldi	r17, 0x01	; 1
   3ecde:	01 e4       	ldi	r16, 0x41	; 65
   3ece0:	02 c0       	rjmp	.+4      	; 0x3ece6 <disk_initialize+0xde>
   3ece2:	12 e0       	ldi	r17, 0x02	; 2
   3ece4:	09 ee       	ldi	r16, 0xE9	; 233
                ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
            } else {
                ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
   3ece6:	80 e1       	ldi	r24, 0x10	; 16
   3ece8:	e8 2e       	mov	r14, r24
   3ecea:	87 e2       	ldi	r24, 0x27	; 39
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
                }
            }
        } else {							/* SDv1 or MMCv3 */
            if (send_cmd(ACMD41, 0) <= 1) 	{
                ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
   3ecec:	f8 2e       	mov	r15, r24
   3ecee:	40 e0       	ldi	r20, 0x00	; 0
            } else {
                ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
   3ecf0:	50 e0       	ldi	r21, 0x00	; 0
   3ecf2:	ba 01       	movw	r22, r20
   3ecf4:	80 2f       	mov	r24, r16
   3ecf6:	47 df       	rcall	.-370    	; 0x3eb86 <send_cmd>
            }
            for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
   3ecf8:	88 23       	and	r24, r24
   3ecfa:	69 f1       	breq	.+90     	; 0x3ed56 <disk_initialize+0x14e>
   3ecfc:	8f e8       	ldi	r24, 0x8F	; 143
   3ecfe:	91 e0       	ldi	r25, 0x01	; 1
   3ed00:	01 97       	sbiw	r24, 0x01	; 1
   3ed02:	f1 f7       	brne	.-4      	; 0x3ed00 <disk_initialize+0xf8>
   3ed04:	00 c0       	rjmp	.+0      	; 0x3ed06 <disk_initialize+0xfe>
   3ed06:	00 00       	nop
   3ed08:	91 e0       	ldi	r25, 0x01	; 1
   3ed0a:	e9 1a       	sub	r14, r25
   3ed0c:	f1 08       	sbc	r15, r1
   3ed0e:	79 f7       	brne	.-34     	; 0x3ecee <disk_initialize+0xe6>
   3ed10:	2a c0       	rjmp	.+84     	; 0x3ed66 <disk_initialize+0x15e>
   3ed12:	40 e0       	ldi	r20, 0x00	; 0
   3ed14:	50 e0       	ldi	r21, 0x00	; 0
   3ed16:	ba 01       	movw	r22, r20
   3ed18:	8a e7       	ldi	r24, 0x7A	; 122
   3ed1a:	35 df       	rcall	.-406    	; 0x3eb86 <send_cmd>
   3ed1c:	81 11       	cpse	r24, r1
    if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
        if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
            for (n = 0; n < 4; n++) ocr[n] = SPIXfer(0xFF);		/* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
                for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
                if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
   3ed1e:	23 c0       	rjmp	.+70     	; 0x3ed66 <disk_initialize+0x15e>
   3ed20:	8f ef       	ldi	r24, 0xFF	; 255
   3ed22:	a7 d7       	rcall	.+3918   	; 0x3fc72 <SPIXfer>
   3ed24:	f8 01       	movw	r30, r16
   3ed26:	81 93       	st	Z+, r24
   3ed28:	8f 01       	movw	r16, r30
   3ed2a:	de 12       	cpse	r13, r30
   3ed2c:	f9 cf       	rjmp	.-14     	; 0x3ed20 <disk_initialize+0x118>
                    for (n = 0; n < 4; n++) ocr[n] = SPIXfer(0xFF);
   3ed2e:	89 81       	ldd	r24, Y+1	; 0x01
   3ed30:	86 fd       	sbrc	r24, 6
   3ed32:	02 c0       	rjmp	.+4      	; 0x3ed38 <disk_initialize+0x130>
   3ed34:	14 e0       	ldi	r17, 0x04	; 4
   3ed36:	01 c0       	rjmp	.+2      	; 0x3ed3a <disk_initialize+0x132>
   3ed38:	1c e0       	ldi	r17, 0x0C	; 12
   3ed3a:	10 93 51 05 	sts	0x0551, r17
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
   3ed3e:	80 91 05 01 	lds	r24, 0x0105
   3ed42:	80 68       	ori	r24, 0x80	; 128
   3ed44:	80 93 05 01 	sts	0x0105, r24
   3ed48:	8f ef       	ldi	r24, 0xFF	; 255
            for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
            if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
                ty = 0;
        }
    }
    CardType = ty;
   3ed4a:	93 d7       	rcall	.+3878   	; 0x3fc72 <SPIXfer>
   3ed4c:	81 e0       	ldi	r24, 0x01	; 1
    deselect();
   3ed4e:	11 23       	and	r17, r17
   3ed50:	61 f0       	breq	.+24     	; 0x3ed6a <disk_initialize+0x162>
   3ed52:	80 e0       	ldi	r24, 0x00	; 0
   3ed54:	0a c0       	rjmp	.+20     	; 0x3ed6a <disk_initialize+0x162>
   3ed56:	40 e0       	ldi	r20, 0x00	; 0
   3ed58:	52 e0       	ldi	r21, 0x02	; 2
   3ed5a:	60 e0       	ldi	r22, 0x00	; 0
   3ed5c:	70 e0       	ldi	r23, 0x00	; 0

    return ty ? 0 : STA_NOINIT;
   3ed5e:	80 e5       	ldi	r24, 0x50	; 80
   3ed60:	12 df       	rcall	.-476    	; 0x3eb86 <send_cmd>
   3ed62:	88 23       	and	r24, r24
   3ed64:	51 f3       	breq	.-44     	; 0x3ed3a <disk_initialize+0x132>
   3ed66:	10 e0       	ldi	r17, 0x00	; 0
                ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
            } else {
                ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
            }
            for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
            if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
   3ed68:	e8 cf       	rjmp	.-48     	; 0x3ed3a <disk_initialize+0x132>
   3ed6a:	0f 90       	pop	r0
   3ed6c:	0f 90       	pop	r0
   3ed6e:	0f 90       	pop	r0
   3ed70:	0f 90       	pop	r0
   3ed72:	df 91       	pop	r29
   3ed74:	cf 91       	pop	r28
   3ed76:	1f 91       	pop	r17
   3ed78:	0f 91       	pop	r16
                ty = 0;
   3ed7a:	ff 90       	pop	r15
   3ed7c:	ef 90       	pop	r14
    }
    CardType = ty;
    deselect();

    return ty ? 0 : STA_NOINIT;
}
   3ed7e:	df 90       	pop	r13
   3ed80:	08 95       	ret

0003ed82 <disk_readp>:
   3ed82:	cf 92       	push	r12
   3ed84:	df 92       	push	r13
   3ed86:	ef 92       	push	r14
   3ed88:	ff 92       	push	r15
   3ed8a:	0f 93       	push	r16
   3ed8c:	1f 93       	push	r17
   3ed8e:	cf 93       	push	r28
   3ed90:	df 93       	push	r29
   3ed92:	d8 2e       	mov	r13, r24
   3ed94:	c9 2e       	mov	r12, r25
    BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
    DWORD lba,		/* Sector number (LBA) */
    UINT ofs,		/* Byte offset to read from (0..511) */
    UINT cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
   3ed96:	79 01       	movw	r14, r18
    DRESULT res;
    BYTE rc;
    WORD bc;


    if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
   3ed98:	80 91 51 05 	lds	r24, 0x0551
   3ed9c:	83 fd       	sbrc	r24, 3
   3ed9e:	07 c0       	rjmp	.+14     	; 0x3edae <disk_readp+0x2c>
   3eda0:	89 e0       	ldi	r24, 0x09	; 9
   3eda2:	44 0f       	add	r20, r20
   3eda4:	55 1f       	adc	r21, r21
   3eda6:	66 1f       	adc	r22, r22
   3eda8:	77 1f       	adc	r23, r23
   3edaa:	8a 95       	dec	r24
   3edac:	d1 f7       	brne	.-12     	; 0x3eda2 <disk_readp+0x20>

    res = RES_ERROR;
    if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
   3edae:	81 e5       	ldi	r24, 0x51	; 81
   3edb0:	ea de       	rcall	.-556    	; 0x3eb86 <send_cmd>
   3edb2:	88 23       	and	r24, r24
   3edb4:	11 f0       	breq	.+4      	; 0x3edba <disk_readp+0x38>
   3edb6:	c1 e0       	ldi	r28, 0x01	; 1
    WORD bc;


    if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */

    res = RES_ERROR;
   3edb8:	2a c0       	rjmp	.+84     	; 0x3ee0e <disk_readp+0x8c>
   3edba:	c0 e4       	ldi	r28, 0x40	; 64
   3edbc:	dc e9       	ldi	r29, 0x9C	; 156
   3edbe:	8f ef       	ldi	r24, 0xFF	; 255
    if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */

        bc = 40000;
        do {							/* Wait for data packet */
            rc = SPIXfer(0xFF);
   3edc0:	58 d7       	rcall	.+3760   	; 0x3fc72 <SPIXfer>
   3edc2:	8f 3f       	cpi	r24, 0xFF	; 255
   3edc4:	19 f4       	brne	.+6      	; 0x3edcc <disk_readp+0x4a>
        } while (rc == 0xFF && --bc);
   3edc6:	21 97       	sbiw	r28, 0x01	; 1
   3edc8:	d1 f7       	brne	.-12     	; 0x3edbe <disk_readp+0x3c>
   3edca:	f5 cf       	rjmp	.-22     	; 0x3edb6 <disk_readp+0x34>
   3edcc:	8e 3f       	cpi	r24, 0xFE	; 254
   3edce:	99 f7       	brne	.-26     	; 0x3edb6 <disk_readp+0x34>

        if (rc == 0xFE) {				/* A data packet arrived */
   3edd0:	c2 e0       	ldi	r28, 0x02	; 2
   3edd2:	d2 e0       	ldi	r29, 0x02	; 2
   3edd4:	c0 1b       	sub	r28, r16
   3edd6:	d1 0b       	sbc	r29, r17
   3edd8:	ce 19       	sub	r28, r14
   3edda:	df 09       	sbc	r29, r15
            bc = 514 - ofs - cnt;
   3eddc:	e1 14       	cp	r14, r1
   3edde:	f1 04       	cpc	r15, r1

            /* Skip leading bytes */
            if (ofs) {
   3ede0:	19 f4       	brne	.+6      	; 0x3ede8 <disk_readp+0x66>
   3ede2:	ed 2c       	mov	r14, r13
   3ede4:	fc 2c       	mov	r15, r12
   3ede6:	06 c0       	rjmp	.+12     	; 0x3edf4 <disk_readp+0x72>
   3ede8:	8f ef       	ldi	r24, 0xFF	; 255
   3edea:	43 d7       	rcall	.+3718   	; 0x3fc72 <SPIXfer>
                do SPIXfer(0xFF); while (--ofs);
   3edec:	81 e0       	ldi	r24, 0x01	; 1
   3edee:	e8 1a       	sub	r14, r24
   3edf0:	f1 08       	sbc	r15, r1
   3edf2:	f4 cf       	rjmp	.-24     	; 0x3eddc <disk_readp+0x5a>
   3edf4:	8f ef       	ldi	r24, 0xFF	; 255
   3edf6:	3d d7       	rcall	.+3706   	; 0x3fc72 <SPIXfer>
   3edf8:	f7 01       	movw	r30, r14
            }

            /* Receive a part of the sector */
            do {
                *buff++ = SPIXfer(0xFF);
   3edfa:	81 93       	st	Z+, r24
   3edfc:	7f 01       	movw	r14, r30
   3edfe:	01 50       	subi	r16, 0x01	; 1
   3ee00:	11 09       	sbc	r17, r1
   3ee02:	c1 f7       	brne	.-16     	; 0x3edf4 <disk_readp+0x72>
   3ee04:	8f ef       	ldi	r24, 0xFF	; 255
            } while (--cnt);
   3ee06:	35 d7       	rcall	.+3690   	; 0x3fc72 <SPIXfer>
   3ee08:	21 97       	sbiw	r28, 0x01	; 1
   3ee0a:	e1 f7       	brne	.-8      	; 0x3ee04 <disk_readp+0x82>

            /* Skip trailing bytes and CRC */
            do SPIXfer(0xFF); while (--bc);
   3ee0c:	c0 e0       	ldi	r28, 0x00	; 0
   3ee0e:	90 91 05 01 	lds	r25, 0x0105
   3ee12:	90 68       	ori	r25, 0x80	; 128
   3ee14:	90 93 05 01 	sts	0x0105, r25

            res = RES_OK;
        }
    }

    deselect();
   3ee18:	8f ef       	ldi	r24, 0xFF	; 255
   3ee1a:	2b d7       	rcall	.+3670   	; 0x3fc72 <SPIXfer>
   3ee1c:	8c 2f       	mov	r24, r28
   3ee1e:	df 91       	pop	r29
   3ee20:	cf 91       	pop	r28
   3ee22:	1f 91       	pop	r17
   3ee24:	0f 91       	pop	r16
   3ee26:	ff 90       	pop	r15

    return res;
}
   3ee28:	ef 90       	pop	r14
   3ee2a:	df 90       	pop	r13
   3ee2c:	cf 90       	pop	r12
   3ee2e:	08 95       	ret

0003ee30 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
   3ee30:	0f 93       	push	r16
   3ee32:	1f 93       	push	r17
	FATFS *fs = FatFs;
   3ee34:	e0 91 4e 05 	lds	r30, 0x054E
   3ee38:	f0 91 4f 05 	lds	r31, 0x054F


	clst -= 2;
   3ee3c:	9c 01       	movw	r18, r24
   3ee3e:	22 50       	subi	r18, 0x02	; 2
   3ee40:	31 09       	sbc	r19, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   3ee42:	46 81       	ldd	r20, Z+6	; 0x06
   3ee44:	57 81       	ldd	r21, Z+7	; 0x07
   3ee46:	42 50       	subi	r20, 0x02	; 2
   3ee48:	51 09       	sbc	r21, r1
   3ee4a:	24 17       	cp	r18, r20
   3ee4c:	35 07       	cpc	r19, r21
   3ee4e:	68 f4       	brcc	.+26     	; 0x3ee6a <clust2sect+0x3a>
	return (DWORD)clst * fs->csize + fs->database;
   3ee50:	a2 81       	ldd	r26, Z+2	; 0x02
   3ee52:	b0 e0       	ldi	r27, 0x00	; 0
   3ee54:	0f 94 38 ff 	call	0x3fe70	; 0x3fe70 <__umulhisi3>
   3ee58:	00 89       	ldd	r16, Z+16	; 0x10
   3ee5a:	11 89       	ldd	r17, Z+17	; 0x11
   3ee5c:	22 89       	ldd	r18, Z+18	; 0x12
   3ee5e:	33 89       	ldd	r19, Z+19	; 0x13
   3ee60:	60 0f       	add	r22, r16
   3ee62:	71 1f       	adc	r23, r17
   3ee64:	82 1f       	adc	r24, r18
   3ee66:	93 1f       	adc	r25, r19
   3ee68:	03 c0       	rjmp	.+6      	; 0x3ee70 <clust2sect+0x40>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   3ee6a:	60 e0       	ldi	r22, 0x00	; 0
   3ee6c:	70 e0       	ldi	r23, 0x00	; 0
   3ee6e:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
   3ee70:	1f 91       	pop	r17
   3ee72:	0f 91       	pop	r16
   3ee74:	08 95       	ret

0003ee76 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
   3ee76:	cf 93       	push	r28
   3ee78:	df 93       	push	r29
   3ee7a:	fc 01       	movw	r30, r24
	CLUST clst;
	FATFS *fs = FatFs;
   3ee7c:	a0 91 4e 05 	lds	r26, 0x054E
   3ee80:	b0 91 4f 05 	lds	r27, 0x054F


	dj->index = 0;
   3ee84:	11 82       	std	Z+1, r1	; 0x01
   3ee86:	10 82       	st	Z, r1
	clst = dj->sclust;
   3ee88:	84 81       	ldd	r24, Z+4	; 0x04
   3ee8a:	95 81       	ldd	r25, Z+5	; 0x05
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
   3ee8c:	81 30       	cpi	r24, 0x01	; 1
   3ee8e:	91 05       	cpc	r25, r1
   3ee90:	d1 f0       	breq	.+52     	; 0x3eec6 <dir_rewind+0x50>
   3ee92:	16 96       	adiw	r26, 0x06	; 6
   3ee94:	2d 91       	ld	r18, X+
   3ee96:	3c 91       	ld	r19, X
   3ee98:	17 97       	sbiw	r26, 0x07	; 7
   3ee9a:	82 17       	cp	r24, r18
   3ee9c:	93 07       	cpc	r25, r19
   3ee9e:	98 f4       	brcc	.+38     	; 0x3eec6 <dir_rewind+0x50>
   3eea0:	ef 01       	movw	r28, r30
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32))	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
   3eea2:	97 83       	std	Z+7, r25	; 0x07
   3eea4:	86 83       	std	Z+6, r24	; 0x06
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
   3eea6:	00 97       	sbiw	r24, 0x00	; 0
   3eea8:	11 f0       	breq	.+4      	; 0x3eeae <dir_rewind+0x38>
   3eeaa:	c2 df       	rcall	.-124    	; 0x3ee30 <clust2sect>
   3eeac:	06 c0       	rjmp	.+12     	; 0x3eeba <dir_rewind+0x44>
   3eeae:	1c 96       	adiw	r26, 0x0c	; 12
   3eeb0:	6d 91       	ld	r22, X+
   3eeb2:	7d 91       	ld	r23, X+
   3eeb4:	8d 91       	ld	r24, X+
   3eeb6:	9c 91       	ld	r25, X
   3eeb8:	1f 97       	sbiw	r26, 0x0f	; 15
   3eeba:	68 87       	std	Y+8, r22	; 0x08
   3eebc:	79 87       	std	Y+9, r23	; 0x09
   3eebe:	8a 87       	std	Y+10, r24	; 0x0a
   3eec0:	9b 87       	std	Y+11, r25	; 0x0b
   3eec2:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;	/* Seek succeeded */
   3eec4:	01 c0       	rjmp	.+2      	; 0x3eec8 <dir_rewind+0x52>
   3eec6:	81 e0       	ldi	r24, 0x01	; 1


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
   3eec8:	df 91       	pop	r29
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
   3eeca:	cf 91       	pop	r28
   3eecc:	08 95       	ret

0003eece <get_fat>:
   3eece:	0f 93       	push	r16

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
   3eed0:	1f 93       	push	r17
   3eed2:	cf 93       	push	r28
   3eed4:	df 93       	push	r29
   3eed6:	00 d0       	rcall	.+0      	; 0x3eed8 <get_fat+0xa>
   3eed8:	1f 92       	push	r1
   3eeda:	cd b7       	in	r28, 0x3d	; 61
   3eedc:	de b7       	in	r29, 0x3e	; 62
	BYTE buf[4];
	FATFS *fs = FatFs;
   3eede:	e0 91 4e 05 	lds	r30, 0x054E
   3eee2:	f0 91 4f 05 	lds	r31, 0x054F

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
   3eee6:	82 30       	cpi	r24, 0x02	; 2
   3eee8:	91 05       	cpc	r25, r1
   3eeea:	20 f1       	brcs	.+72     	; 0x3ef34 <get_fat+0x66>
   3eeec:	26 81       	ldd	r18, Z+6	; 0x06
   3eeee:	37 81       	ldd	r19, Z+7	; 0x07
   3eef0:	82 17       	cp	r24, r18
   3eef2:	93 07       	cpc	r25, r19
   3eef4:	f8 f4       	brcc	.+62     	; 0x3ef34 <get_fat+0x66>
		return 1;

	switch (fs->fs_type) {
   3eef6:	20 81       	ld	r18, Z
   3eef8:	22 30       	cpi	r18, 0x02	; 2
   3eefa:	e1 f4       	brne	.+56     	; 0x3ef34 <get_fat+0x66>
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
	}
#endif
#if _FS_FAT16
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
   3eefc:	9c 01       	movw	r18, r24
   3eefe:	33 27       	eor	r19, r19
   3ef00:	22 0f       	add	r18, r18
   3ef02:	33 1f       	adc	r19, r19
   3ef04:	89 2f       	mov	r24, r25
   3ef06:	99 27       	eor	r25, r25
   3ef08:	40 85       	ldd	r20, Z+8	; 0x08
   3ef0a:	51 85       	ldd	r21, Z+9	; 0x09
   3ef0c:	62 85       	ldd	r22, Z+10	; 0x0a
   3ef0e:	73 85       	ldd	r23, Z+11	; 0x0b
   3ef10:	48 0f       	add	r20, r24
   3ef12:	59 1f       	adc	r21, r25
   3ef14:	61 1d       	adc	r22, r1
   3ef16:	71 1d       	adc	r23, r1
   3ef18:	02 e0       	ldi	r16, 0x02	; 2
   3ef1a:	10 e0       	ldi	r17, 0x00	; 0
   3ef1c:	ce 01       	movw	r24, r28
   3ef1e:	01 96       	adiw	r24, 0x01	; 1
   3ef20:	30 df       	rcall	.-416    	; 0x3ed82 <disk_readp>
   3ef22:	81 11       	cpse	r24, r1
   3ef24:	07 c0       	rjmp	.+14     	; 0x3ef34 <get_fat+0x66>
   3ef26:	8a 81       	ldd	r24, Y+2	; 0x02
		return LD_WORD(buf);
   3ef28:	90 e0       	ldi	r25, 0x00	; 0
   3ef2a:	98 2f       	mov	r25, r24
   3ef2c:	88 27       	eor	r24, r24
   3ef2e:	29 81       	ldd	r18, Y+1	; 0x01
   3ef30:	82 2b       	or	r24, r18
   3ef32:	02 c0       	rjmp	.+4      	; 0x3ef38 <get_fat+0x6a>
   3ef34:	81 e0       	ldi	r24, 0x01	; 1
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
   3ef36:	90 e0       	ldi	r25, 0x00	; 0
   3ef38:	0f 90       	pop	r0
}
   3ef3a:	0f 90       	pop	r0
   3ef3c:	0f 90       	pop	r0
   3ef3e:	0f 90       	pop	r0
   3ef40:	df 91       	pop	r29
   3ef42:	cf 91       	pop	r28
   3ef44:	1f 91       	pop	r17
   3ef46:	0f 91       	pop	r16
   3ef48:	08 95       	ret

0003ef4a <check_fs>:
   3ef4a:	cf 92       	push	r12
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   3ef4c:	df 92       	push	r13
   3ef4e:	ef 92       	push	r14
   3ef50:	ff 92       	push	r15
   3ef52:	0f 93       	push	r16
   3ef54:	1f 93       	push	r17
   3ef56:	cf 93       	push	r28
   3ef58:	df 93       	push	r29
   3ef5a:	ec 01       	movw	r28, r24
   3ef5c:	6a 01       	movw	r12, r20
   3ef5e:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
   3ef60:	02 e0       	ldi	r16, 0x02	; 2
   3ef62:	10 e0       	ldi	r17, 0x00	; 0
   3ef64:	2e ef       	ldi	r18, 0xFE	; 254
   3ef66:	31 e0       	ldi	r19, 0x01	; 1
   3ef68:	0c df       	rcall	.-488    	; 0x3ed82 <disk_readp>
   3ef6a:	81 11       	cpse	r24, r1
   3ef6c:	1d c0       	rjmp	.+58     	; 0x3efa8 <check_fs+0x5e>
   3ef6e:	29 81       	ldd	r18, Y+1	; 0x01
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
   3ef70:	30 e0       	ldi	r19, 0x00	; 0
   3ef72:	32 2f       	mov	r19, r18
   3ef74:	22 27       	eor	r18, r18
   3ef76:	88 81       	ld	r24, Y
   3ef78:	28 2b       	or	r18, r24
   3ef7a:	25 35       	cpi	r18, 0x55	; 85
   3ef7c:	3a 4a       	sbci	r19, 0xAA	; 170
   3ef7e:	b1 f4       	brne	.+44     	; 0x3efac <check_fs+0x62>
   3ef80:	26 e3       	ldi	r18, 0x36	; 54
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
   3ef82:	30 e0       	ldi	r19, 0x00	; 0
   3ef84:	b7 01       	movw	r22, r14
   3ef86:	a6 01       	movw	r20, r12
   3ef88:	ce 01       	movw	r24, r28
   3ef8a:	fb de       	rcall	.-522    	; 0x3ed82 <disk_readp>
   3ef8c:	81 11       	cpse	r24, r1
   3ef8e:	10 c0       	rjmp	.+32     	; 0x3efb0 <check_fs+0x66>
   3ef90:	29 81       	ldd	r18, Y+1	; 0x01
   3ef92:	30 e0       	ldi	r19, 0x00	; 0
   3ef94:	32 2f       	mov	r19, r18
   3ef96:	22 27       	eor	r18, r18
   3ef98:	88 81       	ld	r24, Y
   3ef9a:	28 2b       	or	r18, r24
   3ef9c:	81 e0       	ldi	r24, 0x01	; 1
   3ef9e:	26 34       	cpi	r18, 0x46	; 70
   3efa0:	31 44       	sbci	r19, 0x41	; 65
   3efa2:	39 f4       	brne	.+14     	; 0x3efb2 <check_fs+0x68>
   3efa4:	80 e0       	ldi	r24, 0x00	; 0
   3efa6:	05 c0       	rjmp	.+10     	; 0x3efb2 <check_fs+0x68>
   3efa8:	83 e0       	ldi	r24, 0x03	; 3
   3efaa:	03 c0       	rjmp	.+6      	; 0x3efb2 <check_fs+0x68>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
		return 3;
   3efac:	82 e0       	ldi	r24, 0x02	; 2
   3efae:	01 c0       	rjmp	.+2      	; 0x3efb2 <check_fs+0x68>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
   3efb0:	81 e0       	ldi	r24, 0x01	; 1
   3efb2:	df 91       	pop	r29

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
   3efb4:	cf 91       	pop	r28
}
   3efb6:	1f 91       	pop	r17
   3efb8:	0f 91       	pop	r16
   3efba:	ff 90       	pop	r15
   3efbc:	ef 90       	pop	r14
   3efbe:	df 90       	pop	r13
   3efc0:	cf 90       	pop	r12
   3efc2:	08 95       	ret

0003efc4 <pf_mount>:
   3efc4:	4f 92       	push	r4
   3efc6:	5f 92       	push	r5
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object */
)
{
   3efc8:	6f 92       	push	r6
   3efca:	7f 92       	push	r7
   3efcc:	8f 92       	push	r8
   3efce:	9f 92       	push	r9
   3efd0:	af 92       	push	r10
   3efd2:	bf 92       	push	r11
   3efd4:	df 92       	push	r13
   3efd6:	ef 92       	push	r14
   3efd8:	ff 92       	push	r15
   3efda:	0f 93       	push	r16
   3efdc:	1f 93       	push	r17
   3efde:	cf 93       	push	r28
   3efe0:	df 93       	push	r29
   3efe2:	cd b7       	in	r28, 0x3d	; 61
   3efe4:	de b7       	in	r29, 0x3e	; 62
   3efe6:	e0 97       	sbiw	r28, 0x30	; 48
   3efe8:	0f b6       	in	r0, 0x3f	; 63
   3efea:	f8 94       	cli
   3efec:	de bf       	out	0x3e, r29	; 62
   3efee:	0f be       	out	0x3f, r0	; 63
   3eff0:	cd bf       	out	0x3d, r28	; 61
   3eff2:	7c 01       	movw	r14, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
   3eff4:	10 92 4f 05 	sts	0x054F, r1
   3eff8:	10 92 4e 05 	sts	0x054E, r1

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
   3effc:	05 de       	rcall	.-1014   	; 0x3ec08 <disk_initialize>
   3effe:	80 fd       	sbrc	r24, 0
   3f000:	29 c1       	rjmp	.+594    	; 0x3f254 <pf_mount+0x290>
   3f002:	40 e0       	ldi	r20, 0x00	; 0
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
   3f004:	50 e0       	ldi	r21, 0x00	; 0
   3f006:	ba 01       	movw	r22, r20
   3f008:	ce 01       	movw	r24, r28
   3f00a:	01 96       	adiw	r24, 0x01	; 1
   3f00c:	9e df       	rcall	.-196    	; 0x3ef4a <check_fs>
   3f00e:	81 30       	cpi	r24, 0x01	; 1
   3f010:	91 f5       	brne	.+100    	; 0x3f076 <pf_mount+0xb2>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
   3f012:	00 e1       	ldi	r16, 0x10	; 16
   3f014:	10 e0       	ldi	r17, 0x00	; 0
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
   3f016:	2e eb       	ldi	r18, 0xBE	; 190
   3f018:	31 e0       	ldi	r19, 0x01	; 1
   3f01a:	40 e0       	ldi	r20, 0x00	; 0
   3f01c:	50 e0       	ldi	r21, 0x00	; 0
   3f01e:	ba 01       	movw	r22, r20
   3f020:	ce 01       	movw	r24, r28
   3f022:	01 96       	adiw	r24, 0x01	; 1
   3f024:	ae de       	rcall	.-676    	; 0x3ed82 <disk_readp>
   3f026:	88 23       	and	r24, r24
   3f028:	11 f0       	breq	.+4      	; 0x3f02e <pf_mount+0x6a>
   3f02a:	81 e0       	ldi	r24, 0x01	; 1
   3f02c:	14 c1       	rjmp	.+552    	; 0x3f256 <pf_mount+0x292>
   3f02e:	8d 81       	ldd	r24, Y+5	; 0x05
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   3f030:	81 11       	cpse	r24, r1
   3f032:	02 c0       	rjmp	.+4      	; 0x3f038 <pf_mount+0x74>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
   3f034:	86 e0       	ldi	r24, 0x06	; 6
   3f036:	0f c1       	rjmp	.+542    	; 0x3f256 <pf_mount+0x292>
   3f038:	8c 85       	ldd	r24, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
   3f03a:	8b 84       	ldd	r8, Y+11	; 0x0b
   3f03c:	91 2c       	mov	r9, r1
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
   3f03e:	a1 2c       	mov	r10, r1
   3f040:	b1 2c       	mov	r11, r1
   3f042:	54 01       	movw	r10, r8
   3f044:	99 24       	eor	r9, r9
   3f046:	88 24       	eor	r8, r8
   3f048:	b8 2a       	or	r11, r24
   3f04a:	89 85       	ldd	r24, Y+9	; 0x09
   3f04c:	95 01       	movw	r18, r10
   3f04e:	84 01       	movw	r16, r8
   3f050:	08 2b       	or	r16, r24
   3f052:	d9 01       	movw	r26, r18
   3f054:	c8 01       	movw	r24, r16
   3f056:	8a 84       	ldd	r8, Y+10	; 0x0a
   3f058:	91 2c       	mov	r9, r1
   3f05a:	98 2c       	mov	r9, r8
   3f05c:	88 24       	eor	r8, r8
   3f05e:	a1 2c       	mov	r10, r1
   3f060:	b1 2c       	mov	r11, r1
   3f062:	88 2a       	or	r8, r24
   3f064:	99 2a       	or	r9, r25
   3f066:	aa 2a       	or	r10, r26
   3f068:	bb 2a       	or	r11, r27
   3f06a:	b5 01       	movw	r22, r10
   3f06c:	a4 01       	movw	r20, r8
   3f06e:	ce 01       	movw	r24, r28
				fmt = check_fs(buf, bsect);	/* Check the partition */
   3f070:	01 96       	adiw	r24, 0x01	; 1
   3f072:	6b df       	rcall	.-298    	; 0x3ef4a <check_fs>
   3f074:	03 c0       	rjmp	.+6      	; 0x3f07c <pf_mount+0xb8>
   3f076:	81 2c       	mov	r8, r1
   3f078:	91 2c       	mov	r9, r1
   3f07a:	54 01       	movw	r10, r8
   3f07c:	83 30       	cpi	r24, 0x03	; 3

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
   3f07e:	a9 f2       	breq	.-86     	; 0x3f02a <pf_mount+0x66>
   3f080:	81 11       	cpse	r24, r1
   3f082:	d8 cf       	rjmp	.-80     	; 0x3f034 <pf_mount+0x70>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   3f084:	04 e2       	ldi	r16, 0x24	; 36
   3f086:	10 e0       	ldi	r17, 0x00	; 0
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
   3f088:	2d e0       	ldi	r18, 0x0D	; 13
   3f08a:	30 e0       	ldi	r19, 0x00	; 0
	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
   3f08c:	b5 01       	movw	r22, r10
   3f08e:	a4 01       	movw	r20, r8
   3f090:	ce 01       	movw	r24, r28
   3f092:	01 96       	adiw	r24, 0x01	; 1
   3f094:	76 de       	rcall	.-788    	; 0x3ed82 <disk_readp>
   3f096:	81 11       	cpse	r24, r1
   3f098:	c8 cf       	rjmp	.-112    	; 0x3f02a <pf_mount+0x66>
   3f09a:	2b 85       	ldd	r18, Y+11	; 0x0b
   3f09c:	30 e0       	ldi	r19, 0x00	; 0
   3f09e:	32 2f       	mov	r19, r18
   3f0a0:	22 27       	eor	r18, r18
   3f0a2:	8a 85       	ldd	r24, Y+10	; 0x0a

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
   3f0a4:	28 2b       	or	r18, r24
   3f0a6:	21 15       	cp	r18, r1
   3f0a8:	31 05       	cpc	r19, r1
   3f0aa:	19 f0       	breq	.+6      	; 0x3f0b2 <pf_mount+0xee>
   3f0ac:	40 e0       	ldi	r20, 0x00	; 0
   3f0ae:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
   3f0b0:	18 c0       	rjmp	.+48     	; 0x3f0e2 <pf_mount+0x11e>
   3f0b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
   3f0b4:	2a 8d       	ldd	r18, Y+26	; 0x1a
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
   3f0b6:	42 2f       	mov	r20, r18
   3f0b8:	50 e0       	ldi	r21, 0x00	; 0
   3f0ba:	60 e0       	ldi	r22, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
   3f0bc:	70 e0       	ldi	r23, 0x00	; 0
   3f0be:	ba 01       	movw	r22, r20
   3f0c0:	55 27       	eor	r21, r21
   3f0c2:	44 27       	eor	r20, r20
   3f0c4:	78 2b       	or	r23, r24
   3f0c6:	88 8d       	ldd	r24, Y+24	; 0x18
   3f0c8:	48 2b       	or	r20, r24
   3f0ca:	89 8d       	ldd	r24, Y+25	; 0x19
   3f0cc:	90 e0       	ldi	r25, 0x00	; 0
   3f0ce:	98 2f       	mov	r25, r24
   3f0d0:	88 27       	eor	r24, r24
   3f0d2:	a0 e0       	ldi	r26, 0x00	; 0
   3f0d4:	b0 e0       	ldi	r27, 0x00	; 0
   3f0d6:	9a 01       	movw	r18, r20
   3f0d8:	ab 01       	movw	r20, r22
   3f0da:	28 2b       	or	r18, r24
   3f0dc:	39 2b       	or	r19, r25
   3f0de:	4a 2b       	or	r20, r26
   3f0e0:	5b 2b       	or	r21, r27
   3f0e2:	ac 81       	ldd	r26, Y+4	; 0x04
   3f0e4:	b0 e0       	ldi	r27, 0x00	; 0
   3f0e6:	d3 d6       	rcall	.+3494   	; 0x3fe8e <__muluhisi3>
   3f0e8:	2b 01       	movw	r4, r22
   3f0ea:	3c 01       	movw	r6, r24

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
   3f0ec:	6b 81       	ldd	r22, Y+3	; 0x03
   3f0ee:	70 e0       	ldi	r23, 0x00	; 0
   3f0f0:	76 2f       	mov	r23, r22
   3f0f2:	66 27       	eor	r22, r22
   3f0f4:	8a 81       	ldd	r24, Y+2	; 0x02
   3f0f6:	68 2b       	or	r22, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
   3f0f8:	9b 01       	movw	r18, r22
   3f0fa:	40 e0       	ldi	r20, 0x00	; 0
   3f0fc:	50 e0       	ldi	r21, 0x00	; 0
   3f0fe:	29 a7       	std	Y+41, r18	; 0x29
   3f100:	3a a7       	std	Y+42, r19	; 0x2a
   3f102:	4b a7       	std	Y+43, r20	; 0x2b
   3f104:	5c a7       	std	Y+44, r21	; 0x2c
   3f106:	82 0e       	add	r8, r18
   3f108:	93 1e       	adc	r9, r19
   3f10a:	a4 1e       	adc	r10, r20
   3f10c:	b5 1e       	adc	r11, r21
   3f10e:	d7 01       	movw	r26, r14
   3f110:	18 96       	adiw	r26, 0x08	; 8
   3f112:	8d 92       	st	X+, r8
   3f114:	9d 92       	st	X+, r9
   3f116:	ad 92       	st	X+, r10
   3f118:	bc 92       	st	X, r11
   3f11a:	1b 97       	sbiw	r26, 0x0b	; 11
   3f11c:	d9 80       	ldd	r13, Y+1	; 0x01
   3f11e:	12 96       	adiw	r26, 0x02	; 2
   3f120:	dc 92       	st	X, r13
   3f122:	12 97       	sbiw	r26, 0x02	; 2
   3f124:	4e 81       	ldd	r20, Y+6	; 0x06
   3f126:	50 e0       	ldi	r21, 0x00	; 0
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
   3f128:	54 2f       	mov	r21, r20
   3f12a:	44 27       	eor	r20, r20
   3f12c:	2d 81       	ldd	r18, Y+5	; 0x05
   3f12e:	42 2b       	or	r20, r18
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
   3f130:	15 96       	adiw	r26, 0x05	; 5
   3f132:	5c 93       	st	X, r21
   3f134:	4e 93       	st	-X, r20
   3f136:	14 97       	sbiw	r26, 0x04	; 4
   3f138:	28 85       	ldd	r18, Y+8	; 0x08
   3f13a:	30 e0       	ldi	r19, 0x00	; 0
   3f13c:	32 2f       	mov	r19, r18
   3f13e:	22 27       	eor	r18, r18
   3f140:	ef 81       	ldd	r30, Y+7	; 0x07
   3f142:	2e 2b       	or	r18, r30
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
   3f144:	21 15       	cp	r18, r1
   3f146:	31 05       	cpc	r19, r1
   3f148:	21 f0       	breq	.+8      	; 0x3f152 <pf_mount+0x18e>
   3f14a:	89 01       	movw	r16, r18
   3f14c:	20 e0       	ldi	r18, 0x00	; 0
   3f14e:	30 e0       	ldi	r19, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
   3f150:	22 c0       	rjmp	.+68     	; 0x3f196 <pf_mount+0x1d2>
   3f152:	ff 89       	ldd	r31, Y+23	; 0x17
   3f154:	ee 89       	ldd	r30, Y+22	; 0x16

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
   3f156:	0e 2f       	mov	r16, r30
   3f158:	10 e0       	ldi	r17, 0x00	; 0
   3f15a:	20 e0       	ldi	r18, 0x00	; 0
   3f15c:	30 e0       	ldi	r19, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
   3f15e:	98 01       	movw	r18, r16
   3f160:	11 27       	eor	r17, r17
   3f162:	00 27       	eor	r16, r16
   3f164:	3f 2b       	or	r19, r31
   3f166:	ec 89       	ldd	r30, Y+20	; 0x14
   3f168:	c9 01       	movw	r24, r18
   3f16a:	b8 01       	movw	r22, r16
   3f16c:	6e 2b       	or	r22, r30
   3f16e:	6d a7       	std	Y+45, r22	; 0x2d
   3f170:	7e a7       	std	Y+46, r23	; 0x2e
   3f172:	8f a7       	std	Y+47, r24	; 0x2f
   3f174:	98 ab       	std	Y+48, r25	; 0x30
   3f176:	ed 89       	ldd	r30, Y+21	; 0x15
   3f178:	ae 2f       	mov	r26, r30
   3f17a:	b0 e0       	ldi	r27, 0x00	; 0
   3f17c:	fa 2f       	mov	r31, r26
   3f17e:	ee 27       	eor	r30, r30
   3f180:	cf 01       	movw	r24, r30
   3f182:	a0 e0       	ldi	r26, 0x00	; 0
   3f184:	b0 e0       	ldi	r27, 0x00	; 0
   3f186:	0d a5       	ldd	r16, Y+45	; 0x2d
   3f188:	1e a5       	ldd	r17, Y+46	; 0x2e
   3f18a:	2f a5       	ldd	r18, Y+47	; 0x2f
   3f18c:	38 a9       	ldd	r19, Y+48	; 0x30
   3f18e:	08 2b       	or	r16, r24
   3f190:	19 2b       	or	r17, r25
   3f192:	2a 2b       	or	r18, r26
   3f194:	3b 2b       	or	r19, r27
   3f196:	84 e0       	ldi	r24, 0x04	; 4
   3f198:	56 95       	lsr	r21
   3f19a:	47 95       	ror	r20
   3f19c:	8a 95       	dec	r24
   3f19e:	e1 f7       	brne	.-8      	; 0x3f198 <pf_mount+0x1d4>
   3f1a0:	ba 01       	movw	r22, r20
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
   3f1a2:	80 e0       	ldi	r24, 0x00	; 0
   3f1a4:	90 e0       	ldi	r25, 0x00	; 0
   3f1a6:	6d a3       	std	Y+37, r22	; 0x25
   3f1a8:	7e a3       	std	Y+38, r23	; 0x26
   3f1aa:	8f a3       	std	Y+39, r24	; 0x27
   3f1ac:	98 a7       	std	Y+40, r25	; 0x28
   3f1ae:	d9 01       	movw	r26, r18
   3f1b0:	c8 01       	movw	r24, r16
   3f1b2:	49 a5       	ldd	r20, Y+41	; 0x29
   3f1b4:	5a a5       	ldd	r21, Y+42	; 0x2a
   3f1b6:	6b a5       	ldd	r22, Y+43	; 0x2b
   3f1b8:	7c a5       	ldd	r23, Y+44	; 0x2c
   3f1ba:	84 1b       	sub	r24, r20
   3f1bc:	95 0b       	sbc	r25, r21
   3f1be:	a6 0b       	sbc	r26, r22
   3f1c0:	b7 0b       	sbc	r27, r23
   3f1c2:	84 19       	sub	r24, r4
   3f1c4:	95 09       	sbc	r25, r5
   3f1c6:	a6 09       	sbc	r26, r6
   3f1c8:	b7 09       	sbc	r27, r7
   3f1ca:	bc 01       	movw	r22, r24
   3f1cc:	cd 01       	movw	r24, r26
   3f1ce:	0d a1       	ldd	r16, Y+37	; 0x25
   3f1d0:	1e a1       	ldd	r17, Y+38	; 0x26
   3f1d2:	2f a1       	ldd	r18, Y+39	; 0x27
   3f1d4:	38 a5       	ldd	r19, Y+40	; 0x28
   3f1d6:	60 1b       	sub	r22, r16
   3f1d8:	71 0b       	sbc	r23, r17
   3f1da:	82 0b       	sbc	r24, r18
   3f1dc:	93 0b       	sbc	r25, r19
   3f1de:	2d 2d       	mov	r18, r13
   3f1e0:	30 e0       	ldi	r19, 0x00	; 0
   3f1e2:	40 e0       	ldi	r20, 0x00	; 0
   3f1e4:	50 e0       	ldi	r21, 0x00	; 0
   3f1e6:	69 d6       	rcall	.+3282   	; 0x3feba <__udivmodsi4>
   3f1e8:	da 01       	movw	r26, r20
		) / fs->csize + 2;
   3f1ea:	c9 01       	movw	r24, r18
   3f1ec:	02 96       	adiw	r24, 0x02	; 2
   3f1ee:	a1 1d       	adc	r26, r1
   3f1f0:	b1 1d       	adc	r27, r1
   3f1f2:	f7 01       	movw	r30, r14
   3f1f4:	97 83       	std	Z+7, r25	; 0x07
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
   3f1f6:	86 83       	std	Z+6, r24	; 0x06
   3f1f8:	da 01       	movw	r26, r20
   3f1fa:	c9 01       	movw	r24, r18
   3f1fc:	86 5f       	subi	r24, 0xF6	; 246
   3f1fe:	9f 40       	sbci	r25, 0x0F	; 15
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
   3f200:	a1 09       	sbc	r26, r1
   3f202:	b1 09       	sbc	r27, r1
   3f204:	8f 3f       	cpi	r24, 0xFF	; 255

	fmt = 0;							/* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
   3f206:	9f 4e       	sbci	r25, 0xEF	; 239
   3f208:	a1 05       	cpc	r26, r1
   3f20a:	b1 05       	cpc	r27, r1
   3f20c:	08 f0       	brcs	.+2      	; 0x3f210 <pf_mount+0x24c>
   3f20e:	12 cf       	rjmp	.-476    	; 0x3f034 <pf_mount+0x70>
   3f210:	82 e0       	ldi	r24, 0x02	; 2
   3f212:	d7 01       	movw	r26, r14
   3f214:	8c 93       	st	X, r24
   3f216:	84 0c       	add	r8, r4
   3f218:	95 1c       	adc	r9, r5
   3f21a:	a6 1c       	adc	r10, r6
   3f21c:	b7 1c       	adc	r11, r7
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
   3f21e:	f7 01       	movw	r30, r14
   3f220:	84 86       	std	Z+12, r8	; 0x0c
   3f222:	95 86       	std	Z+13, r9	; 0x0d

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
   3f224:	a6 86       	std	Z+14, r10	; 0x0e
   3f226:	b7 86       	std	Z+15, r11	; 0x0f
   3f228:	0d a1       	ldd	r16, Y+37	; 0x25
   3f22a:	1e a1       	ldd	r17, Y+38	; 0x26
   3f22c:	2f a1       	ldd	r18, Y+39	; 0x27
   3f22e:	38 a5       	ldd	r19, Y+40	; 0x28
   3f230:	80 0e       	add	r8, r16
   3f232:	91 1e       	adc	r9, r17
   3f234:	a2 1e       	adc	r10, r18
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
   3f236:	b3 1e       	adc	r11, r19
   3f238:	50 96       	adiw	r26, 0x10	; 16
   3f23a:	8d 92       	st	X+, r8
   3f23c:	9d 92       	st	X+, r9
   3f23e:	ad 92       	st	X+, r10
   3f240:	bc 92       	st	X, r11
   3f242:	53 97       	sbiw	r26, 0x13	; 19
   3f244:	11 96       	adiw	r26, 0x01	; 1
   3f246:	1c 92       	st	X, r1
   3f248:	f0 92 4f 05 	sts	0x054F, r15
   3f24c:	e0 92 4e 05 	sts	0x054E, r14
   3f250:	80 e0       	ldi	r24, 0x00	; 0

	fs->flag = 0;
   3f252:	01 c0       	rjmp	.+2      	; 0x3f256 <pf_mount+0x292>
   3f254:	82 e0       	ldi	r24, 0x02	; 2
	FatFs = fs;
   3f256:	e0 96       	adiw	r28, 0x30	; 48
   3f258:	0f b6       	in	r0, 0x3f	; 63
   3f25a:	f8 94       	cli
   3f25c:	de bf       	out	0x3e, r29	; 62

	return FR_OK;
   3f25e:	0f be       	out	0x3f, r0	; 63
   3f260:	cd bf       	out	0x3d, r28	; 61


	FatFs = 0;

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
   3f262:	df 91       	pop	r29

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
   3f264:	cf 91       	pop	r28
   3f266:	1f 91       	pop	r17
   3f268:	0f 91       	pop	r16
   3f26a:	ff 90       	pop	r15
   3f26c:	ef 90       	pop	r14
   3f26e:	df 90       	pop	r13
   3f270:	bf 90       	pop	r11
   3f272:	af 90       	pop	r10
   3f274:	9f 90       	pop	r9
   3f276:	8f 90       	pop	r8
   3f278:	7f 90       	pop	r7
   3f27a:	6f 90       	pop	r6
   3f27c:	5f 90       	pop	r5
   3f27e:	4f 90       	pop	r4
   3f280:	08 95       	ret

0003f282 <pf_open>:
   3f282:	af 92       	push	r10
   3f284:	bf 92       	push	r11
   3f286:	cf 92       	push	r12
   3f288:	df 92       	push	r13
   3f28a:	ef 92       	push	r14
   3f28c:	ff 92       	push	r15
   3f28e:	0f 93       	push	r16
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
   3f290:	1f 93       	push	r17
   3f292:	cf 93       	push	r28
   3f294:	df 93       	push	r29
   3f296:	cd b7       	in	r28, 0x3d	; 61
   3f298:	de b7       	in	r29, 0x3e	; 62
   3f29a:	e8 97       	sbiw	r28, 0x38	; 56
   3f29c:	0f b6       	in	r0, 0x3f	; 63
   3f29e:	f8 94       	cli
   3f2a0:	de bf       	out	0x3e, r29	; 62
   3f2a2:	0f be       	out	0x3f, r0	; 63
   3f2a4:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
   3f2a6:	e0 90 4e 05 	lds	r14, 0x054E
   3f2aa:	f0 90 4f 05 	lds	r15, 0x054F


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3f2ae:	e1 14       	cp	r14, r1
   3f2b0:	f1 04       	cpc	r15, r1
   3f2b2:	09 f4       	brne	.+2      	; 0x3f2b6 <pf_open+0x34>
   3f2b4:	03 c1       	rjmp	.+518    	; 0x3f4bc <pf_open+0x23a>

	fs->flag = 0;
   3f2b6:	f7 01       	movw	r30, r14
   3f2b8:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
   3f2ba:	9e 01       	movw	r18, r28
   3f2bc:	2f 5d       	subi	r18, 0xDF	; 223
   3f2be:	3f 4f       	sbci	r19, 0xFF	; 255
   3f2c0:	38 ab       	std	Y+48, r19	; 0x30
   3f2c2:	2f a7       	std	Y+47, r18	; 0x2f
   3f2c4:	fc 01       	movw	r30, r24
   3f2c6:	2e 2f       	mov	r18, r30
   3f2c8:	9f 2f       	mov	r25, r31
)
{
	FRESULT res;


	while (*path == ' ') path++;		/* Strip leading spaces */
   3f2ca:	81 91       	ld	r24, Z+
   3f2cc:	80 32       	cpi	r24, 0x20	; 32
   3f2ce:	d9 f3       	breq	.-10     	; 0x3f2c6 <pf_open+0x44>
   3f2d0:	c2 2e       	mov	r12, r18
   3f2d2:	d9 2e       	mov	r13, r25
	if (*path == '/') path++;			/* Strip heading separator if exist */
   3f2d4:	8f 32       	cpi	r24, 0x2F	; 47
   3f2d6:	19 f4       	brne	.+6      	; 0x3f2de <pf_open+0x5c>
   3f2d8:	ff ef       	ldi	r31, 0xFF	; 255
   3f2da:	cf 1a       	sub	r12, r31
   3f2dc:	df 0a       	sbc	r13, r31
	dj->sclust = 0;						/* Set start directory (always root dir) */
   3f2de:	1a aa       	std	Y+50, r1	; 0x32
   3f2e0:	19 aa       	std	Y+49, r1	; 0x31

	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
   3f2e2:	f6 01       	movw	r30, r12
   3f2e4:	80 81       	ld	r24, Z
   3f2e6:	80 32       	cpi	r24, 0x20	; 32
   3f2e8:	08 f0       	brcs	.+2      	; 0x3f2ec <pf_open+0x6a>
   3f2ea:	5d c0       	rjmp	.+186    	; 0x3f3a6 <pf_open+0x124>
		res = dir_rewind(dj);
   3f2ec:	ce 01       	movw	r24, r28
   3f2ee:	8d 96       	adiw	r24, 0x2d	; 45
   3f2f0:	c2 dd       	rcall	.-1148   	; 0x3ee76 <dir_rewind>
   3f2f2:	19 82       	std	Y+1, r1	; 0x01
		dir[0] = 0;
   3f2f4:	88 23       	and	r24, r24
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
   3f2f6:	09 f4       	brne	.+2      	; 0x3f2fa <pf_open+0x78>
   3f2f8:	b1 c0       	rjmp	.+354    	; 0x3f45c <pf_open+0x1da>
   3f2fa:	ec c0       	rjmp	.+472    	; 0x3f4d4 <pf_open+0x252>
   3f2fc:	2f 32       	cpi	r18, 0x2F	; 47
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
   3f2fe:	99 f0       	breq	.+38     	; 0x3f326 <pf_open+0xa4>
   3f300:	2e 32       	cpi	r18, 0x2E	; 46
		if (c == '.' || i >= ni) {
   3f302:	09 f4       	brne	.+2      	; 0x3f306 <pf_open+0x84>
   3f304:	e1 c0       	rjmp	.+450    	; 0x3f4c8 <pf_open+0x246>
   3f306:	93 17       	cp	r25, r19
   3f308:	70 f4       	brcc	.+28     	; 0x3f326 <pf_open+0xa4>
   3f30a:	f8 01       	movw	r30, r16
			sfn[i++] = d;
		} else
#endif
		{						/* Single byte code */
			if (_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
   3f30c:	e9 0f       	add	r30, r25
   3f30e:	f1 1d       	adc	r31, r1
   3f310:	20 83       	st	Z, r18
   3f312:	9f 5f       	subi	r25, 0xFF	; 255
   3f314:	84 2f       	mov	r24, r20
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
   3f316:	41 e0       	ldi	r20, 0x01	; 1
   3f318:	48 0f       	add	r20, r24
   3f31a:	f6 01       	movw	r30, r12
   3f31c:	e8 0f       	add	r30, r24
   3f31e:	f1 1d       	adc	r31, r1
   3f320:	20 81       	ld	r18, Z
   3f322:	21 32       	cpi	r18, 0x21	; 33
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
   3f324:	58 f7       	brcc	.-42     	; 0x3f2fc <pf_open+0x7a>
   3f326:	c4 0e       	add	r12, r20
		{						/* Single byte code */
			if (_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
   3f328:	d1 1c       	adc	r13, r1
   3f32a:	81 e0       	ldi	r24, 0x01	; 1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
   3f32c:	21 32       	cpi	r18, 0x21	; 33
   3f32e:	08 f0       	brcs	.+2      	; 0x3f332 <pf_open+0xb0>
   3f330:	80 e0       	ldi	r24, 0x00	; 0
   3f332:	f8 01       	movw	r30, r16
   3f334:	83 87       	std	Z+11, r24	; 0x0b
   3f336:	ce 01       	movw	r24, r28
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
   3f338:	8d 96       	adiw	r24, 0x2d	; 45
   3f33a:	9d dd       	rcall	.-1222   	; 0x3ee76 <dir_rewind>
   3f33c:	81 11       	cpse	r24, r1
   3f33e:	ca c0       	rjmp	.+404    	; 0x3f4d4 <pf_open+0x252>
	if (res != FR_OK) return res;
   3f340:	2d a5       	ldd	r18, Y+45	; 0x2d
   3f342:	3e a5       	ldd	r19, Y+46	; 0x2e

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
   3f344:	2f 70       	andi	r18, 0x0F	; 15
   3f346:	33 27       	eor	r19, r19
   3f348:	f5 e0       	ldi	r31, 0x05	; 5
   3f34a:	22 0f       	add	r18, r18
   3f34c:	33 1f       	adc	r19, r19
   3f34e:	fa 95       	dec	r31
   3f350:	e1 f7       	brne	.-8      	; 0x3f34a <pf_open+0xc8>
   3f352:	4d a9       	ldd	r20, Y+53	; 0x35
   3f354:	5e a9       	ldd	r21, Y+54	; 0x36
   3f356:	6f a9       	ldd	r22, Y+55	; 0x37
   3f358:	78 ad       	ldd	r23, Y+56	; 0x38
   3f35a:	00 e2       	ldi	r16, 0x20	; 32
   3f35c:	10 e0       	ldi	r17, 0x00	; 0
   3f35e:	ce 01       	movw	r24, r28
   3f360:	01 96       	adiw	r24, 0x01	; 1
   3f362:	0f dd       	rcall	.-1506   	; 0x3ed82 <disk_readp>
   3f364:	81 11       	cpse	r24, r1
   3f366:	ac c0       	rjmp	.+344    	; 0x3f4c0 <pf_open+0x23e>
   3f368:	89 81       	ldd	r24, Y+1	; 0x01
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
   3f36a:	88 23       	and	r24, r24
   3f36c:	09 f4       	brne	.+2      	; 0x3f370 <pf_open+0xee>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   3f36e:	aa c0       	rjmp	.+340    	; 0x3f4c4 <pf_open+0x242>
   3f370:	bc 84       	ldd	r11, Y+12	; 0x0c
   3f372:	b3 fc       	sbrc	r11, 3
   3f374:	24 c0       	rjmp	.+72     	; 0x3f3be <pf_open+0x13c>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   3f376:	0f a5       	ldd	r16, Y+47	; 0x2f
   3f378:	18 a9       	ldd	r17, Y+48	; 0x30
   3f37a:	4b e0       	ldi	r20, 0x0B	; 11
   3f37c:	50 e0       	ldi	r21, 0x00	; 0
   3f37e:	b8 01       	movw	r22, r16
   3f380:	ce 01       	movw	r24, r28
   3f382:	01 96       	adiw	r24, 0x01	; 1
   3f384:	bc d5       	rcall	.+2936   	; 0x3fefe <memcmp>
   3f386:	89 2b       	or	r24, r25
   3f388:	d1 f4       	brne	.+52     	; 0x3f3be <pf_open+0x13c>
   3f38a:	f8 01       	movw	r30, r16
   3f38c:	83 85       	ldd	r24, Z+11	; 0x0b
   3f38e:	81 11       	cpse	r24, r1
   3f390:	65 c0       	rjmp	.+202    	; 0x3f45c <pf_open+0x1da>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
   3f392:	b4 fe       	sbrs	r11, 4
   3f394:	97 c0       	rjmp	.+302    	; 0x3f4c4 <pf_open+0x242>
   3f396:	8c 8d       	ldd	r24, Y+28	; 0x1c
   3f398:	90 e0       	ldi	r25, 0x00	; 0
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
   3f39a:	98 2f       	mov	r25, r24
   3f39c:	88 27       	eor	r24, r24

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
   3f39e:	2b 8d       	ldd	r18, Y+27	; 0x1b
   3f3a0:	82 2b       	or	r24, r18
   3f3a2:	9a ab       	std	Y+50, r25	; 0x32
   3f3a4:	89 ab       	std	Y+49, r24	; 0x31
   3f3a6:	0f a5       	ldd	r16, Y+47	; 0x2f
   3f3a8:	18 a9       	ldd	r17, Y+48	; 0x30
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
			}
			dj->sclust = get_clust(dir);	/* Follow next */
   3f3aa:	4b e0       	ldi	r20, 0x0B	; 11
   3f3ac:	50 e0       	ldi	r21, 0x00	; 0
   3f3ae:	60 e2       	ldi	r22, 0x20	; 32
   3f3b0:	70 e0       	ldi	r23, 0x00	; 0
#endif
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
   3f3b2:	c8 01       	movw	r24, r16
   3f3b4:	b1 d5       	rcall	.+2914   	; 0x3ff18 <memset>
   3f3b6:	90 e0       	ldi	r25, 0x00	; 0
   3f3b8:	80 e0       	ldi	r24, 0x00	; 0
   3f3ba:	38 e0       	ldi	r19, 0x08	; 8
   3f3bc:	ac cf       	rjmp	.-168    	; 0x3f316 <pf_open+0x94>
   3f3be:	a0 90 4e 05 	lds	r10, 0x054E
	si = i = 0; ni = 8;
   3f3c2:	b0 90 4f 05 	lds	r11, 0x054F
   3f3c6:	0d a5       	ldd	r16, Y+45	; 0x2d
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
   3f3c8:	1e a5       	ldd	r17, Y+46	; 0x2e
   3f3ca:	0f 5f       	subi	r16, 0xFF	; 255
   3f3cc:	1f 4f       	sbci	r17, 0xFF	; 255
   3f3ce:	09 f4       	brne	.+2      	; 0x3f3d2 <pf_open+0x150>


	i = dj->index + 1;
   3f3d0:	79 c0       	rjmp	.+242    	; 0x3f4c4 <pf_open+0x242>
   3f3d2:	8d a9       	ldd	r24, Y+53	; 0x35
   3f3d4:	9e a9       	ldd	r25, Y+54	; 0x36
   3f3d6:	af a9       	ldd	r26, Y+55	; 0x37
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   3f3d8:	b8 ad       	ldd	r27, Y+56	; 0x38
   3f3da:	00 97       	sbiw	r24, 0x00	; 0
   3f3dc:	a1 05       	cpc	r26, r1
   3f3de:	b1 05       	cpc	r27, r1
   3f3e0:	09 f4       	brne	.+2      	; 0x3f3e4 <pf_open+0x162>
   3f3e2:	70 c0       	rjmp	.+224    	; 0x3f4c4 <pf_open+0x242>
   3f3e4:	98 01       	movw	r18, r16
   3f3e6:	2f 70       	andi	r18, 0x0F	; 15
   3f3e8:	33 27       	eor	r19, r19
   3f3ea:	23 2b       	or	r18, r19
   3f3ec:	a1 f5       	brne	.+104    	; 0x3f456 <pf_open+0x1d4>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
   3f3ee:	01 96       	adiw	r24, 0x01	; 1
   3f3f0:	a1 1d       	adc	r26, r1
   3f3f2:	b1 1d       	adc	r27, r1
   3f3f4:	8d ab       	std	Y+53, r24	; 0x35
   3f3f6:	9e ab       	std	Y+54, r25	; 0x36
		dj->sect++;			/* Next sector */
   3f3f8:	af ab       	std	Y+55, r26	; 0x37
   3f3fa:	b8 af       	std	Y+56, r27	; 0x38
   3f3fc:	8b a9       	ldd	r24, Y+51	; 0x33
   3f3fe:	9c a9       	ldd	r25, Y+52	; 0x34
   3f400:	f5 01       	movw	r30, r10
   3f402:	00 97       	sbiw	r24, 0x00	; 0
   3f404:	39 f4       	brne	.+14     	; 0x3f414 <pf_open+0x192>

		if (dj->clust == 0) {	/* Static table */
   3f406:	84 81       	ldd	r24, Z+4	; 0x04
   3f408:	95 81       	ldd	r25, Z+5	; 0x05
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
   3f40a:	08 17       	cp	r16, r24
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
   3f40c:	19 07       	cpc	r17, r25
   3f40e:	08 f0       	brcs	.+2      	; 0x3f412 <pf_open+0x190>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
   3f410:	59 c0       	rjmp	.+178    	; 0x3f4c4 <pf_open+0x242>
   3f412:	21 c0       	rjmp	.+66     	; 0x3f456 <pf_open+0x1d4>
   3f414:	22 81       	ldd	r18, Z+2	; 0x02
   3f416:	30 e0       	ldi	r19, 0x00	; 0
   3f418:	21 50       	subi	r18, 0x01	; 1
   3f41a:	31 09       	sbc	r19, r1
   3f41c:	a8 01       	movw	r20, r16
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   3f41e:	e4 e0       	ldi	r30, 0x04	; 4
   3f420:	56 95       	lsr	r21
   3f422:	47 95       	ror	r20
   3f424:	ea 95       	dec	r30
   3f426:	e1 f7       	brne	.-8      	; 0x3f420 <pf_open+0x19e>
   3f428:	24 23       	and	r18, r20
   3f42a:	35 23       	and	r19, r21
   3f42c:	23 2b       	or	r18, r19
   3f42e:	99 f4       	brne	.+38     	; 0x3f456 <pf_open+0x1d4>
   3f430:	4e dd       	rcall	.-1380   	; 0x3eece <get_fat>
   3f432:	82 30       	cpi	r24, 0x02	; 2
   3f434:	91 05       	cpc	r25, r1
   3f436:	08 f4       	brcc	.+2      	; 0x3f43a <pf_open+0x1b8>
   3f438:	43 c0       	rjmp	.+134    	; 0x3f4c0 <pf_open+0x23e>
				clst = get_fat(dj->clust);		/* Get next cluster */
   3f43a:	f5 01       	movw	r30, r10
   3f43c:	26 81       	ldd	r18, Z+6	; 0x06
				if (clst <= 1) return FR_DISK_ERR;
   3f43e:	37 81       	ldd	r19, Z+7	; 0x07
   3f440:	82 17       	cp	r24, r18
   3f442:	93 07       	cpc	r25, r19
   3f444:	08 f0       	brcs	.+2      	; 0x3f448 <pf_open+0x1c6>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
   3f446:	3e c0       	rjmp	.+124    	; 0x3f4c4 <pf_open+0x242>
   3f448:	9c ab       	std	Y+52, r25	; 0x34
   3f44a:	8b ab       	std	Y+51, r24	; 0x33
   3f44c:	f1 dc       	rcall	.-1566   	; 0x3ee30 <clust2sect>
   3f44e:	6d ab       	std	Y+53, r22	; 0x35
   3f450:	7e ab       	std	Y+54, r23	; 0x36
   3f452:	8f ab       	std	Y+55, r24	; 0x37
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
   3f454:	98 af       	std	Y+56, r25	; 0x38
   3f456:	1e a7       	std	Y+46, r17	; 0x2e
				dj->sect = clust2sect(clst);
   3f458:	0d a7       	std	Y+45, r16	; 0x2d
   3f45a:	72 cf       	rjmp	.-284    	; 0x3f340 <pf_open+0xbe>
   3f45c:	89 81       	ldd	r24, Y+1	; 0x01
   3f45e:	88 23       	and	r24, r24
   3f460:	89 f1       	breq	.+98     	; 0x3f4c4 <pf_open+0x242>
   3f462:	8c 85       	ldd	r24, Y+12	; 0x0c
			}
		}
	}

	dj->index = i;
   3f464:	84 fd       	sbrc	r24, 4
   3f466:	2e c0       	rjmp	.+92     	; 0x3f4c4 <pf_open+0x242>
   3f468:	8c 8d       	ldd	r24, Y+28	; 0x1c

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
   3f46a:	90 e0       	ldi	r25, 0x00	; 0
   3f46c:	98 2f       	mov	r25, r24
   3f46e:	88 27       	eor	r24, r24
   3f470:	2b 8d       	ldd	r18, Y+27	; 0x1b
   3f472:	82 2b       	or	r24, r18
   3f474:	f7 01       	movw	r30, r14

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
   3f476:	95 8f       	std	Z+29, r25	; 0x1d
   3f478:	84 8f       	std	Z+28, r24	; 0x1c
   3f47a:	28 a1       	ldd	r18, Y+32	; 0x20
   3f47c:	8f 8d       	ldd	r24, Y+31	; 0x1f
   3f47e:	90 e0       	ldi	r25, 0x00	; 0
   3f480:	a0 e0       	ldi	r26, 0x00	; 0
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust = get_clust(dir);		/* File start cluster */
   3f482:	b0 e0       	ldi	r27, 0x00	; 0
   3f484:	dc 01       	movw	r26, r24
   3f486:	99 27       	eor	r25, r25
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   3f488:	88 27       	eor	r24, r24
   3f48a:	b2 2b       	or	r27, r18
   3f48c:	2d 8d       	ldd	r18, Y+29	; 0x1d
   3f48e:	82 2b       	or	r24, r18
   3f490:	4e 8d       	ldd	r20, Y+30	; 0x1e
   3f492:	50 e0       	ldi	r21, 0x00	; 0
   3f494:	54 2f       	mov	r21, r20
   3f496:	44 27       	eor	r20, r20
   3f498:	60 e0       	ldi	r22, 0x00	; 0
   3f49a:	70 e0       	ldi	r23, 0x00	; 0
   3f49c:	84 2b       	or	r24, r20
   3f49e:	95 2b       	or	r25, r21
   3f4a0:	a6 2b       	or	r26, r22
   3f4a2:	b7 2b       	or	r27, r23
   3f4a4:	80 8f       	std	Z+24, r24	; 0x18
   3f4a6:	91 8f       	std	Z+25, r25	; 0x19
   3f4a8:	a2 8f       	std	Z+26, r26	; 0x1a
   3f4aa:	b3 8f       	std	Z+27, r27	; 0x1b
   3f4ac:	14 8a       	std	Z+20, r1	; 0x14
   3f4ae:	15 8a       	std	Z+21, r1	; 0x15
   3f4b0:	16 8a       	std	Z+22, r1	; 0x16
   3f4b2:	17 8a       	std	Z+23, r1	; 0x17
   3f4b4:	81 e0       	ldi	r24, 0x01	; 1
   3f4b6:	81 83       	std	Z+1, r24	; 0x01
   3f4b8:	80 e0       	ldi	r24, 0x00	; 0
	fs->fptr = 0;						/* File pointer */
   3f4ba:	0c c0       	rjmp	.+24     	; 0x3f4d4 <pf_open+0x252>
   3f4bc:	85 e0       	ldi	r24, 0x05	; 5
   3f4be:	0a c0       	rjmp	.+20     	; 0x3f4d4 <pf_open+0x252>
   3f4c0:	81 e0       	ldi	r24, 0x01	; 1
	fs->flag = FA_OPENED;
   3f4c2:	08 c0       	rjmp	.+16     	; 0x3f4d4 <pf_open+0x252>
   3f4c4:	83 e0       	ldi	r24, 0x03	; 3

	return FR_OK;
   3f4c6:	06 c0       	rjmp	.+12     	; 0x3f4d4 <pf_open+0x252>
   3f4c8:	38 30       	cpi	r19, 0x08	; 8
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3f4ca:	09 f0       	breq	.+2      	; 0x3f4ce <pf_open+0x24c>
   3f4cc:	2c cf       	rjmp	.-424    	; 0x3f326 <pf_open+0xa4>
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
   3f4ce:	98 e0       	ldi	r25, 0x08	; 8
   3f4d0:	3b e0       	ldi	r19, 0x0B	; 11
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
   3f4d2:	20 cf       	rjmp	.-448    	; 0x3f314 <pf_open+0x92>
   3f4d4:	e8 96       	adiw	r28, 0x38	; 56
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
   3f4d6:	0f b6       	in	r0, 0x3f	; 63
   3f4d8:	f8 94       	cli
   3f4da:	de bf       	out	0x3e, r29	; 62
			i = 8; ni = 11;
   3f4dc:	0f be       	out	0x3f, r0	; 63
   3f4de:	cd bf       	out	0x3d, r28	; 61
   3f4e0:	df 91       	pop	r29
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
   3f4e2:	cf 91       	pop	r28
   3f4e4:	1f 91       	pop	r17
   3f4e6:	0f 91       	pop	r16
   3f4e8:	ff 90       	pop	r15
   3f4ea:	ef 90       	pop	r14
   3f4ec:	df 90       	pop	r13
   3f4ee:	cf 90       	pop	r12
   3f4f0:	bf 90       	pop	r11
   3f4f2:	af 90       	pop	r10
   3f4f4:	08 95       	ret

0003f4f6 <pf_read>:
   3f4f6:	4f 92       	push	r4
   3f4f8:	5f 92       	push	r5
   3f4fa:	6f 92       	push	r6
   3f4fc:	7f 92       	push	r7
   3f4fe:	8f 92       	push	r8
   3f500:	9f 92       	push	r9
   3f502:	af 92       	push	r10
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
   3f504:	bf 92       	push	r11
   3f506:	cf 92       	push	r12
   3f508:	df 92       	push	r13
   3f50a:	ef 92       	push	r14
   3f50c:	ff 92       	push	r15
   3f50e:	0f 93       	push	r16
   3f510:	1f 93       	push	r17
   3f512:	cf 93       	push	r28
   3f514:	df 93       	push	r29
   3f516:	4c 01       	movw	r8, r24
   3f518:	6b 01       	movw	r12, r22
   3f51a:	5a 01       	movw	r10, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	UINT rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
   3f51c:	c0 91 4e 05 	lds	r28, 0x054E
   3f520:	d0 91 4f 05 	lds	r29, 0x054F


	*br = 0;
   3f524:	fa 01       	movw	r30, r20
   3f526:	11 82       	std	Z+1, r1	; 0x01
   3f528:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3f52a:	20 97       	sbiw	r28, 0x00	; 0
   3f52c:	09 f4       	brne	.+2      	; 0x3f530 <pf_read+0x3a>
   3f52e:	92 c0       	rjmp	.+292    	; 0x3f654 <pf_read+0x15e>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
   3f530:	89 81       	ldd	r24, Y+1	; 0x01
   3f532:	80 ff       	sbrs	r24, 0
   3f534:	91 c0       	rjmp	.+290    	; 0x3f658 <pf_read+0x162>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
   3f536:	88 8d       	ldd	r24, Y+24	; 0x18
   3f538:	99 8d       	ldd	r25, Y+25	; 0x19
   3f53a:	aa 8d       	ldd	r26, Y+26	; 0x1a
   3f53c:	bb 8d       	ldd	r27, Y+27	; 0x1b
   3f53e:	4c 89       	ldd	r20, Y+20	; 0x14
   3f540:	5d 89       	ldd	r21, Y+21	; 0x15
   3f542:	6e 89       	ldd	r22, Y+22	; 0x16
   3f544:	7f 89       	ldd	r23, Y+23	; 0x17
   3f546:	84 1b       	sub	r24, r20
   3f548:	95 0b       	sbc	r25, r21
   3f54a:	a6 0b       	sbc	r26, r22
   3f54c:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
   3f54e:	a6 01       	movw	r20, r12
   3f550:	60 e0       	ldi	r22, 0x00	; 0
   3f552:	70 e0       	ldi	r23, 0x00	; 0
   3f554:	84 17       	cp	r24, r20
   3f556:	95 07       	cpc	r25, r21
   3f558:	a6 07       	cpc	r26, r22
   3f55a:	b7 07       	cpc	r27, r23
   3f55c:	08 f4       	brcc	.+2      	; 0x3f560 <pf_read+0x6a>
   3f55e:	6c 01       	movw	r12, r24
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
   3f560:	34 01       	movw	r6, r8
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
   3f562:	41 2c       	mov	r4, r1
   3f564:	32 e0       	ldi	r19, 0x02	; 2
   3f566:	53 2e       	mov	r5, r19
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
   3f568:	c1 14       	cp	r12, r1
   3f56a:	d1 04       	cpc	r13, r1
   3f56c:	09 f4       	brne	.+2      	; 0x3f570 <pf_read+0x7a>
   3f56e:	70 c0       	rjmp	.+224    	; 0x3f650 <pf_read+0x15a>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
   3f570:	8c 89       	ldd	r24, Y+20	; 0x14
   3f572:	9d 89       	ldd	r25, Y+21	; 0x15
   3f574:	ae 89       	ldd	r26, Y+22	; 0x16
   3f576:	bf 89       	ldd	r27, Y+23	; 0x17
   3f578:	ac 01       	movw	r20, r24
   3f57a:	bd 01       	movw	r22, r26
   3f57c:	51 70       	andi	r21, 0x01	; 1
   3f57e:	66 27       	eor	r22, r22
   3f580:	77 27       	eor	r23, r23
   3f582:	45 2b       	or	r20, r21
   3f584:	46 2b       	or	r20, r22
   3f586:	47 2b       	or	r20, r23
   3f588:	71 f5       	brne	.+92     	; 0x3f5e6 <pf_read+0xf0>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
   3f58a:	fa 80       	ldd	r15, Y+2	; 0x02
   3f58c:	fa 94       	dec	r15
   3f58e:	ac 01       	movw	r20, r24
   3f590:	bd 01       	movw	r22, r26
   3f592:	29 e0       	ldi	r18, 0x09	; 9
   3f594:	76 95       	lsr	r23
   3f596:	67 95       	ror	r22
   3f598:	57 95       	ror	r21
   3f59a:	47 95       	ror	r20
   3f59c:	2a 95       	dec	r18
   3f59e:	d1 f7       	brne	.-12     	; 0x3f594 <pf_read+0x9e>
   3f5a0:	f4 22       	and	r15, r20
			if (!cs) {								/* On the cluster boundary? */
   3f5a2:	79 f4       	brne	.+30     	; 0x3f5c2 <pf_read+0xcc>
				if (fs->fptr == 0)					/* On the top of the file? */
   3f5a4:	89 2b       	or	r24, r25
   3f5a6:	8a 2b       	or	r24, r26
   3f5a8:	8b 2b       	or	r24, r27
   3f5aa:	19 f4       	brne	.+6      	; 0x3f5b2 <pf_read+0xbc>
					clst = fs->org_clust;
   3f5ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
   3f5ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
   3f5b0:	03 c0       	rjmp	.+6      	; 0x3f5b8 <pf_read+0xc2>
				else
					clst = get_fat(fs->curr_clust);
   3f5b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
   3f5b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
   3f5b6:	8b dc       	rcall	.-1770   	; 0x3eece <get_fat>
   3f5b8:	82 30       	cpi	r24, 0x02	; 2
				if (clst <= 1) ABORT(FR_DISK_ERR);
   3f5ba:	91 05       	cpc	r25, r1
   3f5bc:	70 f1       	brcs	.+92     	; 0x3f61a <pf_read+0x124>
   3f5be:	9f 8f       	std	Y+31, r25	; 0x1f
				fs->curr_clust = clst;				/* Update current cluster */
   3f5c0:	8e 8f       	std	Y+30, r24	; 0x1e
   3f5c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
   3f5c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
   3f5c6:	34 dc       	rcall	.-1944   	; 0x3ee30 <clust2sect>
   3f5c8:	61 15       	cp	r22, r1
   3f5ca:	71 05       	cpc	r23, r1
			if (!sect) ABORT(FR_DISK_ERR);
   3f5cc:	81 05       	cpc	r24, r1
   3f5ce:	91 05       	cpc	r25, r1
   3f5d0:	21 f1       	breq	.+72     	; 0x3f61a <pf_read+0x124>
   3f5d2:	dc 01       	movw	r26, r24
   3f5d4:	cb 01       	movw	r24, r22
			fs->dsect = sect + cs;
   3f5d6:	8f 0d       	add	r24, r15
   3f5d8:	91 1d       	adc	r25, r1
   3f5da:	a1 1d       	adc	r26, r1
   3f5dc:	b1 1d       	adc	r27, r1
   3f5de:	88 a3       	std	Y+32, r24	; 0x20
   3f5e0:	99 a3       	std	Y+33, r25	; 0x21
   3f5e2:	aa a3       	std	Y+34, r26	; 0x22
   3f5e4:	bb a3       	std	Y+35, r27	; 0x23
   3f5e6:	2c 89       	ldd	r18, Y+20	; 0x14
   3f5e8:	3d 89       	ldd	r19, Y+21	; 0x15
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
   3f5ea:	31 70       	andi	r19, 0x01	; 1
   3f5ec:	c2 01       	movw	r24, r4
   3f5ee:	82 1b       	sub	r24, r18
   3f5f0:	93 0b       	sbc	r25, r19
   3f5f2:	76 01       	movw	r14, r12
   3f5f4:	8c 15       	cp	r24, r12
   3f5f6:	9d 05       	cpc	r25, r13
   3f5f8:	08 f4       	brcc	.+2      	; 0x3f5fc <pf_read+0x106>
   3f5fa:	7c 01       	movw	r14, r24
   3f5fc:	48 a1       	ldd	r20, Y+32	; 0x20
   3f5fe:	59 a1       	ldd	r21, Y+33	; 0x21
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
   3f600:	6a a1       	ldd	r22, Y+34	; 0x22
   3f602:	7b a1       	ldd	r23, Y+35	; 0x23
   3f604:	81 14       	cp	r8, r1
   3f606:	91 04       	cpc	r9, r1
   3f608:	11 f0       	breq	.+4      	; 0x3f60e <pf_read+0x118>
   3f60a:	c3 01       	movw	r24, r6
   3f60c:	02 c0       	rjmp	.+4      	; 0x3f612 <pf_read+0x11c>
   3f60e:	80 e0       	ldi	r24, 0x00	; 0
   3f610:	90 e0       	ldi	r25, 0x00	; 0
   3f612:	87 01       	movw	r16, r14
   3f614:	b6 db       	rcall	.-2196   	; 0x3ed82 <disk_readp>
   3f616:	88 23       	and	r24, r24
   3f618:	19 f0       	breq	.+6      	; 0x3f620 <pf_read+0x12a>
   3f61a:	19 82       	std	Y+1, r1	; 0x01
		if (dr) ABORT(FR_DISK_ERR);
   3f61c:	81 e0       	ldi	r24, 0x01	; 1
   3f61e:	1d c0       	rjmp	.+58     	; 0x3f65a <pf_read+0x164>
   3f620:	8c 89       	ldd	r24, Y+20	; 0x14
   3f622:	9d 89       	ldd	r25, Y+21	; 0x15
   3f624:	ae 89       	ldd	r26, Y+22	; 0x16
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
   3f626:	bf 89       	ldd	r27, Y+23	; 0x17
   3f628:	8e 0d       	add	r24, r14
   3f62a:	9f 1d       	adc	r25, r15
   3f62c:	a1 1d       	adc	r26, r1
   3f62e:	b1 1d       	adc	r27, r1
   3f630:	8c 8b       	std	Y+20, r24	; 0x14
   3f632:	9d 8b       	std	Y+21, r25	; 0x15
   3f634:	ae 8b       	std	Y+22, r26	; 0x16
   3f636:	bf 8b       	std	Y+23, r27	; 0x17
   3f638:	6e 0c       	add	r6, r14
   3f63a:	7f 1c       	adc	r7, r15
   3f63c:	ce 18       	sub	r12, r14
   3f63e:	df 08       	sbc	r13, r15
   3f640:	f5 01       	movw	r30, r10
		btr -= rcnt; *br += rcnt;
   3f642:	80 81       	ld	r24, Z
   3f644:	91 81       	ldd	r25, Z+1	; 0x01
   3f646:	e8 0e       	add	r14, r24
   3f648:	f9 1e       	adc	r15, r25
   3f64a:	f1 82       	std	Z+1, r15	; 0x01
   3f64c:	e0 82       	st	Z, r14
   3f64e:	8c cf       	rjmp	.-232    	; 0x3f568 <pf_read+0x72>
   3f650:	80 e0       	ldi	r24, 0x00	; 0
   3f652:	03 c0       	rjmp	.+6      	; 0x3f65a <pf_read+0x164>
   3f654:	85 e0       	ldi	r24, 0x05	; 5
	}

	return FR_OK;
   3f656:	01 c0       	rjmp	.+2      	; 0x3f65a <pf_read+0x164>
   3f658:	84 e0       	ldi	r24, 0x04	; 4
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3f65a:	df 91       	pop	r29
   3f65c:	cf 91       	pop	r28
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
   3f65e:	1f 91       	pop	r17
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
}
   3f660:	0f 91       	pop	r16
   3f662:	ff 90       	pop	r15
   3f664:	ef 90       	pop	r14
   3f666:	df 90       	pop	r13
   3f668:	cf 90       	pop	r12
   3f66a:	bf 90       	pop	r11
   3f66c:	af 90       	pop	r10
   3f66e:	9f 90       	pop	r9
   3f670:	8f 90       	pop	r8
   3f672:	7f 90       	pop	r7
   3f674:	6f 90       	pop	r6
   3f676:	5f 90       	pop	r5
   3f678:	4f 90       	pop	r4
   3f67a:	08 95       	ret

0003f67c <SDInit>:
#include "sdFile.h"

FATFS fs;

uint8_t SDInit(){
	FRESULT fr = pf_mount(&fs);
   3f67c:	82 e5       	ldi	r24, 0x52	; 82
   3f67e:	95 e0       	ldi	r25, 0x05	; 5
   3f680:	a1 dc       	rcall	.-1726   	; 0x3efc4 <pf_mount>
   3f682:	81 11       	cpse	r24, r1
	if (fr == 0){
   3f684:	05 c0       	rjmp	.+10     	; 0x3f690 <SDInit+0x14>
   3f686:	8f e4       	ldi	r24, 0x4F	; 79
		fr = pf_open("upd.bin");
   3f688:	94 e0       	ldi	r25, 0x04	; 4
   3f68a:	fb dd       	rcall	.-1034   	; 0x3f282 <pf_open>
   3f68c:	91 e0       	ldi	r25, 0x01	; 1
   3f68e:	81 11       	cpse	r24, r1
		if (fr == 0){
   3f690:	90 e0       	ldi	r25, 0x00	; 0
   3f692:	89 2f       	mov	r24, r25
			return 1;
		}
	}
	return 0;
   3f694:	08 95       	ret

0003f696 <SDRead>:
}
   3f696:	ef 92       	push	r14
   3f698:	ff 92       	push	r15

uint8_t SDRead(uint32_t address, uint8_t* data, uint16_t dataLength){
   3f69a:	0f 93       	push	r16
   3f69c:	1f 93       	push	r17
   3f69e:	cf 93       	push	r28
   3f6a0:	df 93       	push	r29
   3f6a2:	1f 92       	push	r1
   3f6a4:	1f 92       	push	r1
   3f6a6:	cd b7       	in	r28, 0x3d	; 61
   3f6a8:	de b7       	in	r29, 0x3e	; 62
   3f6aa:	8a 01       	movw	r16, r20
   3f6ac:	79 01       	movw	r14, r18
	UINT sz;
	FRESULT fr = 0;
	if (address == 0){
   3f6ae:	67 2b       	or	r22, r23
   3f6b0:	68 2b       	or	r22, r24
   3f6b2:	69 2b       	or	r22, r25
   3f6b4:	51 f0       	breq	.+20     	; 0x3f6ca <SDRead+0x34>
		fr = pf_open("upd.bin");
	}
	//no need to seek since firmware starts from zero
//	fr = pf_lseek(address);
	if (fr == 0){
		fr = pf_read(data, dataLength, &sz);
   3f6b6:	ae 01       	movw	r20, r28
   3f6b8:	4f 5f       	subi	r20, 0xFF	; 255
   3f6ba:	5f 4f       	sbci	r21, 0xFF	; 255
   3f6bc:	b7 01       	movw	r22, r14
   3f6be:	c8 01       	movw	r24, r16
   3f6c0:	1a df       	rcall	.-460    	; 0x3f4f6 <pf_read>
   3f6c2:	91 e0       	ldi	r25, 0x01	; 1
		return fr == 0;
   3f6c4:	88 23       	and	r24, r24
   3f6c6:	39 f0       	breq	.+14     	; 0x3f6d6 <SDRead+0x40>
   3f6c8:	05 c0       	rjmp	.+10     	; 0x3f6d4 <SDRead+0x3e>
   3f6ca:	8f e4       	ldi	r24, 0x4F	; 79

uint8_t SDRead(uint32_t address, uint8_t* data, uint16_t dataLength){
	UINT sz;
	FRESULT fr = 0;
	if (address == 0){
		fr = pf_open("upd.bin");
   3f6cc:	94 e0       	ldi	r25, 0x04	; 4
   3f6ce:	d9 dd       	rcall	.-1102   	; 0x3f282 <pf_open>
   3f6d0:	88 23       	and	r24, r24
   3f6d2:	89 f3       	breq	.-30     	; 0x3f6b6 <SDRead+0x20>
	}
	//no need to seek since firmware starts from zero
//	fr = pf_lseek(address);
	if (fr == 0){
   3f6d4:	90 e0       	ldi	r25, 0x00	; 0
   3f6d6:	89 2f       	mov	r24, r25
		fr = pf_read(data, dataLength, &sz);
		return fr == 0;
	}
	return 0;
   3f6d8:	0f 90       	pop	r0
}
   3f6da:	0f 90       	pop	r0
   3f6dc:	df 91       	pop	r29
   3f6de:	cf 91       	pop	r28
   3f6e0:	1f 91       	pop	r17
   3f6e2:	0f 91       	pop	r16
   3f6e4:	ff 90       	pop	r15
   3f6e6:	ef 90       	pop	r14
   3f6e8:	08 95       	ret

0003f6ea <sha1_helper>:
   3f6ea:	0f 93       	push	r16
   3f6ec:	1f 93       	push	r17
WORD ROTLEFT30(WORD a){
	return ((a << 30) | (a >> (32 - 30)));
}
#endif

void sha1_helper(WORD abcde[5], WORD t){
   3f6ee:	fc 01       	movw	r30, r24
#define a abcde[0]
#define b abcde[1]
#define c abcde[2]
#define d abcde[3]
#define e abcde[4]
	e = d;
   3f6f0:	84 85       	ldd	r24, Z+12	; 0x0c
   3f6f2:	95 85       	ldd	r25, Z+13	; 0x0d
   3f6f4:	a6 85       	ldd	r26, Z+14	; 0x0e
   3f6f6:	b7 85       	ldd	r27, Z+15	; 0x0f
   3f6f8:	80 8b       	std	Z+16, r24	; 0x10
   3f6fa:	91 8b       	std	Z+17, r25	; 0x11
   3f6fc:	a2 8b       	std	Z+18, r26	; 0x12
   3f6fe:	b3 8b       	std	Z+19, r27	; 0x13
	d = c;
   3f700:	80 85       	ldd	r24, Z+8	; 0x08
   3f702:	91 85       	ldd	r25, Z+9	; 0x09
   3f704:	a2 85       	ldd	r26, Z+10	; 0x0a
   3f706:	b3 85       	ldd	r27, Z+11	; 0x0b
   3f708:	84 87       	std	Z+12, r24	; 0x0c
   3f70a:	95 87       	std	Z+13, r25	; 0x0d
   3f70c:	a6 87       	std	Z+14, r26	; 0x0e
   3f70e:	b7 87       	std	Z+15, r27	; 0x0f
	c = ROTLEFT(b, 30);
   3f710:	84 81       	ldd	r24, Z+4	; 0x04
   3f712:	95 81       	ldd	r25, Z+5	; 0x05
   3f714:	a6 81       	ldd	r26, Z+6	; 0x06
   3f716:	b7 81       	ldd	r27, Z+7	; 0x07
   3f718:	8c 01       	movw	r16, r24
   3f71a:	9d 01       	movw	r18, r26
   3f71c:	36 95       	lsr	r19
   3f71e:	27 95       	ror	r18
   3f720:	17 95       	ror	r17
   3f722:	07 95       	ror	r16
   3f724:	36 95       	lsr	r19
   3f726:	27 95       	ror	r18
   3f728:	17 95       	ror	r17
   3f72a:	07 95       	ror	r16
   3f72c:	07 2e       	mov	r0, r23
   3f72e:	7e e1       	ldi	r23, 0x1E	; 30
   3f730:	88 0f       	add	r24, r24
   3f732:	99 1f       	adc	r25, r25
   3f734:	aa 1f       	adc	r26, r26
   3f736:	bb 1f       	adc	r27, r27
   3f738:	7a 95       	dec	r23
   3f73a:	d1 f7       	brne	.-12     	; 0x3f730 <sha1_helper+0x46>
   3f73c:	70 2d       	mov	r23, r0
   3f73e:	80 2b       	or	r24, r16
   3f740:	91 2b       	or	r25, r17
   3f742:	a2 2b       	or	r26, r18
   3f744:	b3 2b       	or	r27, r19
   3f746:	80 87       	std	Z+8, r24	; 0x08
   3f748:	91 87       	std	Z+9, r25	; 0x09
   3f74a:	a2 87       	std	Z+10, r26	; 0x0a
   3f74c:	b3 87       	std	Z+11, r27	; 0x0b
	b = a;
   3f74e:	80 81       	ld	r24, Z
   3f750:	91 81       	ldd	r25, Z+1	; 0x01
   3f752:	a2 81       	ldd	r26, Z+2	; 0x02
   3f754:	b3 81       	ldd	r27, Z+3	; 0x03
   3f756:	84 83       	std	Z+4, r24	; 0x04
   3f758:	95 83       	std	Z+5, r25	; 0x05
   3f75a:	a6 83       	std	Z+6, r26	; 0x06
   3f75c:	b7 83       	std	Z+7, r27	; 0x07
	a = t;
   3f75e:	40 83       	st	Z, r20
   3f760:	51 83       	std	Z+1, r21	; 0x01
   3f762:	62 83       	std	Z+2, r22	; 0x02
   3f764:	73 83       	std	Z+3, r23	; 0x03
#undef a
#undef b
#undef c
#undef d
#undef e
}
   3f766:	1f 91       	pop	r17
   3f768:	0f 91       	pop	r16
   3f76a:	08 95       	ret

0003f76c <sha1_transform>:

/*********************** FUNCTION DEFINITIONS ***********************/
void sha1_transform(SHA1_CTX *ctx, const BYTE data[])
{
   3f76c:	4f 92       	push	r4
   3f76e:	5f 92       	push	r5
   3f770:	6f 92       	push	r6
   3f772:	7f 92       	push	r7
   3f774:	8f 92       	push	r8
   3f776:	9f 92       	push	r9
   3f778:	af 92       	push	r10
   3f77a:	bf 92       	push	r11
   3f77c:	cf 92       	push	r12
   3f77e:	df 92       	push	r13
   3f780:	ef 92       	push	r14
   3f782:	ff 92       	push	r15
   3f784:	0f 93       	push	r16
   3f786:	1f 93       	push	r17
   3f788:	cf 93       	push	r28
   3f78a:	df 93       	push	r29
   3f78c:	cd b7       	in	r28, 0x3d	; 61
   3f78e:	de b7       	in	r29, 0x3e	; 62
   3f790:	c4 55       	subi	r28, 0x54	; 84
   3f792:	d1 40       	sbci	r29, 0x01	; 1
   3f794:	0f b6       	in	r0, 0x3f	; 63
   3f796:	f8 94       	cli
   3f798:	de bf       	out	0x3e, r29	; 62
   3f79a:	0f be       	out	0x3f, r0	; 63
   3f79c:	cd bf       	out	0x3d, r28	; 61
   3f79e:	5c 01       	movw	r10, r24
   3f7a0:	ce 01       	movw	r24, r28
   3f7a2:	01 96       	adiw	r24, 0x01	; 1
   3f7a4:	4c 01       	movw	r8, r24
	for (i = 0, j = 0; i < 16; ++i, j += 4){
#if 1
		WORD mm;// = 0;
		for (uint8_t jj = 0; jj < 4; jj++){
			mm<<=8;
			mm|=data[j+jj];
   3f7a6:	fc 01       	movw	r30, r24
   3f7a8:	20 e0       	ldi	r18, 0x00	; 0
   3f7aa:	30 e0       	ldi	r19, 0x00	; 0
#undef e
}

/*********************** FUNCTION DEFINITIONS ***********************/
void sha1_transform(SHA1_CTX *ctx, const BYTE data[])
{
   3f7ac:	80 e0       	ldi	r24, 0x00	; 0
   3f7ae:	90 e0       	ldi	r25, 0x00	; 0

	for (i = 0, j = 0; i < 16; ++i, j += 4){
#if 1
		WORD mm;// = 0;
		for (uint8_t jj = 0; jj < 4; jj++){
			mm<<=8;
   3f7b0:	fe 2c       	mov	r15, r14
   3f7b2:	ed 2c       	mov	r14, r13
   3f7b4:	dc 2c       	mov	r13, r12
   3f7b6:	cc 24       	eor	r12, r12
   3f7b8:	dc 01       	movw	r26, r24
   3f7ba:	a2 0f       	add	r26, r18
   3f7bc:	b3 1f       	adc	r27, r19
   3f7be:	a6 0f       	add	r26, r22
   3f7c0:	b7 1f       	adc	r27, r23
			mm|=data[j+jj];
   3f7c2:	4c 91       	ld	r20, X
   3f7c4:	c4 2a       	or	r12, r20
   3f7c6:	01 96       	adiw	r24, 0x01	; 1
#define e abcde[4]

	for (i = 0, j = 0; i < 16; ++i, j += 4){
#if 1
		WORD mm;// = 0;
		for (uint8_t jj = 0; jj < 4; jj++){
   3f7c8:	84 30       	cpi	r24, 0x04	; 4
   3f7ca:	91 05       	cpc	r25, r1
   3f7cc:	89 f7       	brne	.-30     	; 0x3f7b0 <sha1_transform+0x44>
			mm<<=8;
			mm|=data[j+jj];
		}
		m[i] = mm;
   3f7ce:	c1 92       	st	Z+, r12
   3f7d0:	d1 92       	st	Z+, r13
   3f7d2:	e1 92       	st	Z+, r14
   3f7d4:	f1 92       	st	Z+, r15
   3f7d6:	2c 5f       	subi	r18, 0xFC	; 252
   3f7d8:	3f 4f       	sbci	r19, 0xFF	; 255
#define b abcde[1]
#define c abcde[2]
#define d abcde[3]
#define e abcde[4]

	for (i = 0, j = 0; i < 16; ++i, j += 4){
   3f7da:	20 34       	cpi	r18, 0x40	; 64
   3f7dc:	31 05       	cpc	r19, r1
   3f7de:	31 f7       	brne	.-52     	; 0x3f7ac <sha1_transform+0x40>
   3f7e0:	fe 01       	movw	r30, r28
   3f7e2:	b1 96       	adiw	r30, 0x21	; 33
   3f7e4:	ae 01       	movw	r20, r28
   3f7e6:	4f 5f       	subi	r20, 0xFF	; 255
   3f7e8:	5e 4f       	sbci	r21, 0xFE	; 254
   3f7ea:	94 01       	movw	r18, r8
   3f7ec:	df 01       	movw	r26, r30
   3f7ee:	34 96       	adiw	r30, 0x04	; 4
   3f7f0:	b9 01       	movw	r22, r18
   3f7f2:	2c 5f       	subi	r18, 0xFC	; 252
   3f7f4:	3f 4f       	sbci	r19, 0xFF	; 255
		for (uint8_t ii = 0; ii < 4; ii++){
			mm ^= m[i-sub[ii]];
		}
		m[i] = (mm << 1) | (mm >> 31);
#else
		m[i] = (m[i - 3] ^ m[i - 8] ^ m[i - 14] ^ m[i - 16]);
   3f7f6:	cd 90       	ld	r12, X+
   3f7f8:	dd 90       	ld	r13, X+
   3f7fa:	ed 90       	ld	r14, X+
   3f7fc:	fc 90       	ld	r15, X
   3f7fe:	13 97       	sbiw	r26, 0x03	; 3
   3f800:	54 96       	adiw	r26, 0x14	; 20
   3f802:	8d 91       	ld	r24, X+
   3f804:	9d 91       	ld	r25, X+
   3f806:	0d 90       	ld	r0, X+
   3f808:	bc 91       	ld	r27, X
   3f80a:	a0 2d       	mov	r26, r0
   3f80c:	2c 01       	movw	r4, r24
   3f80e:	3d 01       	movw	r6, r26
   3f810:	4c 24       	eor	r4, r12
   3f812:	5d 24       	eor	r5, r13
   3f814:	6e 24       	eor	r6, r14
   3f816:	7f 24       	eor	r7, r15
   3f818:	db 01       	movw	r26, r22
   3f81a:	18 96       	adiw	r26, 0x08	; 8
   3f81c:	cd 90       	ld	r12, X+
   3f81e:	dd 90       	ld	r13, X+
   3f820:	ed 90       	ld	r14, X+
   3f822:	fc 90       	ld	r15, X
   3f824:	1b 97       	sbiw	r26, 0x0b	; 11
   3f826:	4c 24       	eor	r4, r12
   3f828:	5d 24       	eor	r5, r13
   3f82a:	6e 24       	eor	r6, r14
   3f82c:	7f 24       	eor	r7, r15
   3f82e:	cd 90       	ld	r12, X+
   3f830:	dd 90       	ld	r13, X+
   3f832:	ed 90       	ld	r14, X+
   3f834:	fc 90       	ld	r15, X
   3f836:	d3 01       	movw	r26, r6
   3f838:	c2 01       	movw	r24, r4
   3f83a:	8c 25       	eor	r24, r12
   3f83c:	9d 25       	eor	r25, r13
   3f83e:	ae 25       	eor	r26, r14
   3f840:	bf 25       	eor	r27, r15
		m[i] = (m[i] << 1) | (m[i] >> 31);
   3f842:	88 0f       	add	r24, r24
   3f844:	99 1f       	adc	r25, r25
   3f846:	aa 1f       	adc	r26, r26
   3f848:	bb 1f       	adc	r27, r27
   3f84a:	81 1d       	adc	r24, r1
   3f84c:	84 8f       	std	Z+28, r24	; 0x1c
   3f84e:	95 8f       	std	Z+29, r25	; 0x1d
   3f850:	a6 8f       	std	Z+30, r26	; 0x1e
   3f852:	b7 8f       	std	Z+31, r27	; 0x1f
#else
		m[i] = (((unsigned long)data[j]) << 24) + (((unsigned long)data[j + 1]) << 16) + (((unsigned long)data[j + 2]) << 8) + (data[j + 3]);
#endif
	}
//		uint8_t sub[4] = {3, 8, 14, 16};
	for ( ; i < 80; ++i) {
   3f854:	24 17       	cp	r18, r20
   3f856:	35 07       	cpc	r19, r21
   3f858:	49 f6       	brne	.-110    	; 0x3f7ec <sha1_transform+0x80>
		m[i] = (m[i] << 1) | (m[i] >> 31);
#endif
	}

#if 1
	memcpy(abcde, ctx->state, sizeof(abcde));
   3f85a:	75 01       	movw	r14, r10
   3f85c:	b5 e4       	ldi	r27, 0x45	; 69
   3f85e:	eb 0e       	add	r14, r27
   3f860:	f1 1c       	adc	r15, r1
   3f862:	84 e1       	ldi	r24, 0x14	; 20
   3f864:	f7 01       	movw	r30, r14
   3f866:	de 01       	movw	r26, r28
   3f868:	af 5b       	subi	r26, 0xBF	; 191
   3f86a:	be 4f       	sbci	r27, 0xFE	; 254
   3f86c:	01 90       	ld	r0, Z+
   3f86e:	0d 92       	st	X+, r0
   3f870:	8a 95       	dec	r24
   3f872:	e1 f7       	brne	.-8      	; 0x3f86c <sha1_transform+0x100>
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
	e = ctx->state[4];
#endif
	for (i = 0; i < 80; i++){
   3f874:	d1 2c       	mov	r13, r1
			t = ((b & c) ^ (b & d) ^ (c & d));
		}else{
//			ii = 3;
			t = (b ^ c ^ d);
		}
		t += ROTLEFT(a, 5) + e + ctx->k[i/20] + m[i];
   3f876:	a4 e1       	ldi	r26, 0x14	; 20
   3f878:	ca 2e       	mov	r12, r26
	d = ctx->state[3];
	e = ctx->state[4];
#endif
	for (i = 0; i < 80; i++){
//		BYTE ii;
		if (i < 20){
   3f87a:	e3 e1       	ldi	r30, 0x13	; 19
   3f87c:	ed 15       	cp	r30, r13
   3f87e:	18 f1       	brcs	.+70     	; 0x3f8c6 <sha1_transform+0x15a>
//			ii = 0;
			t = ((b & c) ^ (~b & d));
   3f880:	cb 5b       	subi	r28, 0xBB	; 187
   3f882:	de 4f       	sbci	r29, 0xFE	; 254
   3f884:	08 81       	ld	r16, Y
   3f886:	19 81       	ldd	r17, Y+1	; 0x01
   3f888:	2a 81       	ldd	r18, Y+2	; 0x02
   3f88a:	3b 81       	ldd	r19, Y+3	; 0x03
   3f88c:	c5 54       	subi	r28, 0x45	; 69
   3f88e:	d1 40       	sbci	r29, 0x01	; 1
   3f890:	b9 01       	movw	r22, r18
   3f892:	a8 01       	movw	r20, r16
   3f894:	40 95       	com	r20
   3f896:	50 95       	com	r21
   3f898:	60 95       	com	r22
   3f89a:	70 95       	com	r23
   3f89c:	c3 5b       	subi	r28, 0xB3	; 179
   3f89e:	de 4f       	sbci	r29, 0xFE	; 254
   3f8a0:	48 80       	ld	r4, Y
   3f8a2:	59 80       	ldd	r5, Y+1	; 0x01
   3f8a4:	6a 80       	ldd	r6, Y+2	; 0x02
   3f8a6:	7b 80       	ldd	r7, Y+3	; 0x03
   3f8a8:	cd 54       	subi	r28, 0x4D	; 77
   3f8aa:	d1 40       	sbci	r29, 0x01	; 1
   3f8ac:	44 21       	and	r20, r4
   3f8ae:	55 21       	and	r21, r5
   3f8b0:	66 21       	and	r22, r6
   3f8b2:	77 21       	and	r23, r7
   3f8b4:	c7 5b       	subi	r28, 0xB7	; 183
   3f8b6:	de 4f       	sbci	r29, 0xFE	; 254
   3f8b8:	88 81       	ld	r24, Y
   3f8ba:	99 81       	ldd	r25, Y+1	; 0x01
   3f8bc:	aa 81       	ldd	r26, Y+2	; 0x02
   3f8be:	bb 81       	ldd	r27, Y+3	; 0x03
   3f8c0:	c9 54       	subi	r28, 0x49	; 73
   3f8c2:	d1 40       	sbci	r29, 0x01	; 1
   3f8c4:	47 c0       	rjmp	.+142    	; 0x3f954 <sha1_transform+0x1e8>
		}else if ( i < 40){
   3f8c6:	88 ed       	ldi	r24, 0xD8	; 216
   3f8c8:	8d 0d       	add	r24, r13
   3f8ca:	84 31       	cpi	r24, 0x14	; 20
   3f8cc:	08 f1       	brcs	.+66     	; 0x3f910 <sha1_transform+0x1a4>
//			ii = 1;
			t = (b ^ c ^ d);
   3f8ce:	c7 5b       	subi	r28, 0xB7	; 183
   3f8d0:	de 4f       	sbci	r29, 0xFE	; 254
   3f8d2:	08 81       	ld	r16, Y
   3f8d4:	19 81       	ldd	r17, Y+1	; 0x01
   3f8d6:	2a 81       	ldd	r18, Y+2	; 0x02
   3f8d8:	3b 81       	ldd	r19, Y+3	; 0x03
   3f8da:	c9 54       	subi	r28, 0x49	; 73
   3f8dc:	d1 40       	sbci	r29, 0x01	; 1
   3f8de:	cb 5b       	subi	r28, 0xBB	; 187
   3f8e0:	de 4f       	sbci	r29, 0xFE	; 254
   3f8e2:	88 81       	ld	r24, Y
   3f8e4:	99 81       	ldd	r25, Y+1	; 0x01
   3f8e6:	aa 81       	ldd	r26, Y+2	; 0x02
   3f8e8:	bb 81       	ldd	r27, Y+3	; 0x03
   3f8ea:	c5 54       	subi	r28, 0x45	; 69
   3f8ec:	d1 40       	sbci	r29, 0x01	; 1
   3f8ee:	08 27       	eor	r16, r24
   3f8f0:	19 27       	eor	r17, r25
   3f8f2:	2a 27       	eor	r18, r26
   3f8f4:	3b 27       	eor	r19, r27
   3f8f6:	c3 5b       	subi	r28, 0xB3	; 179
   3f8f8:	de 4f       	sbci	r29, 0xFE	; 254
   3f8fa:	48 81       	ld	r20, Y
   3f8fc:	59 81       	ldd	r21, Y+1	; 0x01
   3f8fe:	6a 81       	ldd	r22, Y+2	; 0x02
   3f900:	7b 81       	ldd	r23, Y+3	; 0x03
   3f902:	cd 54       	subi	r28, 0x4D	; 77
   3f904:	d1 40       	sbci	r29, 0x01	; 1
   3f906:	04 27       	eor	r16, r20
   3f908:	15 27       	eor	r17, r21
   3f90a:	26 27       	eor	r18, r22
   3f90c:	37 27       	eor	r19, r23
   3f90e:	2c c0       	rjmp	.+88     	; 0x3f968 <sha1_transform+0x1fc>
		}else if (i < 60){
//			ii = 2;
			t = ((b & c) ^ (b & d) ^ (c & d));
   3f910:	c7 5b       	subi	r28, 0xB7	; 183
   3f912:	de 4f       	sbci	r29, 0xFE	; 254
   3f914:	88 81       	ld	r24, Y
   3f916:	99 81       	ldd	r25, Y+1	; 0x01
   3f918:	aa 81       	ldd	r26, Y+2	; 0x02
   3f91a:	bb 81       	ldd	r27, Y+3	; 0x03
   3f91c:	c9 54       	subi	r28, 0x49	; 73
   3f91e:	d1 40       	sbci	r29, 0x01	; 1
   3f920:	c3 5b       	subi	r28, 0xB3	; 179
   3f922:	de 4f       	sbci	r29, 0xFE	; 254
   3f924:	08 81       	ld	r16, Y
   3f926:	19 81       	ldd	r17, Y+1	; 0x01
   3f928:	2a 81       	ldd	r18, Y+2	; 0x02
   3f92a:	3b 81       	ldd	r19, Y+3	; 0x03
   3f92c:	cd 54       	subi	r28, 0x4D	; 77
   3f92e:	d1 40       	sbci	r29, 0x01	; 1
   3f930:	b9 01       	movw	r22, r18
   3f932:	a8 01       	movw	r20, r16
   3f934:	48 27       	eor	r20, r24
   3f936:	59 27       	eor	r21, r25
   3f938:	6a 27       	eor	r22, r26
   3f93a:	7b 27       	eor	r23, r27
   3f93c:	cb 5b       	subi	r28, 0xBB	; 187
   3f93e:	de 4f       	sbci	r29, 0xFE	; 254
   3f940:	48 80       	ld	r4, Y
   3f942:	59 80       	ldd	r5, Y+1	; 0x01
   3f944:	6a 80       	ldd	r6, Y+2	; 0x02
   3f946:	7b 80       	ldd	r7, Y+3	; 0x03
   3f948:	c5 54       	subi	r28, 0x45	; 69
   3f94a:	d1 40       	sbci	r29, 0x01	; 1
   3f94c:	44 21       	and	r20, r4
   3f94e:	55 21       	and	r21, r5
   3f950:	66 21       	and	r22, r6
   3f952:	77 21       	and	r23, r7
   3f954:	80 23       	and	r24, r16
   3f956:	91 23       	and	r25, r17
   3f958:	a2 23       	and	r26, r18
   3f95a:	b3 23       	and	r27, r19
   3f95c:	8a 01       	movw	r16, r20
   3f95e:	9b 01       	movw	r18, r22
   3f960:	08 27       	eor	r16, r24
   3f962:	19 27       	eor	r17, r25
   3f964:	2a 27       	eor	r18, r26
   3f966:	3b 27       	eor	r19, r27
		}else{
//			ii = 3;
			t = (b ^ c ^ d);
		}
		t += ROTLEFT(a, 5) + e + ctx->k[i/20] + m[i];
   3f968:	d4 01       	movw	r26, r8
   3f96a:	4d 90       	ld	r4, X+
   3f96c:	5d 90       	ld	r5, X+
   3f96e:	6d 90       	ld	r6, X+
   3f970:	7d 90       	ld	r7, X+
   3f972:	4d 01       	movw	r8, r26
   3f974:	cf 5b       	subi	r28, 0xBF	; 191
   3f976:	de 4f       	sbci	r29, 0xFE	; 254
   3f978:	88 81       	ld	r24, Y
   3f97a:	99 81       	ldd	r25, Y+1	; 0x01
   3f97c:	aa 81       	ldd	r26, Y+2	; 0x02
   3f97e:	bb 81       	ldd	r27, Y+3	; 0x03
   3f980:	c1 54       	subi	r28, 0x41	; 65
   3f982:	d1 40       	sbci	r29, 0x01	; 1
   3f984:	ac 01       	movw	r20, r24
   3f986:	bd 01       	movw	r22, r26
   3f988:	e5 e0       	ldi	r30, 0x05	; 5
   3f98a:	44 0f       	add	r20, r20
   3f98c:	55 1f       	adc	r21, r21
   3f98e:	66 1f       	adc	r22, r22
   3f990:	77 1f       	adc	r23, r23
   3f992:	ea 95       	dec	r30
   3f994:	d1 f7       	brne	.-12     	; 0x3f98a <sha1_transform+0x21e>
   3f996:	fb e1       	ldi	r31, 0x1B	; 27
   3f998:	b6 95       	lsr	r27
   3f99a:	a7 95       	ror	r26
   3f99c:	97 95       	ror	r25
   3f99e:	87 95       	ror	r24
   3f9a0:	fa 95       	dec	r31
   3f9a2:	d1 f7       	brne	.-12     	; 0x3f998 <sha1_transform+0x22c>
   3f9a4:	84 2b       	or	r24, r20
   3f9a6:	95 2b       	or	r25, r21
   3f9a8:	a6 2b       	or	r26, r22
   3f9aa:	b7 2b       	or	r27, r23
   3f9ac:	cf 5a       	subi	r28, 0xAF	; 175
   3f9ae:	de 4f       	sbci	r29, 0xFE	; 254
   3f9b0:	48 81       	ld	r20, Y
   3f9b2:	59 81       	ldd	r21, Y+1	; 0x01
   3f9b4:	6a 81       	ldd	r22, Y+2	; 0x02
   3f9b6:	7b 81       	ldd	r23, Y+3	; 0x03
   3f9b8:	c1 55       	subi	r28, 0x51	; 81
   3f9ba:	d1 40       	sbci	r29, 0x01	; 1
   3f9bc:	84 0f       	add	r24, r20
   3f9be:	95 1f       	adc	r25, r21
   3f9c0:	a6 1f       	adc	r26, r22
   3f9c2:	b7 1f       	adc	r27, r23
   3f9c4:	48 0e       	add	r4, r24
   3f9c6:	59 1e       	adc	r5, r25
   3f9c8:	6a 1e       	adc	r6, r26
   3f9ca:	7b 1e       	adc	r7, r27
   3f9cc:	8d 2d       	mov	r24, r13
   3f9ce:	6c 2d       	mov	r22, r12
   3f9d0:	68 d2       	rcall	.+1232   	; 0x3fea2 <__udivmodqi4>
   3f9d2:	f5 01       	movw	r30, r10
   3f9d4:	b4 e0       	ldi	r27, 0x04	; 4
   3f9d6:	8b 9f       	mul	r24, r27
   3f9d8:	e0 0d       	add	r30, r0
   3f9da:	f1 1d       	adc	r31, r1
   3f9dc:	11 24       	eor	r1, r1
   3f9de:	e7 5a       	subi	r30, 0xA7	; 167
   3f9e0:	ff 4f       	sbci	r31, 0xFF	; 255
   3f9e2:	40 81       	ld	r20, Z
   3f9e4:	51 81       	ldd	r21, Z+1	; 0x01
   3f9e6:	62 81       	ldd	r22, Z+2	; 0x02
   3f9e8:	73 81       	ldd	r23, Z+3	; 0x03
   3f9ea:	44 0e       	add	r4, r20
   3f9ec:	55 1e       	adc	r5, r21
   3f9ee:	66 1e       	adc	r6, r22
   3f9f0:	77 1e       	adc	r7, r23
   3f9f2:	b3 01       	movw	r22, r6
   3f9f4:	a2 01       	movw	r20, r4
   3f9f6:	40 0f       	add	r20, r16
   3f9f8:	51 1f       	adc	r21, r17
   3f9fa:	62 1f       	adc	r22, r18
   3f9fc:	73 1f       	adc	r23, r19
   3f9fe:	ce 01       	movw	r24, r28
//		e = d;
//		d = c;
//		c = ROTLEFT(b, 30);
//		b = a;
//		a = t;
		sha1_helper(abcde, t);
   3fa00:	8f 5b       	subi	r24, 0xBF	; 191
   3fa02:	9e 4f       	sbci	r25, 0xFE	; 254
   3fa04:	72 de       	rcall	.-796    	; 0x3f6ea <sha1_helper>
   3fa06:	d3 94       	inc	r13
   3fa08:	e0 e5       	ldi	r30, 0x50	; 80
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
	e = ctx->state[4];
#endif
	for (i = 0; i < 80; i++){
   3fa0a:	de 12       	cpse	r13, r30
   3fa0c:	36 cf       	rjmp	.-404    	; 0x3f87a <sha1_transform+0x10e>
   3fa0e:	de 01       	movw	r26, r28
   3fa10:	af 5b       	subi	r26, 0xBF	; 191
   3fa12:	be 4f       	sbci	r27, 0xFE	; 254
   3fa14:	f7 01       	movw	r30, r14
   3fa16:	89 e5       	ldi	r24, 0x59	; 89
   3fa18:	a8 0e       	add	r10, r24
   3fa1a:	b1 1c       	adc	r11, r1
   3fa1c:	4d 91       	ld	r20, X+
   3fa1e:	5d 91       	ld	r21, X+
////		b = a;
////		a = t;
//	}

	for (i = 0; i < 5; i++)
		ctx->state[i] += abcde[i];
   3fa20:	6d 91       	ld	r22, X+
   3fa22:	7d 91       	ld	r23, X+
   3fa24:	00 81       	ld	r16, Z
   3fa26:	11 81       	ldd	r17, Z+1	; 0x01
   3fa28:	22 81       	ldd	r18, Z+2	; 0x02
   3fa2a:	33 81       	ldd	r19, Z+3	; 0x03
   3fa2c:	40 0f       	add	r20, r16
   3fa2e:	51 1f       	adc	r21, r17
   3fa30:	62 1f       	adc	r22, r18
   3fa32:	73 1f       	adc	r23, r19
   3fa34:	41 93       	st	Z+, r20
   3fa36:	51 93       	st	Z+, r21
   3fa38:	61 93       	st	Z+, r22
   3fa3a:	71 93       	st	Z+, r23
   3fa3c:	ea 15       	cp	r30, r10
   3fa3e:	fb 05       	cpc	r31, r11
////		c = ROTLEFT(b, 30);
////		b = a;
////		a = t;
//	}

	for (i = 0; i < 5; i++)
   3fa40:	69 f7       	brne	.-38     	; 0x3fa1c <sha1_transform+0x2b0>
   3fa42:	cc 5a       	subi	r28, 0xAC	; 172
   3fa44:	de 4f       	sbci	r29, 0xFE	; 254
//	ctx->state[0] += a;
//	ctx->state[1] += b;
//	ctx->state[2] += c;
//	ctx->state[3] += d;
//	ctx->state[4] += e;
}
   3fa46:	0f b6       	in	r0, 0x3f	; 63
   3fa48:	f8 94       	cli
   3fa4a:	de bf       	out	0x3e, r29	; 62
   3fa4c:	0f be       	out	0x3f, r0	; 63
   3fa4e:	cd bf       	out	0x3d, r28	; 61
   3fa50:	df 91       	pop	r29
   3fa52:	cf 91       	pop	r28
   3fa54:	1f 91       	pop	r17
   3fa56:	0f 91       	pop	r16
   3fa58:	ff 90       	pop	r15
   3fa5a:	ef 90       	pop	r14
   3fa5c:	df 90       	pop	r13
   3fa5e:	cf 90       	pop	r12
   3fa60:	bf 90       	pop	r11
   3fa62:	af 90       	pop	r10
   3fa64:	9f 90       	pop	r9
   3fa66:	8f 90       	pop	r8
   3fa68:	7f 90       	pop	r7
   3fa6a:	6f 90       	pop	r6
   3fa6c:	5f 90       	pop	r5
   3fa6e:	4f 90       	pop	r4
   3fa70:	08 95       	ret

0003fa72 <sha1_init>:
   3fa72:	cf 93       	push	r28
   3fa74:	df 93       	push	r29

void sha1_init(SHA1_CTX *ctx)
{
   3fa76:	cd b7       	in	r28, 0x3d	; 61
   3fa78:	de b7       	in	r29, 0x3e	; 62
   3fa7a:	a4 97       	sbiw	r28, 0x24	; 36
   3fa7c:	0f b6       	in	r0, 0x3f	; 63
   3fa7e:	f8 94       	cli
   3fa80:	de bf       	out	0x3e, r29	; 62
   3fa82:	0f be       	out	0x3f, r0	; 63
   3fa84:	cd bf       	out	0x3d, r28	; 61
	ctx->datalen = 0;
   3fa86:	fc 01       	movw	r30, r24
   3fa88:	e0 5c       	subi	r30, 0xC0	; 192
   3fa8a:	ff 4f       	sbci	r31, 0xFF	; 255
   3fa8c:	10 82       	st	Z, r1
	ctx->bitlen = 0;
   3fa8e:	31 96       	adiw	r30, 0x01	; 1
   3fa90:	10 82       	st	Z, r1
   3fa92:	11 82       	std	Z+1, r1	; 0x01
   3fa94:	12 82       	std	Z+2, r1	; 0x02
   3fa96:	13 82       	std	Z+3, r1	; 0x03

#if 1
	const uint32_t stk[] = {
   3fa98:	24 e2       	ldi	r18, 0x24	; 36
   3fa9a:	e0 e2       	ldi	r30, 0x20	; 32
   3fa9c:	f2 e0       	ldi	r31, 0x02	; 2
   3fa9e:	de 01       	movw	r26, r28
   3faa0:	11 96       	adiw	r26, 0x01	; 1
   3faa2:	01 90       	ld	r0, Z+
   3faa4:	0d 92       	st	X+, r0
   3faa6:	2a 95       	dec	r18
   3faa8:	e1 f7       	brne	.-8      	; 0x3faa2 <sha1_init+0x30>
			0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xc3d2e1f0, //states
			0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 //k
	};
	memcpy(ctx->state, stk, sizeof(stk));
   3faaa:	dc 01       	movw	r26, r24
   3faac:	ab 5b       	subi	r26, 0xBB	; 187
   3faae:	bf 4f       	sbci	r27, 0xFF	; 255
   3fab0:	84 e2       	ldi	r24, 0x24	; 36
   3fab2:	fe 01       	movw	r30, r28
   3fab4:	31 96       	adiw	r30, 0x01	; 1
   3fab6:	01 90       	ld	r0, Z+
   3fab8:	0d 92       	st	X+, r0
   3faba:	8a 95       	dec	r24
   3fabc:	e1 f7       	brne	.-8      	; 0x3fab6 <sha1_init+0x44>
	ctx->k[0] = 0x5a827999;
	ctx->k[1] = 0x6ed9eba1;
	ctx->k[2] = 0x8f1bbcdc;
	ctx->k[3] = 0xca62c1d6;
#endif
}
   3fabe:	a4 96       	adiw	r28, 0x24	; 36
   3fac0:	0f b6       	in	r0, 0x3f	; 63
   3fac2:	f8 94       	cli
   3fac4:	de bf       	out	0x3e, r29	; 62
   3fac6:	0f be       	out	0x3f, r0	; 63
   3fac8:	cd bf       	out	0x3d, r28	; 61
   3faca:	df 91       	pop	r29
   3facc:	cf 91       	pop	r28
   3face:	08 95       	ret

0003fad0 <sha1_update>:

void sha1_update(SHA1_CTX *ctx, const BYTE data[], size_t len)
{
   3fad0:	af 92       	push	r10
   3fad2:	bf 92       	push	r11
   3fad4:	cf 92       	push	r12
   3fad6:	df 92       	push	r13
   3fad8:	ef 92       	push	r14
   3fada:	ff 92       	push	r15
   3fadc:	0f 93       	push	r16
   3fade:	1f 93       	push	r17
   3fae0:	cf 93       	push	r28
   3fae2:	df 93       	push	r29
   3fae4:	8c 01       	movw	r16, r24
   3fae6:	eb 01       	movw	r28, r22
   3fae8:	7b 01       	movw	r14, r22
   3faea:	e4 0e       	add	r14, r20
   3faec:	f5 1e       	adc	r15, r21
	size_t i;
	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
   3faee:	6c 01       	movw	r12, r24
   3faf0:	80 e4       	ldi	r24, 0x40	; 64
   3faf2:	c8 0e       	add	r12, r24
   3faf4:	d1 1c       	adc	r13, r1
		ctx->datalen++;
		if (ctx->datalen == 64) {
			sha1_transform(ctx, ctx->data);
			ctx->bitlen += 512;
   3faf6:	58 01       	movw	r10, r16
   3faf8:	e1 e4       	ldi	r30, 0x41	; 65
   3fafa:	ae 0e       	add	r10, r30
   3fafc:	b1 1c       	adc	r11, r1
}

void sha1_update(SHA1_CTX *ctx, const BYTE data[], size_t len)
{
	size_t i;
	for (i = 0; i < len; ++i) {
   3fafe:	ce 15       	cp	r28, r14
   3fb00:	df 05       	cpc	r29, r15
   3fb02:	f1 f0       	breq	.+60     	; 0x3fb40 <sha1_update+0x70>
		ctx->data[ctx->datalen] = data[i];
   3fb04:	f6 01       	movw	r30, r12
   3fb06:	80 81       	ld	r24, Z
   3fb08:	99 91       	ld	r25, Y+
   3fb0a:	f8 01       	movw	r30, r16
   3fb0c:	e8 0f       	add	r30, r24
   3fb0e:	f1 1d       	adc	r31, r1
   3fb10:	90 83       	st	Z, r25
		ctx->datalen++;
   3fb12:	8f 5f       	subi	r24, 0xFF	; 255
   3fb14:	f6 01       	movw	r30, r12
   3fb16:	80 83       	st	Z, r24
		if (ctx->datalen == 64) {
   3fb18:	80 34       	cpi	r24, 0x40	; 64
   3fb1a:	89 f7       	brne	.-30     	; 0x3fafe <sha1_update+0x2e>
			sha1_transform(ctx, ctx->data);
   3fb1c:	b8 01       	movw	r22, r16
   3fb1e:	c8 01       	movw	r24, r16
   3fb20:	25 de       	rcall	.-950    	; 0x3f76c <sha1_transform>
   3fb22:	f5 01       	movw	r30, r10
			ctx->bitlen += 512;
   3fb24:	80 81       	ld	r24, Z
   3fb26:	91 81       	ldd	r25, Z+1	; 0x01
   3fb28:	a2 81       	ldd	r26, Z+2	; 0x02
   3fb2a:	b3 81       	ldd	r27, Z+3	; 0x03
   3fb2c:	9e 5f       	subi	r25, 0xFE	; 254
   3fb2e:	af 4f       	sbci	r26, 0xFF	; 255
   3fb30:	bf 4f       	sbci	r27, 0xFF	; 255
   3fb32:	80 83       	st	Z, r24
   3fb34:	91 83       	std	Z+1, r25	; 0x01
   3fb36:	a2 83       	std	Z+2, r26	; 0x02
   3fb38:	b3 83       	std	Z+3, r27	; 0x03
   3fb3a:	f6 01       	movw	r30, r12
			ctx->datalen = 0;
   3fb3c:	10 82       	st	Z, r1
   3fb3e:	df cf       	rjmp	.-66     	; 0x3fafe <sha1_update+0x2e>
   3fb40:	df 91       	pop	r29
		}
	}
}
   3fb42:	cf 91       	pop	r28
   3fb44:	1f 91       	pop	r17
   3fb46:	0f 91       	pop	r16
   3fb48:	ff 90       	pop	r15
   3fb4a:	ef 90       	pop	r14
   3fb4c:	df 90       	pop	r13
   3fb4e:	cf 90       	pop	r12
   3fb50:	bf 90       	pop	r11
   3fb52:	af 90       	pop	r10
   3fb54:	08 95       	ret

0003fb56 <sha1_final>:
   3fb56:	cf 92       	push	r12
	while (i < len)
		ctx->data[i++] = 0x00;
}

void sha1_final(SHA1_CTX *ctx, BYTE hash[])
{
   3fb58:	df 92       	push	r13
   3fb5a:	ef 92       	push	r14
   3fb5c:	ff 92       	push	r15
   3fb5e:	0f 93       	push	r16
   3fb60:	1f 93       	push	r17
   3fb62:	cf 93       	push	r28
   3fb64:	df 93       	push	r29
   3fb66:	ec 01       	movw	r28, r24
   3fb68:	7b 01       	movw	r14, r22
	BYTE i;

	i = ctx->datalen;
   3fb6a:	8c 01       	movw	r16, r24
   3fb6c:	00 5c       	subi	r16, 0xC0	; 192
   3fb6e:	1f 4f       	sbci	r17, 0xFF	; 255
   3fb70:	f8 01       	movw	r30, r16
   3fb72:	90 81       	ld	r25, Z
   3fb74:	81 e0       	ldi	r24, 0x01	; 1
   3fb76:	89 0f       	add	r24, r25
   3fb78:	29 2f       	mov	r18, r25
   3fb7a:	30 e0       	ldi	r19, 0x00	; 0

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
//		sha_pad(ctx, 56);
		ctx->data[i++] = 0x80;
   3fb7c:	fe 01       	movw	r30, r28
   3fb7e:	e2 0f       	add	r30, r18
   3fb80:	f3 1f       	adc	r31, r19
	BYTE i;

	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
   3fb82:	98 33       	cpi	r25, 0x38	; 56
   3fb84:	50 f4       	brcc	.+20     	; 0x3fb9a <sha1_final+0x44>
//		sha_pad(ctx, 56);
		ctx->data[i++] = 0x80;
   3fb86:	90 e8       	ldi	r25, 0x80	; 128
   3fb88:	90 83       	st	Z, r25
		while (i < 56)
   3fb8a:	88 33       	cpi	r24, 0x38	; 56
   3fb8c:	c1 f0       	breq	.+48     	; 0x3fbbe <sha1_final+0x68>
			ctx->data[i++] = 0x00;
   3fb8e:	fe 01       	movw	r30, r28
   3fb90:	e8 0f       	add	r30, r24
   3fb92:	f1 1d       	adc	r31, r1
   3fb94:	10 82       	st	Z, r1
   3fb96:	8f 5f       	subi	r24, 0xFF	; 255
   3fb98:	f8 cf       	rjmp	.-16     	; 0x3fb8a <sha1_final+0x34>
	}
	else {
//		sha_pad(ctx, 64);
		ctx->data[i++] = 0x80;
   3fb9a:	90 e8       	ldi	r25, 0x80	; 128
   3fb9c:	90 83       	st	Z, r25
		while (i < 64)
   3fb9e:	80 34       	cpi	r24, 0x40	; 64
   3fba0:	30 f4       	brcc	.+12     	; 0x3fbae <sha1_final+0x58>
			ctx->data[i++] = 0x00;
   3fba2:	fe 01       	movw	r30, r28
   3fba4:	e8 0f       	add	r30, r24
   3fba6:	f1 1d       	adc	r31, r1
   3fba8:	10 82       	st	Z, r1
   3fbaa:	8f 5f       	subi	r24, 0xFF	; 255
   3fbac:	f8 cf       	rjmp	.-16     	; 0x3fb9e <sha1_final+0x48>
		sha1_transform(ctx, ctx->data);
   3fbae:	be 01       	movw	r22, r28
   3fbb0:	ce 01       	movw	r24, r28
   3fbb2:	dc dd       	rcall	.-1096   	; 0x3f76c <sha1_transform>
   3fbb4:	88 e3       	ldi	r24, 0x38	; 56
		memset(ctx->data, 0, 56);
   3fbb6:	fe 01       	movw	r30, r28
   3fbb8:	11 92       	st	Z+, r1
   3fbba:	8a 95       	dec	r24
   3fbbc:	e9 f7       	brne	.-6      	; 0x3fbb8 <sha1_final+0x62>
   3fbbe:	f8 01       	movw	r30, r16
	}

	// Append to the padding the total message's length in bits and transform.
//	ctx->bitlen += ctx->datalen * 8;
	unsigned /*long*/ long btl = ctx->bitlen + ctx->datalen * 8;
   3fbc0:	80 81       	ld	r24, Z
   3fbc2:	f8 e0       	ldi	r31, 0x08	; 8
   3fbc4:	8f 9f       	mul	r24, r31
   3fbc6:	c0 01       	movw	r24, r0
   3fbc8:	11 24       	eor	r1, r1
   3fbca:	aa 27       	eor	r26, r26
   3fbcc:	97 fd       	sbrc	r25, 7
   3fbce:	a0 95       	com	r26
   3fbd0:	ba 2f       	mov	r27, r26
   3fbd2:	fe 01       	movw	r30, r28
   3fbd4:	ef 5b       	subi	r30, 0xBF	; 191
   3fbd6:	ff 4f       	sbci	r31, 0xFF	; 255
   3fbd8:	40 81       	ld	r20, Z
   3fbda:	51 81       	ldd	r21, Z+1	; 0x01
   3fbdc:	62 81       	ldd	r22, Z+2	; 0x02
   3fbde:	73 81       	ldd	r23, Z+3	; 0x03
   3fbe0:	84 0f       	add	r24, r20
   3fbe2:	95 1f       	adc	r25, r21
   3fbe4:	a6 1f       	adc	r26, r22
   3fbe6:	b7 1f       	adc	r27, r23
   3fbe8:	f8 01       	movw	r30, r16
   3fbea:	9e 01       	movw	r18, r28
   3fbec:	28 5c       	subi	r18, 0xC8	; 200
   3fbee:	3f 4f       	sbci	r19, 0xFF	; 255
   3fbf0:	82 93       	st	-Z, r24
	for (BYTE ii = 0; ii < 8; ii++){
		ctx->data[63-ii] = btl;//ctx->bitlen;//>>(8*ii);
   3fbf2:	89 2f       	mov	r24, r25
		btl>>=8;
   3fbf4:	9a 2f       	mov	r25, r26
   3fbf6:	ab 2f       	mov	r26, r27
   3fbf8:	bb 27       	eor	r27, r27
   3fbfa:	e2 17       	cp	r30, r18
	}

	// Append to the padding the total message's length in bits and transform.
//	ctx->bitlen += ctx->datalen * 8;
	unsigned /*long*/ long btl = ctx->bitlen + ctx->datalen * 8;
	for (BYTE ii = 0; ii < 8; ii++){
   3fbfc:	f3 07       	cpc	r31, r19
   3fbfe:	c1 f7       	brne	.-16     	; 0x3fbf0 <sha1_final+0x9a>
   3fc00:	be 01       	movw	r22, r28
//	ctx->data[60] = ctx->bitlen >> 24;
//	ctx->data[59] = ctx->bitlen >> 32;
//	ctx->data[58] = ctx->bitlen >> 40;
//	ctx->data[57] = ctx->bitlen >> 48;
//	ctx->data[56] = ctx->bitlen >> 56;
	sha1_transform(ctx, ctx->data);
   3fc02:	ce 01       	movw	r24, r28
   3fc04:	b3 dd       	rcall	.-1178   	; 0x3f76c <sha1_transform>
   3fc06:	c7 01       	movw	r24, r14
   3fc08:	28 e1       	ldi	r18, 0x18	; 24
   3fc0a:	cb 5b       	subi	r28, 0xBB	; 187
   3fc0c:	df 4f       	sbci	r29, 0xFF	; 255
   3fc0e:	fe 01       	movw	r30, r28
   3fc10:	40 e0       	ldi	r20, 0x00	; 0
   3fc12:	50 e0       	ldi	r21, 0x00	; 0
   3fc14:	c1 90       	ld	r12, Z+
   3fc16:	d1 90       	ld	r13, Z+
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
		uint8_t shr = 24 - i * 8;
		for (BYTE ii = 0; ii < 5; ii++){
//			hash[i+4*ii] = (ctx->state[ii] >> (24 - i * 8)) & 0x000000ff;
			hash[i+4*ii] = (ctx->state[ii] >> shr);// & 0x000000ff;
   3fc18:	e1 90       	ld	r14, Z+
   3fc1a:	f1 90       	ld	r15, Z+
   3fc1c:	dc 01       	movw	r26, r24
   3fc1e:	a4 0f       	add	r26, r20
   3fc20:	b5 1f       	adc	r27, r21
   3fc22:	02 2e       	mov	r0, r18
   3fc24:	04 c0       	rjmp	.+8      	; 0x3fc2e <sha1_final+0xd8>
   3fc26:	f6 94       	lsr	r15
   3fc28:	e7 94       	ror	r14
   3fc2a:	d7 94       	ror	r13
   3fc2c:	c7 94       	ror	r12
   3fc2e:	0a 94       	dec	r0
   3fc30:	d2 f7       	brpl	.-12     	; 0x3fc26 <sha1_final+0xd0>
   3fc32:	cc 92       	st	X, r12
   3fc34:	4c 5f       	subi	r20, 0xFC	; 252
   3fc36:	5f 4f       	sbci	r21, 0xFF	; 255
   3fc38:	44 31       	cpi	r20, 0x14	; 20
   3fc3a:	51 05       	cpc	r21, r1

	// Since this implementation uses little endian byte ordering and MD uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
		uint8_t shr = 24 - i * 8;
		for (BYTE ii = 0; ii < 5; ii++){
   3fc3c:	59 f7       	brne	.-42     	; 0x3fc14 <sha1_final+0xbe>
   3fc3e:	28 50       	subi	r18, 0x08	; 8
   3fc40:	01 96       	adiw	r24, 0x01	; 1
   3fc42:	28 3f       	cpi	r18, 0xF8	; 248
   3fc44:	21 f7       	brne	.-56     	; 0x3fc0e <sha1_final+0xb8>
//	ctx->data[56] = ctx->bitlen >> 56;
	sha1_transform(ctx, ctx->data);

	// Since this implementation uses little endian byte ordering and MD uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
   3fc46:	df 91       	pop	r29
   3fc48:	cf 91       	pop	r28
//		hash[i + 4]  = (ctx->state[1] >> (24 - i * 8)) & 0x000000ff;
//		hash[i + 8]  = (ctx->state[2] >> (24 - i * 8)) & 0x000000ff;
//		hash[i + 12] = (ctx->state[3] >> (24 - i * 8)) & 0x000000ff;
//		hash[i + 16] = (ctx->state[4] >> (24 - i * 8)) & 0x000000ff;
	}
}
   3fc4a:	1f 91       	pop	r17
   3fc4c:	0f 91       	pop	r16
   3fc4e:	ff 90       	pop	r15
   3fc50:	ef 90       	pop	r14
   3fc52:	df 90       	pop	r13
   3fc54:	cf 90       	pop	r12
   3fc56:	08 95       	ret

0003fc58 <SPIInit>:


#include <avr/io.h>

void SPIInit(){
	DDRB = 0b000111;
   3fc58:	87 e0       	ldi	r24, 0x07	; 7
   3fc5a:	84 b9       	out	0x04, r24	; 4
//	DDRB &= ~(1<<3);
//	PORTB &= ~(1<<3);
	PORTB = (1<<0);
   3fc5c:	81 e0       	ldi	r24, 0x01	; 1
   3fc5e:	85 b9       	out	0x05, r24	; 5
	SPSR = 1;
   3fc60:	8d bd       	out	0x2d, r24	; 45
	SPCR = (1<<SPE)|(1<<MSTR);//0b01010000;
   3fc62:	80 e5       	ldi	r24, 0x50	; 80
   3fc64:	8c bd       	out	0x2c, r24	; 44
   3fc66:	08 95       	ret

0003fc68 <SPIDeInit>:
}

void SPIDeInit(){
	DDRB = 0;
   3fc68:	14 b8       	out	0x04, r1	; 4
	PORTB = 0;
   3fc6a:	15 b8       	out	0x05, r1	; 5
	SPSR = 0;
   3fc6c:	1d bc       	out	0x2d, r1	; 45
	SPCR = 0;
   3fc6e:	1c bc       	out	0x2c, r1	; 44
   3fc70:	08 95       	ret

0003fc72 <SPIXfer>:
}

uint8_t SPIXfer(uint8_t data){
//	uint16_t timeOut = 0xFFFF;
	SPDR = data;
   3fc72:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & _BV(SPIF)) == 0);
   3fc74:	0d b4       	in	r0, 0x2d	; 45
   3fc76:	07 fe       	sbrs	r0, 7
   3fc78:	fd cf       	rjmp	.-6      	; 0x3fc74 <SPIXfer+0x2>
//	&& --timeOut);
//	SPSR |= _BV(SPIF);
	data = SPDR;
   3fc7a:	8e b5       	in	r24, 0x2e	; 46
	return data;
}
   3fc7c:	08 95       	ret

0003fc7e <UartInit>:
#include <usart.h>
#include <crc.h>

void UartInit(void)
{
	UBRRL = UBR;
   3fc7e:	88 e0       	ldi	r24, 0x08	; 8
   3fc80:	80 93 c4 00 	sts	0x00C4, r24
	UBRRH = (UBR >> 8);
   3fc84:	10 92 c5 00 	sts	0x00C5, r1
	UCSRB = (1 << RXEN) | (1 << TXEN);
   3fc88:	88 e1       	ldi	r24, 0x18	; 24
   3fc8a:	80 93 c1 00 	sts	0x00C1, r24
   3fc8e:	08 95       	ret

0003fc90 <UartDeInit>:
}

void UartDeInit(void){
	UBRRL = 0;
   3fc90:	10 92 c4 00 	sts	0x00C4, r1
	UBRRH = 0;
   3fc94:	10 92 c5 00 	sts	0x00C5, r1
	UCSRB = 0;
   3fc98:	10 92 c1 00 	sts	0x00C1, r1
   3fc9c:	08 95       	ret

0003fc9e <UartPutC>:
}

void UartPutC(char data){
	while (!(UCSRA & (1 << UDRE)));
   3fc9e:	90 91 c0 00 	lds	r25, 0x00C0
   3fca2:	95 ff       	sbrs	r25, 5
   3fca4:	fc cf       	rjmp	.-8      	; 0x3fc9e <UartPutC>
	UDR = data;
   3fca6:	80 93 c6 00 	sts	0x00C6, r24
   3fcaa:	08 95       	ret

0003fcac <UartGetC>:
}

int UartGetC(uint8_t timeOut100Us){
	while (!(UCSRA & (1 << RXC)) && timeOut100Us){
   3fcac:	90 91 c0 00 	lds	r25, 0x00C0
   3fcb0:	97 fd       	sbrc	r25, 7
   3fcb2:	0a c0       	rjmp	.+20     	; 0x3fcc8 <UartGetC+0x1c>
   3fcb4:	88 23       	and	r24, r24
   3fcb6:	71 f0       	breq	.+28     	; 0x3fcd4 <UartGetC+0x28>
   3fcb8:	ef e8       	ldi	r30, 0x8F	; 143
   3fcba:	f1 e0       	ldi	r31, 0x01	; 1
   3fcbc:	31 97       	sbiw	r30, 0x01	; 1
   3fcbe:	f1 f7       	brne	.-4      	; 0x3fcbc <UartGetC+0x10>
   3fcc0:	00 c0       	rjmp	.+0      	; 0x3fcc2 <UartGetC+0x16>
   3fcc2:	00 00       	nop
		_delay_us(100);
		if (timeOut100Us)
			timeOut100Us--;
   3fcc4:	81 50       	subi	r24, 0x01	; 1
   3fcc6:	f2 cf       	rjmp	.-28     	; 0x3fcac <UartGetC>
	}
	if (timeOut100Us == 0)
   3fcc8:	88 23       	and	r24, r24
   3fcca:	21 f0       	breq	.+8      	; 0x3fcd4 <UartGetC+0x28>
		return -1;
	return UDR;
   3fccc:	80 91 c6 00 	lds	r24, 0x00C6
   3fcd0:	90 e0       	ldi	r25, 0x00	; 0
   3fcd2:	08 95       	ret
		_delay_us(100);
		if (timeOut100Us)
			timeOut100Us--;
	}
	if (timeOut100Us == 0)
		return -1;
   3fcd4:	8f ef       	ldi	r24, 0xFF	; 255
   3fcd6:	9f ef       	ldi	r25, 0xFF	; 255
	return UDR;
}
   3fcd8:	08 95       	ret

0003fcda <UartRead>:

uint8_t UartRead(uint32_t address, uint8_t* data, uint16_t dataLength){
   3fcda:	2f 92       	push	r2
   3fcdc:	3f 92       	push	r3
   3fcde:	4f 92       	push	r4
   3fce0:	5f 92       	push	r5
   3fce2:	6f 92       	push	r6
   3fce4:	7f 92       	push	r7
   3fce6:	8f 92       	push	r8
   3fce8:	9f 92       	push	r9
   3fcea:	af 92       	push	r10
   3fcec:	bf 92       	push	r11
   3fcee:	cf 92       	push	r12
   3fcf0:	df 92       	push	r13
   3fcf2:	ef 92       	push	r14
   3fcf4:	ff 92       	push	r15
   3fcf6:	0f 93       	push	r16
   3fcf8:	1f 93       	push	r17
   3fcfa:	cf 93       	push	r28
   3fcfc:	df 93       	push	r29
   3fcfe:	00 d0       	rcall	.+0      	; 0x3fd00 <UartRead+0x26>
   3fd00:	cd b7       	in	r28, 0x3d	; 61
   3fd02:	de b7       	in	r29, 0x3e	; 62
   3fd04:	56 2e       	mov	r5, r22
   3fd06:	3a 01       	movw	r6, r20
   3fd08:	3b 83       	std	Y+3, r19	; 0x03
   3fd0a:	2a 83       	std	Y+2, r18	; 0x02
		UartPutC('<');
		UartPutC('r');
		uint16_t crc = 0;
		UartPutC(address);
		crc = CRC(crc, (uint8_t)address);
		UartPutC(address>>8);
   3fd0c:	27 2e       	mov	r2, r23
		crc = CRC(crc, (uint8_t)(address>>8));
		UartPutC(address>>16);
   3fd0e:	38 2e       	mov	r3, r24
		crc = CRC(crc, (uint8_t)(address>>16));
		UartPutC(address>>24);
   3fd10:	49 2e       	mov	r4, r25
		crc = CRC(crc, (uint8_t)(address>>24));
		UartPutC(dataLength);
		crc = CRC(crc, (uint8_t)(dataLength));
		UartPutC(dataLength>>8);
   3fd12:	0b 81       	ldd	r16, Y+3	; 0x03
	return UDR;
}

uint8_t UartRead(uint32_t address, uint8_t* data, uint16_t dataLength){
	uint8_t retry = 8;
	uint8_t loop = 0;
   3fd14:	10 e0       	ldi	r17, 0x00	; 0
   3fd16:	49 01       	movw	r8, r18
   3fd18:	84 0e       	add	r8, r20
   3fd1a:	95 1e       	adc	r9, r21
	while(retry--){
		//pop data
		if (loop){
			while(UartGetC(10) >= 0);
		}
		loop++;
   3fd1c:	1f 5f       	subi	r17, 0xFF	; 255
		UartPutC('<');
   3fd1e:	8c e3       	ldi	r24, 0x3C	; 60
   3fd20:	be df       	rcall	.-132    	; 0x3fc9e <UartPutC>
   3fd22:	82 e7       	ldi	r24, 0x72	; 114
		UartPutC('r');
   3fd24:	bc df       	rcall	.-136    	; 0x3fc9e <UartPutC>
   3fd26:	85 2d       	mov	r24, r5
   3fd28:	ba df       	rcall	.-140    	; 0x3fc9e <UartPutC>
		uint16_t crc = 0;
		UartPutC(address);
   3fd2a:	65 2d       	mov	r22, r5
   3fd2c:	80 e0       	ldi	r24, 0x00	; 0
   3fd2e:	90 e0       	ldi	r25, 0x00	; 0
		crc = CRC(crc, (uint8_t)address);
   3fd30:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
   3fd34:	7c 01       	movw	r14, r24
   3fd36:	82 2d       	mov	r24, r2
   3fd38:	b2 df       	rcall	.-156    	; 0x3fc9e <UartPutC>
   3fd3a:	62 2d       	mov	r22, r2
		UartPutC(address>>8);
   3fd3c:	c7 01       	movw	r24, r14
   3fd3e:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
		crc = CRC(crc, (uint8_t)(address>>8));
   3fd42:	7c 01       	movw	r14, r24
   3fd44:	83 2d       	mov	r24, r3
   3fd46:	ab df       	rcall	.-170    	; 0x3fc9e <UartPutC>
   3fd48:	63 2d       	mov	r22, r3
   3fd4a:	c7 01       	movw	r24, r14
		UartPutC(address>>16);
   3fd4c:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
   3fd50:	7c 01       	movw	r14, r24
		crc = CRC(crc, (uint8_t)(address>>16));
   3fd52:	84 2d       	mov	r24, r4
   3fd54:	a4 df       	rcall	.-184    	; 0x3fc9e <UartPutC>
   3fd56:	64 2d       	mov	r22, r4
   3fd58:	c7 01       	movw	r24, r14
   3fd5a:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
		UartPutC(address>>24);
   3fd5e:	7c 01       	movw	r14, r24
   3fd60:	8a 81       	ldd	r24, Y+2	; 0x02
		crc = CRC(crc, (uint8_t)(address>>24));
   3fd62:	9d df       	rcall	.-198    	; 0x3fc9e <UartPutC>
   3fd64:	6a 81       	ldd	r22, Y+2	; 0x02
   3fd66:	c7 01       	movw	r24, r14
   3fd68:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
		UartPutC(dataLength);
   3fd6c:	7c 01       	movw	r14, r24
   3fd6e:	80 2f       	mov	r24, r16
   3fd70:	96 df       	rcall	.-212    	; 0x3fc9e <UartPutC>
		crc = CRC(crc, (uint8_t)(dataLength));
   3fd72:	60 2f       	mov	r22, r16
   3fd74:	c7 01       	movw	r24, r14
   3fd76:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
   3fd7a:	7c 01       	movw	r14, r24
		UartPutC(dataLength>>8);
   3fd7c:	80 e0       	ldi	r24, 0x00	; 0
   3fd7e:	8f df       	rcall	.-226    	; 0x3fc9e <UartPutC>
   3fd80:	60 e0       	ldi	r22, 0x00	; 0
		crc = CRC(crc, (uint8_t)(dataLength>>8));
   3fd82:	c7 01       	movw	r24, r14
   3fd84:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
   3fd88:	7c 01       	movw	r14, r24
   3fd8a:	80 e0       	ldi	r24, 0x00	; 0
		UartPutC(dataLength>>16);
   3fd8c:	88 df       	rcall	.-240    	; 0x3fc9e <UartPutC>
   3fd8e:	60 e0       	ldi	r22, 0x00	; 0
   3fd90:	c7 01       	movw	r24, r14
		crc = CRC(crc, (uint8_t)(dataLength>>16));
   3fd92:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
   3fd96:	7c 01       	movw	r14, r24
   3fd98:	80 e0       	ldi	r24, 0x00	; 0
   3fd9a:	81 df       	rcall	.-254    	; 0x3fc9e <UartPutC>
		UartPutC(dataLength>>24);
   3fd9c:	60 e0       	ldi	r22, 0x00	; 0
   3fd9e:	c7 01       	movw	r24, r14
   3fda0:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
		crc = CRC(crc, (uint8_t)(dataLength>>24));
   3fda4:	7c 01       	movw	r14, r24
   3fda6:	80 e0       	ldi	r24, 0x00	; 0
   3fda8:	7a df       	rcall	.-268    	; 0x3fc9e <UartPutC>
   3fdaa:	60 e0       	ldi	r22, 0x00	; 0
		UartPutC('\0');
   3fdac:	c7 01       	movw	r24, r14
   3fdae:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
		crc = CRC(crc, 0);
   3fdb2:	7c 01       	movw	r14, r24
   3fdb4:	80 e0       	ldi	r24, 0x00	; 0
   3fdb6:	73 df       	rcall	.-282    	; 0x3fc9e <UartPutC>
   3fdb8:	60 e0       	ldi	r22, 0x00	; 0
   3fdba:	c7 01       	movw	r24, r14
		UartPutC('\0');
   3fdbc:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
   3fdc0:	99 83       	std	Y+1, r25	; 0x01
		crc = CRC(crc, 0);
   3fdc2:	6d df       	rcall	.-294    	; 0x3fc9e <UartPutC>
   3fdc4:	99 81       	ldd	r25, Y+1	; 0x01
   3fdc6:	89 2f       	mov	r24, r25
   3fdc8:	6a df       	rcall	.-300    	; 0x3fc9e <UartPutC>
   3fdca:	8e e3       	ldi	r24, 0x3E	; 62
		UartPutC('\0');
   3fdcc:	68 df       	rcall	.-304    	; 0x3fc9e <UartPutC>
   3fdce:	8f ef       	ldi	r24, 0xFF	; 255
   3fdd0:	6d df       	rcall	.-294    	; 0x3fcac <UartGetC>
		crc = CRC(crc, 0);
   3fdd2:	97 fd       	sbrc	r25, 7
   3fdd4:	2f c0       	rjmp	.+94     	; 0x3fe34 <UartRead+0x15a>
   3fdd6:	81 30       	cpi	r24, 0x01	; 1
   3fdd8:	91 05       	cpc	r25, r1
		UartPutC(crc);
   3fdda:	29 f4       	brne	.+10     	; 0x3fde6 <UartRead+0x10c>
   3fddc:	82 e0       	ldi	r24, 0x02	; 2
   3fdde:	66 df       	rcall	.-308    	; 0x3fcac <UartGetC>
		UartPutC(crc>>8);
   3fde0:	82 e0       	ldi	r24, 0x02	; 2
   3fde2:	64 df       	rcall	.-312    	; 0x3fcac <UartGetC>
   3fde4:	27 c0       	rjmp	.+78     	; 0x3fe34 <UartRead+0x15a>
   3fde6:	89 2b       	or	r24, r25
		UartPutC('>');
   3fde8:	29 f5       	brne	.+74     	; 0x3fe34 <UartRead+0x15a>
   3fdea:	60 e0       	ldi	r22, 0x00	; 0
   3fdec:	80 e0       	ldi	r24, 0x00	; 0
		int d = UartGetC(255);
   3fdee:	90 e0       	ldi	r25, 0x00	; 0
   3fdf0:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
		if (d < 0)
   3fdf4:	7c 01       	movw	r14, r24
   3fdf6:	63 01       	movw	r12, r6
			continue;
		if (d == 1){
   3fdf8:	c8 14       	cp	r12, r8
   3fdfa:	d9 04       	cpc	r13, r9
   3fdfc:	69 f0       	breq	.+26     	; 0x3fe18 <UartRead+0x13e>
			UartGetC(2);
   3fdfe:	82 e0       	ldi	r24, 0x02	; 2
   3fe00:	55 df       	rcall	.-342    	; 0x3fcac <UartGetC>
   3fe02:	97 fd       	sbrc	r25, 7
			UartGetC(2);
   3fe04:	17 c0       	rjmp	.+46     	; 0x3fe34 <UartRead+0x15a>
   3fe06:	f6 01       	movw	r30, r12
   3fe08:	81 93       	st	Z+, r24
			continue;
   3fe0a:	6f 01       	movw	r12, r30
		}else if (d == 0){
   3fe0c:	68 2f       	mov	r22, r24
   3fe0e:	c7 01       	movw	r24, r14
			crc = CRC(0, 0);
   3fe10:	0f 94 9f f2 	call	0x3e53e	; 0x3e53e <CRC>
   3fe14:	7c 01       	movw	r14, r24
   3fe16:	f0 cf       	rjmp	.-32     	; 0x3fdf8 <UartRead+0x11e>
   3fe18:	82 e0       	ldi	r24, 0x02	; 2
   3fe1a:	48 df       	rcall	.-368    	; 0x3fcac <UartGetC>
			uint8_t* dd = data;
   3fe1c:	6c 01       	movw	r12, r24
			uint16_t dl = dataLength;
			while(dl--){
   3fe1e:	82 e0       	ldi	r24, 0x02	; 2
   3fe20:	45 df       	rcall	.-374    	; 0x3fcac <UartGetC>
   3fe22:	b8 2e       	mov	r11, r24
				 d = UartGetC(2);
   3fe24:	a1 2c       	mov	r10, r1
   3fe26:	ca 28       	or	r12, r10
   3fe28:	db 28       	or	r13, r11
				if (d < 0)
   3fe2a:	ec 14       	cp	r14, r12
   3fe2c:	fd 04       	cpc	r15, r13
					break;
				*dd = d;
   3fe2e:	11 f4       	brne	.+4      	; 0x3fe34 <UartRead+0x15a>
   3fe30:	81 e0       	ldi	r24, 0x01	; 1
   3fe32:	08 c0       	rjmp	.+16     	; 0x3fe44 <UartRead+0x16a>
				crc = CRC(crc, d);
   3fe34:	18 30       	cpi	r17, 0x08	; 8
   3fe36:	29 f0       	breq	.+10     	; 0x3fe42 <UartRead+0x168>
   3fe38:	8a e0       	ldi	r24, 0x0A	; 10
   3fe3a:	38 df       	rcall	.-400    	; 0x3fcac <UartGetC>
   3fe3c:	97 ff       	sbrs	r25, 7
   3fe3e:	fc cf       	rjmp	.-8      	; 0x3fe38 <UartRead+0x15e>
				dd++;
			}
			if (d < 0)
				continue;
			uint16_t ccrc = UartGetC(2);
   3fe40:	6d cf       	rjmp	.-294    	; 0x3fd1c <UartRead+0x42>
   3fe42:	80 e0       	ldi	r24, 0x00	; 0
   3fe44:	0f 90       	pop	r0
   3fe46:	0f 90       	pop	r0
			ccrc |= ((uint16_t)UartGetC(2)) << 8;
   3fe48:	0f 90       	pop	r0
   3fe4a:	df 91       	pop	r29
   3fe4c:	cf 91       	pop	r28
   3fe4e:	1f 91       	pop	r17
   3fe50:	0f 91       	pop	r16
   3fe52:	ff 90       	pop	r15
   3fe54:	ef 90       	pop	r14
			if (crc == ccrc)
   3fe56:	df 90       	pop	r13
   3fe58:	cf 90       	pop	r12
   3fe5a:	bf 90       	pop	r11
				return 1;
   3fe5c:	af 90       	pop	r10
   3fe5e:	9f 90       	pop	r9
}

uint8_t UartRead(uint32_t address, uint8_t* data, uint16_t dataLength){
	uint8_t retry = 8;
	uint8_t loop = 0;
	while(retry--){
   3fe60:	8f 90       	pop	r8
   3fe62:	7f 90       	pop	r7
		//pop data
		if (loop){
			while(UartGetC(10) >= 0);
   3fe64:	6f 90       	pop	r6
   3fe66:	5f 90       	pop	r5
   3fe68:	4f 90       	pop	r4
   3fe6a:	3f 90       	pop	r3
   3fe6c:	2f 90       	pop	r2
   3fe6e:	08 95       	ret

0003fe70 <__umulhisi3>:
   3fe70:	a2 9f       	mul	r26, r18
   3fe72:	b0 01       	movw	r22, r0
   3fe74:	b3 9f       	mul	r27, r19
   3fe76:	c0 01       	movw	r24, r0
   3fe78:	a3 9f       	mul	r26, r19
   3fe7a:	70 0d       	add	r23, r0
   3fe7c:	81 1d       	adc	r24, r1
   3fe7e:	11 24       	eor	r1, r1
   3fe80:	91 1d       	adc	r25, r1
   3fe82:	b2 9f       	mul	r27, r18
   3fe84:	70 0d       	add	r23, r0
   3fe86:	81 1d       	adc	r24, r1
   3fe88:	11 24       	eor	r1, r1
   3fe8a:	91 1d       	adc	r25, r1
   3fe8c:	08 95       	ret

0003fe8e <__muluhisi3>:
   3fe8e:	f0 df       	rcall	.-32     	; 0x3fe70 <__umulhisi3>
   3fe90:	a5 9f       	mul	r26, r21
   3fe92:	90 0d       	add	r25, r0
   3fe94:	b4 9f       	mul	r27, r20
   3fe96:	90 0d       	add	r25, r0
   3fe98:	a4 9f       	mul	r26, r20
   3fe9a:	80 0d       	add	r24, r0
   3fe9c:	91 1d       	adc	r25, r1
   3fe9e:	11 24       	eor	r1, r1
   3fea0:	08 95       	ret

0003fea2 <__udivmodqi4>:
   3fea2:	99 1b       	sub	r25, r25
   3fea4:	79 e0       	ldi	r23, 0x09	; 9
   3fea6:	04 c0       	rjmp	.+8      	; 0x3feb0 <__udivmodqi4_ep>

0003fea8 <__udivmodqi4_loop>:
   3fea8:	99 1f       	adc	r25, r25
   3feaa:	96 17       	cp	r25, r22
   3feac:	08 f0       	brcs	.+2      	; 0x3feb0 <__udivmodqi4_ep>
   3feae:	96 1b       	sub	r25, r22

0003feb0 <__udivmodqi4_ep>:
   3feb0:	88 1f       	adc	r24, r24
   3feb2:	7a 95       	dec	r23
   3feb4:	c9 f7       	brne	.-14     	; 0x3fea8 <__udivmodqi4_loop>
   3feb6:	80 95       	com	r24
   3feb8:	08 95       	ret

0003feba <__udivmodsi4>:
   3feba:	a1 e2       	ldi	r26, 0x21	; 33
   3febc:	1a 2e       	mov	r1, r26
   3febe:	aa 1b       	sub	r26, r26
   3fec0:	bb 1b       	sub	r27, r27
   3fec2:	fd 01       	movw	r30, r26
   3fec4:	0d c0       	rjmp	.+26     	; 0x3fee0 <__udivmodsi4_ep>

0003fec6 <__udivmodsi4_loop>:
   3fec6:	aa 1f       	adc	r26, r26
   3fec8:	bb 1f       	adc	r27, r27
   3feca:	ee 1f       	adc	r30, r30
   3fecc:	ff 1f       	adc	r31, r31
   3fece:	a2 17       	cp	r26, r18
   3fed0:	b3 07       	cpc	r27, r19
   3fed2:	e4 07       	cpc	r30, r20
   3fed4:	f5 07       	cpc	r31, r21
   3fed6:	20 f0       	brcs	.+8      	; 0x3fee0 <__udivmodsi4_ep>
   3fed8:	a2 1b       	sub	r26, r18
   3feda:	b3 0b       	sbc	r27, r19
   3fedc:	e4 0b       	sbc	r30, r20
   3fede:	f5 0b       	sbc	r31, r21

0003fee0 <__udivmodsi4_ep>:
   3fee0:	66 1f       	adc	r22, r22
   3fee2:	77 1f       	adc	r23, r23
   3fee4:	88 1f       	adc	r24, r24
   3fee6:	99 1f       	adc	r25, r25
   3fee8:	1a 94       	dec	r1
   3feea:	69 f7       	brne	.-38     	; 0x3fec6 <__udivmodsi4_loop>
   3feec:	60 95       	com	r22
   3feee:	70 95       	com	r23
   3fef0:	80 95       	com	r24
   3fef2:	90 95       	com	r25
   3fef4:	9b 01       	movw	r18, r22
   3fef6:	ac 01       	movw	r20, r24
   3fef8:	bd 01       	movw	r22, r26
   3fefa:	cf 01       	movw	r24, r30
   3fefc:	08 95       	ret

0003fefe <memcmp>:
   3fefe:	fb 01       	movw	r30, r22
   3ff00:	dc 01       	movw	r26, r24
   3ff02:	04 c0       	rjmp	.+8      	; 0x3ff0c <memcmp+0xe>
   3ff04:	8d 91       	ld	r24, X+
   3ff06:	01 90       	ld	r0, Z+
   3ff08:	80 19       	sub	r24, r0
   3ff0a:	21 f4       	brne	.+8      	; 0x3ff14 <memcmp+0x16>
   3ff0c:	41 50       	subi	r20, 0x01	; 1
   3ff0e:	50 40       	sbci	r21, 0x00	; 0
   3ff10:	c8 f7       	brcc	.-14     	; 0x3ff04 <memcmp+0x6>
   3ff12:	88 1b       	sub	r24, r24
   3ff14:	99 0b       	sbc	r25, r25
   3ff16:	08 95       	ret

0003ff18 <memset>:
   3ff18:	dc 01       	movw	r26, r24
   3ff1a:	01 c0       	rjmp	.+2      	; 0x3ff1e <memset+0x6>
   3ff1c:	6d 93       	st	X+, r22
   3ff1e:	41 50       	subi	r20, 0x01	; 1
   3ff20:	50 40       	sbci	r21, 0x00	; 0
   3ff22:	e0 f7       	brcc	.-8      	; 0x3ff1c <memset+0x4>
   3ff24:	08 95       	ret

0003ff26 <_exit>:
   3ff26:	f8 94       	cli

0003ff28 <__stop_program>:
   3ff28:	ff cf       	rjmp	.-2      	; 0x3ff28 <__stop_program>
